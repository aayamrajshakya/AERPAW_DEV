/**
 * Common Data Types
 * Common Data Types for Service Based Interfaces. Â© 2022, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "InterFreqTargetInfo.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::common {

InterFreqTargetInfo::InterFreqTargetInfo() {
  m_DlCarrierFreq   = 0;
  m_CellIdListIsSet = false;
}

void InterFreqTargetInfo::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool InterFreqTargetInfo::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool InterFreqTargetInfo::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "InterFreqTargetInfo" : pathPrefix;

  /* DlCarrierFreq */ {
    const int32_t& value               = m_DlCarrierFreq;
    const std::string currentValuePath = _pathPrefix + ".dlCarrierFreq";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
    if (value > 3279165) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 3279165;";
    }
  }

  if (cellIdListIsSet()) {
    const std::vector<int32_t>& value  = m_CellIdList;
    const std::string currentValuePath = _pathPrefix + ".cellIdList";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    if (value.size() > 32) {
      success = false;
      msg << currentValuePath << ": must have at most 32 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const int32_t& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        if (value < 0) {
          success = false;
          msg << currentValuePath << ": must be greater than or equal to 0;";
        }
        if (value > 1007) {
          success = false;
          msg << currentValuePath << ": must be less than or equal to 1007;";
        }

        i++;
      }
    }
  }

  return success;
}

bool InterFreqTargetInfo::operator==(const InterFreqTargetInfo& rhs) const {
  return

      (getDlCarrierFreq() == rhs.getDlCarrierFreq()) &&

      ((!cellIdListIsSet() && !rhs.cellIdListIsSet()) ||
       (cellIdListIsSet() && rhs.cellIdListIsSet() &&
        getCellIdList() == rhs.getCellIdList()))

          ;
}

bool InterFreqTargetInfo::operator!=(const InterFreqTargetInfo& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const InterFreqTargetInfo& o) {
  j                  = nlohmann::json();
  j["dlCarrierFreq"] = o.m_DlCarrierFreq;
  if (o.cellIdListIsSet() || !o.m_CellIdList.empty())
    j["cellIdList"] = o.m_CellIdList;
}

void from_json(const nlohmann::json& j, InterFreqTargetInfo& o) {
  j.at("dlCarrierFreq").get_to(o.m_DlCarrierFreq);
  if (j.find("cellIdList") != j.end()) {
    j.at("cellIdList").get_to(o.m_CellIdList);
    o.m_CellIdListIsSet = true;
  }
}

int32_t InterFreqTargetInfo::getDlCarrierFreq() const {
  return m_DlCarrierFreq;
}
void InterFreqTargetInfo::setDlCarrierFreq(int32_t const value) {
  m_DlCarrierFreq = value;
}
std::vector<int32_t> InterFreqTargetInfo::getCellIdList() const {
  return m_CellIdList;
}
void InterFreqTargetInfo::setCellIdList(std::vector<int32_t> const value) {
  m_CellIdList      = value;
  m_CellIdListIsSet = true;
}
bool InterFreqTargetInfo::cellIdListIsSet() const {
  return m_CellIdListIsSet;
}
void InterFreqTargetInfo::unsetCellIdList() {
  m_CellIdListIsSet = false;
}

}  // namespace oai::model::common
