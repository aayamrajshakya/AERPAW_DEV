/**
 * Common Data Types
 * Common Data Types for Service Based Interfaces. Â© 2022, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "Pc5QoSPara.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::common {

Pc5QoSPara::Pc5QoSPara() {
  m_Pc5LinkAmbr      = "";
  m_Pc5LinkAmbrIsSet = false;
}

void Pc5QoSPara::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool Pc5QoSPara::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool Pc5QoSPara::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "Pc5QoSPara" : pathPrefix;

  /* Pc5QosFlowList */ {
    const std::vector<oai::model::common::Pc5QosFlowItem>& value =
        m_Pc5QosFlowList;
    const std::string currentValuePath = _pathPrefix + ".pc5QosFlowList";

    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const oai::model::common::Pc5QosFlowItem& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".pc5QosFlowList") &&
                  success;

        i++;
      }
    }
  }

  if (pc5LinkAmbrIsSet()) {
    const std::string& value           = m_Pc5LinkAmbr;
    const std::string currentValuePath = _pathPrefix + ".pc5LinkAmbr";
  }

  return success;
}

bool Pc5QoSPara::operator==(const Pc5QoSPara& rhs) const {
  return

      (getPc5QosFlowList() == rhs.getPc5QosFlowList()) &&

      ((!pc5LinkAmbrIsSet() && !rhs.pc5LinkAmbrIsSet()) ||
       (pc5LinkAmbrIsSet() && rhs.pc5LinkAmbrIsSet() &&
        getPc5LinkAmbr() == rhs.getPc5LinkAmbr()))

          ;
}

bool Pc5QoSPara::operator!=(const Pc5QoSPara& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Pc5QoSPara& o) {
  j                   = nlohmann::json();
  j["pc5QosFlowList"] = o.m_Pc5QosFlowList;
  if (o.pc5LinkAmbrIsSet()) j["pc5LinkAmbr"] = o.m_Pc5LinkAmbr;
}

void from_json(const nlohmann::json& j, Pc5QoSPara& o) {
  j.at("pc5QosFlowList").get_to(o.m_Pc5QosFlowList);
  if (j.find("pc5LinkAmbr") != j.end()) {
    j.at("pc5LinkAmbr").get_to(o.m_Pc5LinkAmbr);
    o.m_Pc5LinkAmbrIsSet = true;
  }
}

std::vector<oai::model::common::Pc5QosFlowItem> Pc5QoSPara::getPc5QosFlowList()
    const {
  return m_Pc5QosFlowList;
}
void Pc5QoSPara::setPc5QosFlowList(
    std::vector<oai::model::common::Pc5QosFlowItem> const& value) {
  m_Pc5QosFlowList = value;
}
std::string Pc5QoSPara::getPc5LinkAmbr() const {
  return m_Pc5LinkAmbr;
}
void Pc5QoSPara::setPc5LinkAmbr(std::string const& value) {
  m_Pc5LinkAmbr      = value;
  m_Pc5LinkAmbrIsSet = true;
}
bool Pc5QoSPara::pc5LinkAmbrIsSet() const {
  return m_Pc5LinkAmbrIsSet;
}
void Pc5QoSPara::unsetPc5LinkAmbr() {
  m_Pc5LinkAmbrIsSet = false;
}

}  // namespace oai::model::common
