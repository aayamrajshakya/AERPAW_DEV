/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "TrafficControlData.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::pcf {

TrafficControlData::TrafficControlData() {
  m_TcId                        = "";
  m_FlowStatusIsSet             = false;
  m_RedirectInfoIsSet           = false;
  m_AddRedirectInfoIsSet        = false;
  m_MuteNotif                   = false;
  m_MuteNotifIsSet              = false;
  m_TrafficSteeringPolIdDl      = "";
  m_TrafficSteeringPolIdDlIsSet = false;
  m_TrafficSteeringPolIdUl      = "";
  m_TrafficSteeringPolIdUlIsSet = false;
  m_RouteToLocsIsSet            = false;
  m_TraffCorreInd               = false;
  m_TraffCorreIndIsSet          = false;
  m_UpPathChgEventIsSet         = false;
  m_SteerFunIsSet               = false;
  m_SteerModeDlIsSet            = false;
  m_SteerModeUlIsSet            = false;
  m_MulAccCtrlIsSet             = false;
}

void TrafficControlData::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool TrafficControlData::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool TrafficControlData::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "TrafficControlData" : pathPrefix;

  if (addRedirectInfoIsSet()) {
    const std::vector<oai::model::pcf::RedirectInformation>& value =
        m_AddRedirectInfo;
    const std::string currentValuePath = _pathPrefix + ".addRedirectInfo";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const oai::model::pcf::RedirectInformation& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".addRedirectInfo") &&
                  success;

        i++;
      }
    }
  }

  if (routeToLocsIsSet()) {
    const std::vector<oai::model::common::RouteToLocation>& value =
        m_RouteToLocs;
    const std::string currentValuePath = _pathPrefix + ".routeToLocs";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const oai::model::common::RouteToLocation& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".routeToLocs") && success;

        i++;
      }
    }
  }

  return success;
}

bool TrafficControlData::operator==(const TrafficControlData& rhs) const {
  return

      (getTcId() == rhs.getTcId()) &&

      ((!flowStatusIsSet() && !rhs.flowStatusIsSet()) ||
       (flowStatusIsSet() && rhs.flowStatusIsSet() &&
        getFlowStatus() == rhs.getFlowStatus())) &&

      ((!redirectInfoIsSet() && !rhs.redirectInfoIsSet()) ||
       (redirectInfoIsSet() && rhs.redirectInfoIsSet() &&
        getRedirectInfo() == rhs.getRedirectInfo())) &&

      ((!addRedirectInfoIsSet() && !rhs.addRedirectInfoIsSet()) ||
       (addRedirectInfoIsSet() && rhs.addRedirectInfoIsSet() &&
        getAddRedirectInfo() == rhs.getAddRedirectInfo())) &&

      ((!muteNotifIsSet() && !rhs.muteNotifIsSet()) ||
       (muteNotifIsSet() && rhs.muteNotifIsSet() &&
        isMuteNotif() == rhs.isMuteNotif())) &&

      ((!trafficSteeringPolIdDlIsSet() && !rhs.trafficSteeringPolIdDlIsSet()) ||
       (trafficSteeringPolIdDlIsSet() && rhs.trafficSteeringPolIdDlIsSet() &&
        getTrafficSteeringPolIdDl() == rhs.getTrafficSteeringPolIdDl())) &&

      ((!trafficSteeringPolIdUlIsSet() && !rhs.trafficSteeringPolIdUlIsSet()) ||
       (trafficSteeringPolIdUlIsSet() && rhs.trafficSteeringPolIdUlIsSet() &&
        getTrafficSteeringPolIdUl() == rhs.getTrafficSteeringPolIdUl())) &&

      ((!routeToLocsIsSet() && !rhs.routeToLocsIsSet()) ||
       (routeToLocsIsSet() && rhs.routeToLocsIsSet() &&
        getRouteToLocs() == rhs.getRouteToLocs())) &&

      ((!traffCorreIndIsSet() && !rhs.traffCorreIndIsSet()) ||
       (traffCorreIndIsSet() && rhs.traffCorreIndIsSet() &&
        isTraffCorreInd() == rhs.isTraffCorreInd())) &&

      ((!upPathChgEventIsSet() && !rhs.upPathChgEventIsSet()) ||
       (upPathChgEventIsSet() && rhs.upPathChgEventIsSet() &&
        getUpPathChgEvent() == rhs.getUpPathChgEvent())) &&

      ((!steerFunIsSet() && !rhs.steerFunIsSet()) ||
       (steerFunIsSet() && rhs.steerFunIsSet() &&
        getSteerFun() == rhs.getSteerFun())) &&

      ((!steerModeDlIsSet() && !rhs.steerModeDlIsSet()) ||
       (steerModeDlIsSet() && rhs.steerModeDlIsSet() &&
        getSteerModeDl() == rhs.getSteerModeDl())) &&

      ((!steerModeUlIsSet() && !rhs.steerModeUlIsSet()) ||
       (steerModeUlIsSet() && rhs.steerModeUlIsSet() &&
        getSteerModeUl() == rhs.getSteerModeUl())) &&

      ((!mulAccCtrlIsSet() && !rhs.mulAccCtrlIsSet()) ||
       (mulAccCtrlIsSet() && rhs.mulAccCtrlIsSet() &&
        getMulAccCtrl() == rhs.getMulAccCtrl()))

          ;
}

bool TrafficControlData::operator!=(const TrafficControlData& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TrafficControlData& o) {
  j         = nlohmann::json();
  j["tcId"] = o.m_TcId;
  if (o.flowStatusIsSet()) j["flowStatus"] = o.m_FlowStatus;
  if (o.redirectInfoIsSet()) j["redirectInfo"] = o.m_RedirectInfo;
  if (o.addRedirectInfoIsSet() || !o.m_AddRedirectInfo.empty())
    j["addRedirectInfo"] = o.m_AddRedirectInfo;
  if (o.muteNotifIsSet()) j["muteNotif"] = o.m_MuteNotif;
  if (o.trafficSteeringPolIdDlIsSet())
    j["trafficSteeringPolIdDl"] = o.m_TrafficSteeringPolIdDl;
  if (o.trafficSteeringPolIdUlIsSet())
    j["trafficSteeringPolIdUl"] = o.m_TrafficSteeringPolIdUl;
  if (o.routeToLocsIsSet() || !o.m_RouteToLocs.empty())
    j["routeToLocs"] = o.m_RouteToLocs;
  if (o.traffCorreIndIsSet()) j["traffCorreInd"] = o.m_TraffCorreInd;
  if (o.upPathChgEventIsSet()) j["upPathChgEvent"] = o.m_UpPathChgEvent;
  if (o.steerFunIsSet()) j["steerFun"] = o.m_SteerFun;
  if (o.steerModeDlIsSet()) j["steerModeDl"] = o.m_SteerModeDl;
  if (o.steerModeUlIsSet()) j["steerModeUl"] = o.m_SteerModeUl;
  if (o.mulAccCtrlIsSet()) j["mulAccCtrl"] = o.m_MulAccCtrl;
}

void from_json(const nlohmann::json& j, TrafficControlData& o) {
  if (j.find("tcId") != j.end()) {
    j.at("tcId").get_to(o.m_TcId);
  }
  if (j.find("flowStatus") != j.end()) {
    j.at("flowStatus").get_to(o.m_FlowStatus);
    o.m_FlowStatusIsSet = true;
  }
  if (j.find("redirectInfo") != j.end()) {
    j.at("redirectInfo").get_to(o.m_RedirectInfo);
    o.m_RedirectInfoIsSet = true;
  }
  if (j.find("addRedirectInfo") != j.end()) {
    j.at("addRedirectInfo").get_to(o.m_AddRedirectInfo);
    o.m_AddRedirectInfoIsSet = true;
  }
  if (j.find("muteNotif") != j.end()) {
    j.at("muteNotif").get_to(o.m_MuteNotif);
    o.m_MuteNotifIsSet = true;
  }
  if (j.find("trafficSteeringPolIdDl") != j.end()) {
    j.at("trafficSteeringPolIdDl").get_to(o.m_TrafficSteeringPolIdDl);
    o.m_TrafficSteeringPolIdDlIsSet = true;
  }
  if (j.find("trafficSteeringPolIdUl") != j.end()) {
    j.at("trafficSteeringPolIdUl").get_to(o.m_TrafficSteeringPolIdUl);
    o.m_TrafficSteeringPolIdUlIsSet = true;
  }
  if (j.find("routeToLocs") != j.end()) {
    j.at("routeToLocs").get_to(o.m_RouteToLocs);
    o.m_RouteToLocsIsSet = true;
  }
  if (j.find("traffCorreInd") != j.end()) {
    j.at("traffCorreInd").get_to(o.m_TraffCorreInd);
    o.m_TraffCorreIndIsSet = true;
  }
  if (j.find("upPathChgEvent") != j.end()) {
    j.at("upPathChgEvent").get_to(o.m_UpPathChgEvent);
    o.m_UpPathChgEventIsSet = true;
  }
  if (j.find("steerFun") != j.end()) {
    j.at("steerFun").get_to(o.m_SteerFun);
    o.m_SteerFunIsSet = true;
  }
  if (j.find("steerModeDl") != j.end()) {
    j.at("steerModeDl").get_to(o.m_SteerModeDl);
    o.m_SteerModeDlIsSet = true;
  }
  if (j.find("steerModeUl") != j.end()) {
    j.at("steerModeUl").get_to(o.m_SteerModeUl);
    o.m_SteerModeUlIsSet = true;
  }
  if (j.find("mulAccCtrl") != j.end()) {
    j.at("mulAccCtrl").get_to(o.m_MulAccCtrl);
    o.m_MulAccCtrlIsSet = true;
  }
}

std::string TrafficControlData::getTcId() const {
  return m_TcId;
}
void TrafficControlData::setTcId(std::string const& value) {
  m_TcId = value;
}
oai::model::pcf::FlowStatus TrafficControlData::getFlowStatus() const {
  return m_FlowStatus;
}
void TrafficControlData::setFlowStatus(
    oai::model::pcf::FlowStatus const& value) {
  m_FlowStatus      = value;
  m_FlowStatusIsSet = true;
}
bool TrafficControlData::flowStatusIsSet() const {
  return m_FlowStatusIsSet;
}
void TrafficControlData::unsetFlowStatus() {
  m_FlowStatusIsSet = false;
}
oai::model::pcf::RedirectInformation TrafficControlData::getRedirectInfo()
    const {
  return m_RedirectInfo;
}
void TrafficControlData::setRedirectInfo(
    oai::model::pcf::RedirectInformation const& value) {
  m_RedirectInfo      = value;
  m_RedirectInfoIsSet = true;
}
bool TrafficControlData::redirectInfoIsSet() const {
  return m_RedirectInfoIsSet;
}
void TrafficControlData::unsetRedirectInfo() {
  m_RedirectInfoIsSet = false;
}
std::vector<oai::model::pcf::RedirectInformation>
TrafficControlData::getAddRedirectInfo() const {
  return m_AddRedirectInfo;
}
void TrafficControlData::setAddRedirectInfo(
    std::vector<oai::model::pcf::RedirectInformation> const& value) {
  m_AddRedirectInfo      = value;
  m_AddRedirectInfoIsSet = true;
}
bool TrafficControlData::addRedirectInfoIsSet() const {
  return m_AddRedirectInfoIsSet;
}
void TrafficControlData::unsetAddRedirectInfo() {
  m_AddRedirectInfoIsSet = false;
}
bool TrafficControlData::isMuteNotif() const {
  return m_MuteNotif;
}
void TrafficControlData::setMuteNotif(bool const value) {
  m_MuteNotif      = value;
  m_MuteNotifIsSet = true;
}
bool TrafficControlData::muteNotifIsSet() const {
  return m_MuteNotifIsSet;
}
void TrafficControlData::unsetMuteNotif() {
  m_MuteNotifIsSet = false;
}
std::string TrafficControlData::getTrafficSteeringPolIdDl() const {
  return m_TrafficSteeringPolIdDl;
}
void TrafficControlData::setTrafficSteeringPolIdDl(std::string const& value) {
  m_TrafficSteeringPolIdDl      = value;
  m_TrafficSteeringPolIdDlIsSet = true;
}
bool TrafficControlData::trafficSteeringPolIdDlIsSet() const {
  return m_TrafficSteeringPolIdDlIsSet;
}
void TrafficControlData::unsetTrafficSteeringPolIdDl() {
  m_TrafficSteeringPolIdDlIsSet = false;
}
std::string TrafficControlData::getTrafficSteeringPolIdUl() const {
  return m_TrafficSteeringPolIdUl;
}
void TrafficControlData::setTrafficSteeringPolIdUl(std::string const& value) {
  m_TrafficSteeringPolIdUl      = value;
  m_TrafficSteeringPolIdUlIsSet = true;
}
bool TrafficControlData::trafficSteeringPolIdUlIsSet() const {
  return m_TrafficSteeringPolIdUlIsSet;
}
void TrafficControlData::unsetTrafficSteeringPolIdUl() {
  m_TrafficSteeringPolIdUlIsSet = false;
}
std::vector<oai::model::common::RouteToLocation>
TrafficControlData::getRouteToLocs() const {
  return m_RouteToLocs;
}
void TrafficControlData::setRouteToLocs(
    std::vector<oai::model::common::RouteToLocation> const& value) {
  m_RouteToLocs      = value;
  m_RouteToLocsIsSet = true;
}
bool TrafficControlData::routeToLocsIsSet() const {
  return m_RouteToLocsIsSet;
}
void TrafficControlData::unsetRouteToLocs() {
  m_RouteToLocsIsSet = false;
}
bool TrafficControlData::isTraffCorreInd() const {
  return m_TraffCorreInd;
}
void TrafficControlData::setTraffCorreInd(bool const value) {
  m_TraffCorreInd      = value;
  m_TraffCorreIndIsSet = true;
}
bool TrafficControlData::traffCorreIndIsSet() const {
  return m_TraffCorreIndIsSet;
}
void TrafficControlData::unsetTraffCorreInd() {
  m_TraffCorreIndIsSet = false;
}
oai::model::pcf::UpPathChgEvent TrafficControlData::getUpPathChgEvent() const {
  return m_UpPathChgEvent;
}
void TrafficControlData::setUpPathChgEvent(
    oai::model::pcf::UpPathChgEvent const& value) {
  m_UpPathChgEvent      = value;
  m_UpPathChgEventIsSet = true;
}
bool TrafficControlData::upPathChgEventIsSet() const {
  return m_UpPathChgEventIsSet;
}
void TrafficControlData::unsetUpPathChgEvent() {
  m_UpPathChgEventIsSet = false;
}
oai::model::pcf::SteeringFunctionality TrafficControlData::getSteerFun() const {
  return m_SteerFun;
}
void TrafficControlData::setSteerFun(
    oai::model::pcf::SteeringFunctionality const& value) {
  m_SteerFun      = value;
  m_SteerFunIsSet = true;
}
bool TrafficControlData::steerFunIsSet() const {
  return m_SteerFunIsSet;
}
void TrafficControlData::unsetSteerFun() {
  m_SteerFunIsSet = false;
}
oai::model::pcf::SteeringMode TrafficControlData::getSteerModeDl() const {
  return m_SteerModeDl;
}
void TrafficControlData::setSteerModeDl(
    oai::model::pcf::SteeringMode const& value) {
  m_SteerModeDl      = value;
  m_SteerModeDlIsSet = true;
}
bool TrafficControlData::steerModeDlIsSet() const {
  return m_SteerModeDlIsSet;
}
void TrafficControlData::unsetSteerModeDl() {
  m_SteerModeDlIsSet = false;
}
oai::model::pcf::SteeringMode TrafficControlData::getSteerModeUl() const {
  return m_SteerModeUl;
}
void TrafficControlData::setSteerModeUl(
    oai::model::pcf::SteeringMode const& value) {
  m_SteerModeUl      = value;
  m_SteerModeUlIsSet = true;
}
bool TrafficControlData::steerModeUlIsSet() const {
  return m_SteerModeUlIsSet;
}
void TrafficControlData::unsetSteerModeUl() {
  m_SteerModeUlIsSet = false;
}
oai::model::pcf::MulticastAccessControl TrafficControlData::getMulAccCtrl()
    const {
  return m_MulAccCtrl;
}
void TrafficControlData::setMulAccCtrl(
    oai::model::pcf::MulticastAccessControl const& value) {
  m_MulAccCtrl      = value;
  m_MulAccCtrlIsSet = true;
}
bool TrafficControlData::mulAccCtrlIsSet() const {
  return m_MulAccCtrlIsSet;
}
void TrafficControlData::unsetMulAccCtrl() {
  m_MulAccCtrlIsSet = false;
}

}  // namespace oai::model::pcf
