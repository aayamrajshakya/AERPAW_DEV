/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IpMulticastAddressInfo.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::pcf {
using namespace oai::model::common;

IpMulticastAddressInfo::IpMulticastAddressInfo() {
  m_SrcIpv4Addr      = "";
  m_SrcIpv4AddrIsSet = false;
  m_Ipv4MulAddr      = "";
  m_Ipv4MulAddrIsSet = false;
  m_SrcIpv6AddrIsSet = false;
  m_Ipv6MulAddrIsSet = false;
}

void IpMulticastAddressInfo::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool IpMulticastAddressInfo::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool IpMulticastAddressInfo::validate(
    std::stringstream& /* msg */, const std::string& /* pathPrefix */) const {
  bool success = true;
  /*
  const std::string _pathPrefix =
      pathPrefix.empty() ? "IpMulticastAddressInfo" : pathPrefix;

  if (srcIpv4AddrIsSet()) {
    const std::string& value           = m_SrcIpv4Addr;
    const std::string currentValuePath = _pathPrefix + ".srcIpv4Addr";
  }

  if (ipv4MulAddrIsSet()) {
    const std::string& value           = m_Ipv4MulAddr;
    const std::string currentValuePath = _pathPrefix + ".ipv4MulAddr";
  }
  */
  return success;
}

bool IpMulticastAddressInfo::operator==(
    const IpMulticastAddressInfo& rhs) const {
  return

      ((!srcIpv4AddrIsSet() && !rhs.srcIpv4AddrIsSet()) ||
       (srcIpv4AddrIsSet() && rhs.srcIpv4AddrIsSet() &&
        getSrcIpv4Addr() == rhs.getSrcIpv4Addr())) &&

      ((!ipv4MulAddrIsSet() && !rhs.ipv4MulAddrIsSet()) ||
       (ipv4MulAddrIsSet() && rhs.ipv4MulAddrIsSet() &&
        getIpv4MulAddr() == rhs.getIpv4MulAddr())) &&

      ((!srcIpv6AddrIsSet() && !rhs.srcIpv6AddrIsSet()) ||
       (srcIpv6AddrIsSet() && rhs.srcIpv6AddrIsSet() &&
        getSrcIpv6Addr() == rhs.getSrcIpv6Addr())) &&

      ((!ipv6MulAddrIsSet() && !rhs.ipv6MulAddrIsSet()) ||
       (ipv6MulAddrIsSet() && rhs.ipv6MulAddrIsSet() &&
        getIpv6MulAddr() == rhs.getIpv6MulAddr()))

          ;
}

bool IpMulticastAddressInfo::operator!=(
    const IpMulticastAddressInfo& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const IpMulticastAddressInfo& o) {
  j = nlohmann::json();
  if (o.srcIpv4AddrIsSet()) j["srcIpv4Addr"] = o.m_SrcIpv4Addr;
  if (o.ipv4MulAddrIsSet()) j["ipv4MulAddr"] = o.m_Ipv4MulAddr;
  if (o.srcIpv6AddrIsSet()) j["srcIpv6Addr"] = o.m_SrcIpv6Addr;
  if (o.ipv6MulAddrIsSet()) j["ipv6MulAddr"] = o.m_Ipv6MulAddr;
}

void from_json(const nlohmann::json& j, IpMulticastAddressInfo& o) {
  if (j.find("srcIpv4Addr") != j.end()) {
    j.at("srcIpv4Addr").get_to(o.m_SrcIpv4Addr);
    o.m_SrcIpv4AddrIsSet = true;
  }
  if (j.find("ipv4MulAddr") != j.end()) {
    j.at("ipv4MulAddr").get_to(o.m_Ipv4MulAddr);
    o.m_Ipv4MulAddrIsSet = true;
  }
  if (j.find("srcIpv6Addr") != j.end()) {
    j.at("srcIpv6Addr").get_to(o.m_SrcIpv6Addr);
    o.m_SrcIpv6AddrIsSet = true;
  }
  if (j.find("ipv6MulAddr") != j.end()) {
    j.at("ipv6MulAddr").get_to(o.m_Ipv6MulAddr);
    o.m_Ipv6MulAddrIsSet = true;
  }
}

std::string IpMulticastAddressInfo::getSrcIpv4Addr() const {
  return m_SrcIpv4Addr;
}
void IpMulticastAddressInfo::setSrcIpv4Addr(std::string const& value) {
  m_SrcIpv4Addr      = value;
  m_SrcIpv4AddrIsSet = true;
}
bool IpMulticastAddressInfo::srcIpv4AddrIsSet() const {
  return m_SrcIpv4AddrIsSet;
}
void IpMulticastAddressInfo::unsetSrcIpv4Addr() {
  m_SrcIpv4AddrIsSet = false;
}
std::string IpMulticastAddressInfo::getIpv4MulAddr() const {
  return m_Ipv4MulAddr;
}
void IpMulticastAddressInfo::setIpv4MulAddr(std::string const& value) {
  m_Ipv4MulAddr      = value;
  m_Ipv4MulAddrIsSet = true;
}
bool IpMulticastAddressInfo::ipv4MulAddrIsSet() const {
  return m_Ipv4MulAddrIsSet;
}
void IpMulticastAddressInfo::unsetIpv4MulAddr() {
  m_Ipv4MulAddrIsSet = false;
}
Ipv6Addr IpMulticastAddressInfo::getSrcIpv6Addr() const {
  return m_SrcIpv6Addr;
}
void IpMulticastAddressInfo::setSrcIpv6Addr(Ipv6Addr const& value) {
  m_SrcIpv6Addr      = value;
  m_SrcIpv6AddrIsSet = true;
}
bool IpMulticastAddressInfo::srcIpv6AddrIsSet() const {
  return m_SrcIpv6AddrIsSet;
}
void IpMulticastAddressInfo::unsetSrcIpv6Addr() {
  m_SrcIpv6AddrIsSet = false;
}
Ipv6Addr IpMulticastAddressInfo::getIpv6MulAddr() const {
  return m_Ipv6MulAddr;
}
void IpMulticastAddressInfo::setIpv6MulAddr(Ipv6Addr const& value) {
  m_Ipv6MulAddr      = value;
  m_Ipv6MulAddrIsSet = true;
}
bool IpMulticastAddressInfo::ipv6MulAddrIsSet() const {
  return m_Ipv6MulAddrIsSet;
}
void IpMulticastAddressInfo::unsetIpv6MulAddr() {
  m_Ipv6MulAddrIsSet = false;
}

}  // namespace oai::model::pcf
