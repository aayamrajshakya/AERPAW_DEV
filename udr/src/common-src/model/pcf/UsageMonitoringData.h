/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UsageMonitoringData.h
 *
 *
 */

#ifndef UsageMonitoringData_H_
#define UsageMonitoringData_H_

#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace oai::model::pcf {

/// <summary>
///
/// </summary>
class UsageMonitoringData {
 public:
  UsageMonitoringData();
  virtual ~UsageMonitoringData() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const UsageMonitoringData& rhs) const;
  bool operator!=(const UsageMonitoringData& rhs) const;

  /////////////////////////////////////////////
  /// UsageMonitoringData members

  /// <summary>
  /// Univocally identifies the usage monitoring policy data within a PDU
  /// session.
  /// </summary>
  std::string getUmId() const;
  void setUmId(std::string const& value);
  /// <summary>
  /// Unsigned integer identifying a volume in units of bytes with
  /// \&quot;nullable&#x3D;true\&quot; property.
  /// </summary>
  int64_t getVolumeThreshold() const;
  void setVolumeThreshold(int64_t const value);
  bool volumeThresholdIsSet() const;
  void unsetVolumeThreshold();
  /// <summary>
  /// Unsigned integer identifying a volume in units of bytes with
  /// \&quot;nullable&#x3D;true\&quot; property.
  /// </summary>
  int64_t getVolumeThresholdUplink() const;
  void setVolumeThresholdUplink(int64_t const value);
  bool volumeThresholdUplinkIsSet() const;
  void unsetVolumeThresholdUplink();
  /// <summary>
  /// Unsigned integer identifying a volume in units of bytes with
  /// \&quot;nullable&#x3D;true\&quot; property.
  /// </summary>
  int64_t getVolumeThresholdDownlink() const;
  void setVolumeThresholdDownlink(int64_t const value);
  bool volumeThresholdDownlinkIsSet() const;
  void unsetVolumeThresholdDownlink();
  /// <summary>
  ///
  /// </summary>
  int32_t getTimeThreshold() const;
  void setTimeThreshold(int32_t const value);
  bool timeThresholdIsSet() const;
  void unsetTimeThreshold();
  /// <summary>
  ///
  /// </summary>
  std::string getMonitoringTime() const;
  void setMonitoringTime(std::string const& value);
  bool monitoringTimeIsSet() const;
  void unsetMonitoringTime();
  /// <summary>
  /// Unsigned integer identifying a volume in units of bytes with
  /// \&quot;nullable&#x3D;true\&quot; property.
  /// </summary>
  int64_t getNextVolThreshold() const;
  void setNextVolThreshold(int64_t const value);
  bool nextVolThresholdIsSet() const;
  void unsetNextVolThreshold();
  /// <summary>
  /// Unsigned integer identifying a volume in units of bytes with
  /// \&quot;nullable&#x3D;true\&quot; property.
  /// </summary>
  int64_t getNextVolThresholdUplink() const;
  void setNextVolThresholdUplink(int64_t const value);
  bool nextVolThresholdUplinkIsSet() const;
  void unsetNextVolThresholdUplink();
  /// <summary>
  /// Unsigned integer identifying a volume in units of bytes with
  /// \&quot;nullable&#x3D;true\&quot; property.
  /// </summary>
  int64_t getNextVolThresholdDownlink() const;
  void setNextVolThresholdDownlink(int64_t const value);
  bool nextVolThresholdDownlinkIsSet() const;
  void unsetNextVolThresholdDownlink();
  /// <summary>
  ///
  /// </summary>
  int32_t getNextTimeThreshold() const;
  void setNextTimeThreshold(int32_t const value);
  bool nextTimeThresholdIsSet() const;
  void unsetNextTimeThreshold();
  /// <summary>
  ///
  /// </summary>
  int32_t getInactivityTime() const;
  void setInactivityTime(int32_t const value);
  bool inactivityTimeIsSet() const;
  void unsetInactivityTime();
  /// <summary>
  /// Contains the PCC rule identifier(s) which corresponding service data
  /// flow(s) shall be excluded from PDU Session usage monitoring. It is only
  /// included in the UsageMonitoringData instance for session level usage
  /// monitoring.
  /// </summary>
  std::vector<std::string> getExUsagePccRuleIds() const;
  void setExUsagePccRuleIds(std::vector<std::string> const& value);
  bool exUsagePccRuleIdsIsSet() const;
  void unsetExUsagePccRuleIds();

  friend void to_json(nlohmann::json& j, const UsageMonitoringData& o);
  friend void from_json(const nlohmann::json& j, UsageMonitoringData& o);

 protected:
  std::string m_UmId;

  int64_t m_VolumeThreshold;
  bool m_VolumeThresholdIsSet;
  int64_t m_VolumeThresholdUplink;
  bool m_VolumeThresholdUplinkIsSet;
  int64_t m_VolumeThresholdDownlink;
  bool m_VolumeThresholdDownlinkIsSet;
  int32_t m_TimeThreshold;
  bool m_TimeThresholdIsSet;
  std::string m_MonitoringTime;
  bool m_MonitoringTimeIsSet;
  int64_t m_NextVolThreshold;
  bool m_NextVolThresholdIsSet;
  int64_t m_NextVolThresholdUplink;
  bool m_NextVolThresholdUplinkIsSet;
  int64_t m_NextVolThresholdDownlink;
  bool m_NextVolThresholdDownlinkIsSet;
  int32_t m_NextTimeThreshold;
  bool m_NextTimeThresholdIsSet;
  int32_t m_InactivityTime;
  bool m_InactivityTimeIsSet;
  std::vector<std::string> m_ExUsagePccRuleIds;
  bool m_ExUsagePccRuleIdsIsSet;
};

}  // namespace oai::model::pcf

#endif /* UsageMonitoringData_H_ */
