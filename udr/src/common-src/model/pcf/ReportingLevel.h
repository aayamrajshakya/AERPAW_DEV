/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ReportingLevel.h
 *
 * Possible values are - SER_ID_LEVEL: Indicates that the usage shall be
 * reported on service id and rating group combination level. - RAT_GR_LEVEL:
 * Indicates that the usage shall be reported on rating group level. -
 * SPON_CON_LEVEL: Indicates that the usage shall be reported on sponsor
 * identity and rating group combination level.
 */

#ifndef ReportingLevel_H_
#define ReportingLevel_H_

#include "NullValue.h"
#include "ReportingLevel_anyOf.h"
#include <nlohmann/json.hpp>

namespace oai::model::pcf {

/// <summary>
/// Possible values are - SER_ID_LEVEL: Indicates that the usage shall be
/// reported on service id and rating group combination level. - RAT_GR_LEVEL:
/// Indicates that the usage shall be reported on rating group level. -
/// SPON_CON_LEVEL: Indicates that the usage shall be reported on sponsor
/// identity and rating group combination level.
/// </summary>
class ReportingLevel {
 public:
  ReportingLevel();
  virtual ~ReportingLevel() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const ReportingLevel& rhs) const;
  bool operator!=(const ReportingLevel& rhs) const;

  /////////////////////////////////////////////
  /// ReportingLevel members

  ReportingLevel_anyOf getValue() const;
  void setValue(ReportingLevel_anyOf value);
  ReportingLevel_anyOf::eReportingLevel_anyOf getEnumValue() const;
  void setEnumValue(ReportingLevel_anyOf::eReportingLevel_anyOf value);

  friend void to_json(nlohmann::json& j, const ReportingLevel& o);
  friend void from_json(const nlohmann::json& j, ReportingLevel& o);

 protected:
  ReportingLevel_anyOf m_value;
};

}  // namespace oai::model::pcf

#endif /* ReportingLevel_H_ */
