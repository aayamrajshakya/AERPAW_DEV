/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * RuleReport.h
 *
 *
 */

#ifndef RuleReport_H_
#define RuleReport_H_

#include "RuleStatus.h"
#include <string>
#include "FailureCode.h"
#include "FinalUnitAction.h"
#include <vector>
#include "RanNasRelCause.h"
#include <nlohmann/json.hpp>

namespace oai::model::pcf {

/// <summary>
///
/// </summary>
class RuleReport {
 public:
  RuleReport();
  virtual ~RuleReport() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const RuleReport& rhs) const;
  bool operator!=(const RuleReport& rhs) const;

  /////////////////////////////////////////////
  /// RuleReport members

  /// <summary>
  /// Contains the identifier of the affected PCC rule(s).
  /// </summary>
  std::vector<std::string> getPccRuleIds() const;
  void setPccRuleIds(std::vector<std::string> const& value);
  /// <summary>
  ///
  /// </summary>
  oai::model::pcf::RuleStatus getRuleStatus() const;
  void setRuleStatus(oai::model::pcf::RuleStatus const& value);
  /// <summary>
  /// Indicates the version of a PCC rule.
  /// </summary>
  std::vector<int32_t> getContVers() const;
  void setContVers(std::vector<int32_t> const value);
  bool contVersIsSet() const;
  void unsetContVers();
  /// <summary>
  ///
  /// </summary>
  oai::model::pcf::FailureCode getFailureCode() const;
  void setFailureCode(oai::model::pcf::FailureCode const& value);
  bool failureCodeIsSet() const;
  void unsetFailureCode();
  /// <summary>
  ///
  /// </summary>
  oai::model::pcf::FinalUnitAction getFinUnitAct() const;
  void setFinUnitAct(oai::model::pcf::FinalUnitAction const& value);
  bool finUnitActIsSet() const;
  void unsetFinUnitAct();
  /// <summary>
  /// indicates the RAN or NAS release cause code information.
  /// </summary>
  std::vector<oai::model::pcf::RanNasRelCause> getRanNasRelCauses() const;
  void setRanNasRelCauses(
      std::vector<oai::model::pcf::RanNasRelCause> const& value);
  bool ranNasRelCausesIsSet() const;
  void unsetRanNasRelCauses();

  friend void to_json(nlohmann::json& j, const RuleReport& o);
  friend void from_json(const nlohmann::json& j, RuleReport& o);

 protected:
  std::vector<std::string> m_PccRuleIds;

  oai::model::pcf::RuleStatus m_RuleStatus;

  std::vector<int32_t> m_ContVers;
  bool m_ContVersIsSet;
  oai::model::pcf::FailureCode m_FailureCode;
  bool m_FailureCodeIsSet;
  oai::model::pcf::FinalUnitAction m_FinUnitAct;
  bool m_FinUnitActIsSet;
  std::vector<oai::model::pcf::RanNasRelCause> m_RanNasRelCauses;
  bool m_RanNasRelCausesIsSet;
};

}  // namespace oai::model::pcf

#endif /* RuleReport_H_ */
