/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SteeringMode.h
 *
 *
 */

#ifndef SteeringMode_H_
#define SteeringMode_H_

#include "AccessTypeRm.h"
#include "SteerModeValue.h"
#include "AccessType.h"
#include <nlohmann/json.hpp>

namespace oai::model::pcf {

/// <summary>
///
/// </summary>
class SteeringMode {
 public:
  SteeringMode();
  virtual ~SteeringMode() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const SteeringMode& rhs) const;
  bool operator!=(const SteeringMode& rhs) const;

  /////////////////////////////////////////////
  /// SteeringMode members

  /// <summary>
  ///
  /// </summary>
  oai::model::pcf::SteerModeValue getSteerModeValue() const;
  void setSteerModeValue(oai::model::pcf::SteerModeValue const& value);
  /// <summary>
  ///
  /// </summary>
  oai::model::common::AccessType getActive() const;
  void setActive(oai::model::common::AccessType const& value);
  bool activeIsSet() const;
  void unsetActive();
  /// <summary>
  ///
  /// </summary>
  oai::model::common::AccessTypeRm getStandby() const;
  void setStandby(oai::model::common::AccessTypeRm const& value);
  bool standbyIsSet() const;
  void unsetStandby();
  /// <summary>
  ///
  /// </summary>
  int32_t getR3gLoad() const;
  void setR3gLoad(int32_t const value);
  bool r3gLoadIsSet() const;
  void unsetr_3gLoad();
  /// <summary>
  ///
  /// </summary>
  oai::model::common::AccessType getPrioAcc() const;
  void setPrioAcc(oai::model::common::AccessType const& value);
  bool prioAccIsSet() const;
  void unsetPrioAcc();

  friend void to_json(nlohmann::json& j, const SteeringMode& o);
  friend void from_json(const nlohmann::json& j, SteeringMode& o);

 protected:
  oai::model::pcf::SteerModeValue m_SteerModeValue;

  oai::model::common::AccessType m_Active;
  bool m_ActiveIsSet;
  oai::model::common::AccessTypeRm m_Standby;
  bool m_StandbyIsSet;
  int32_t m_r_3gLoad;
  bool m_r_3gLoadIsSet;
  oai::model::common::AccessType m_PrioAcc;
  bool m_PrioAccIsSet;
};

}  // namespace oai::model::pcf

#endif /* SteeringMode_H_ */
