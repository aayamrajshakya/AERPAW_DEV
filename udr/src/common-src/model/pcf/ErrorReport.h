/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ErrorReport.h
 *
 *
 */

#ifndef ErrorReport_H_
#define ErrorReport_H_

#include "PolicyDecisionFailureCode.h"
#include "RuleReport.h"
#include "SessionRuleReport.h"
#include <string>
#include <vector>
#include "ProblemDetails.h"
#include <nlohmann/json.hpp>

namespace oai::model::pcf {

/// <summary>
///
/// </summary>
class ErrorReport {
 public:
  ErrorReport();
  virtual ~ErrorReport() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const ErrorReport& rhs) const;
  bool operator!=(const ErrorReport& rhs) const;

  /////////////////////////////////////////////
  /// ErrorReport members

  /// <summary>
  ///
  /// </summary>
  oai::model::common::ProblemDetails getError() const;
  void setError(oai::model::common::ProblemDetails const& value);
  bool errorIsSet() const;
  void unsetError();
  /// <summary>
  /// Used to report the PCC rule failure.
  /// </summary>
  std::vector<oai::model::pcf::RuleReport> getRuleReports() const;
  void setRuleReports(std::vector<oai::model::pcf::RuleReport> const& value);
  bool ruleReportsIsSet() const;
  void unsetRuleReports();
  /// <summary>
  /// Used to report the session rule failure.
  /// </summary>
  std::vector<oai::model::pcf::SessionRuleReport> getSessRuleReports() const;
  void setSessRuleReports(
      std::vector<oai::model::pcf::SessionRuleReport> const& value);
  bool sessRuleReportsIsSet() const;
  void unsetSessRuleReports();
  /// <summary>
  /// Used to report failure of the policy decision and/or condition data.
  /// </summary>
  std::vector<oai::model::pcf::PolicyDecisionFailureCode>
  getPolDecFailureReports() const;
  void setPolDecFailureReports(
      std::vector<oai::model::pcf::PolicyDecisionFailureCode> const& value);
  bool polDecFailureReportsIsSet() const;
  void unsetPolDecFailureReports();
  /// <summary>
  ///
  /// </summary>
  std::string getAltQosParamId() const;
  void setAltQosParamId(std::string const& value);
  bool altQosParamIdIsSet() const;
  void unsetAltQosParamId();

  friend void to_json(nlohmann::json& j, const ErrorReport& o);
  friend void from_json(const nlohmann::json& j, ErrorReport& o);

 protected:
  oai::model::common::ProblemDetails m_Error;
  bool m_ErrorIsSet;
  std::vector<oai::model::pcf::RuleReport> m_RuleReports;
  bool m_RuleReportsIsSet;
  std::vector<oai::model::pcf::SessionRuleReport> m_SessRuleReports;
  bool m_SessRuleReportsIsSet;
  std::vector<oai::model::pcf::PolicyDecisionFailureCode>
      m_PolDecFailureReports;
  bool m_PolDecFailureReportsIsSet;
  std::string m_AltQosParamId;
  bool m_AltQosParamIdIsSet;
};

}  // namespace oai::model::pcf

#endif /* ErrorReport_H_ */
