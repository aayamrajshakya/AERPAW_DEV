/**
 * Nudsf_DataRepository
 * Nudsf Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "RecordSearchResult.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::udsf {

RecordSearchResult::RecordSearchResult() {
  m_Count                  = 0;
  m_ReferencesIsSet        = false;
  m_SupportedFeatures      = "";
  m_SupportedFeaturesIsSet = false;
  m_MatchingRecordsIsSet   = false;
}

void RecordSearchResult::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool RecordSearchResult::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool RecordSearchResult::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "RecordSearchResult" : pathPrefix;

  /* Count */ {
    const int32_t& value               = m_Count;
    const std::string currentValuePath = _pathPrefix + ".count";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  if (referencesIsSet()) {
    const std::vector<std::string>& value = m_References;
    const std::string currentValuePath    = _pathPrefix + ".references";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const std::string& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        i++;
      }
    }
  }

  if (supportedFeaturesIsSet()) {
    const std::string& value           = m_SupportedFeatures;
    const std::string currentValuePath = _pathPrefix + ".supportedFeatures";
  }

  if (matchingRecordsIsSet()) {
    const std::map<std::string, oai::model::udsf::Record>& value =
        m_MatchingRecords;
    const std::string currentValuePath = _pathPrefix + ".matchingRecords";
  }

  return success;
}

bool RecordSearchResult::operator==(const RecordSearchResult& rhs) const {
  return

      (getCount() == rhs.getCount()) &&

      ((!referencesIsSet() && !rhs.referencesIsSet()) ||
       (referencesIsSet() && rhs.referencesIsSet() &&
        getReferences() == rhs.getReferences())) &&

      ((!supportedFeaturesIsSet() && !rhs.supportedFeaturesIsSet()) ||
       (supportedFeaturesIsSet() && rhs.supportedFeaturesIsSet() &&
        getSupportedFeatures() == rhs.getSupportedFeatures())) &&

      ((!matchingRecordsIsSet() && !rhs.matchingRecordsIsSet()) ||
       (matchingRecordsIsSet() && rhs.matchingRecordsIsSet() &&
        getMatchingRecords() == rhs.getMatchingRecords()))

          ;
}

bool RecordSearchResult::operator!=(const RecordSearchResult& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RecordSearchResult& o) {
  j          = nlohmann::json();
  j["count"] = o.m_Count;
  if (o.referencesIsSet() || !o.m_References.empty())
    j["references"] = o.m_References;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.matchingRecordsIsSet() || !o.m_MatchingRecords.empty())
    j["matchingRecords"] = o.m_MatchingRecords;
}

void from_json(const nlohmann::json& j, RecordSearchResult& o) {
  j.at("count").get_to(o.m_Count);
  if (j.find("references") != j.end()) {
    j.at("references").get_to(o.m_References);
    o.m_ReferencesIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("matchingRecords") != j.end()) {
    j.at("matchingRecords").get_to(o.m_MatchingRecords);
    o.m_MatchingRecordsIsSet = true;
  }
}

int32_t RecordSearchResult::getCount() const {
  return m_Count;
}
void RecordSearchResult::setCount(int32_t const value) {
  m_Count = value;
}
std::vector<std::string> RecordSearchResult::getReferences() const {
  return m_References;
}
void RecordSearchResult::setReferences(std::vector<std::string> const& value) {
  m_References      = value;
  m_ReferencesIsSet = true;
}
bool RecordSearchResult::referencesIsSet() const {
  return m_ReferencesIsSet;
}
void RecordSearchResult::unsetReferences() {
  m_ReferencesIsSet = false;
}
std::string RecordSearchResult::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void RecordSearchResult::setSupportedFeatures(std::string const& value) {
  m_SupportedFeatures      = value;
  m_SupportedFeaturesIsSet = true;
}
bool RecordSearchResult::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void RecordSearchResult::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
std::map<std::string, oai::model::udsf::Record>
RecordSearchResult::getMatchingRecords() const {
  return m_MatchingRecords;
}
void RecordSearchResult::setMatchingRecords(
    std::map<std::string, oai::model::udsf::Record> const& value) {
  m_MatchingRecords      = value;
  m_MatchingRecordsIsSet = true;
}
bool RecordSearchResult::matchingRecordsIsSet() const {
  return m_MatchingRecordsIsSet;
}
void RecordSearchResult::unsetMatchingRecords() {
  m_MatchingRecordsIsSet = false;
}

}  // namespace oai::model::udsf
