#ifndef __FAR_EBPF_XDP_PRGRM_USER_H__
#define __FAR_EBPF_XDP_PRGRM_USER_H__

#include <ProgramLifeCycle.hpp>
#include <atomic>
#include <linux/bpf.h>  // manage maps (e.g. bpf_update*)
#include <memory>
#include <mutex>
#include <signal.h>  // signals
#include <far_ebpf_xdp_prgrm_kernel_skel.h>
#include <wrappers/BPFMap.hpp>
#include <BPFProgram.h>
#include "interfaces.h"

#include "interfaces.h"

class BPFMaps;
class BPFMap;
class SessionManager;
class RulesUtilities;

using FARProgramLifeCycle = ProgramLifeCycle<far_ebpf_xdp_prgrm_kernel_c>;

/**
 * @brief Singleton class to abrastract the UPF bpf program.
 */
class FARProgram : public BPFProgram {
 public:
  /**
   * @brief Construct a new FARProgram object.
   *
   */
  explicit FARProgram();

  /*****************************************************************************************************************/
  /**
   * @brief Destroy the FARProgram object
   */
  virtual ~FARProgram();

  /*****************************************************************************************************************/
  /**
   * @brief Insert one UPF reference point interface into a map.
   *
   */

  void create_upf_interface_map_entry(e_reference_point s);
  /*****************************************************************************************************************/

  /**
   * @brief Setup the BPF program.
   *
   */
  void setup();

  /*****************************************************************************************************************/
  /**
   * @brief Get the BPFMaps object.
   *
   * @return std::shared_ptr<BPFMaps> The reference of the BPFMaps.
   */
  std::shared_ptr<BPFMaps> getMaps();

  /*****************************************************************************************************************/
  /**
   * @brief Tear downs the BPF program.
   *
   */
  void tearDown();
  /*****************************************************************************************************************/

  /**
   * @brief Update program int map.
   *
   * @param key The key which will be inserted the program file descriptor.
   * @param fd The file descriptor.
   */
  void updateProgramMap(uint32_t key, uint32_t fd);

  /*****************************************************************************************************************/
  /**
   * @brief Remove program in map.
   *
   * @param key The key which will be remove in the program map.
   */
  void removeProgramMap(uint32_t key);

  /*****************************************************************************************************************/
  /**
   * @brief Get the TEID to session Map object.
   *
   * @return std::shared_ptr<BPFMap> The TEID to fd map.
   */
  std::shared_ptr<BPFMap> getFARMap() const;

  /*****************************************************************************************************************/
  /**
   * @brief Get the Egress Interface Map object.
   *
   * @return std::shared_ptr<BPFMap> The egress interface map.
   */
  std::shared_ptr<BPFMap> getEgressInterfaceMap() const;

  /*****************************************************************************************************************/
  /**
   * @brief Get the Arp Table Map object.
   *
   * @return std::shared_ptr<BPFMap>  The arp table map.
   */
  std::shared_ptr<BPFMap> getArpTableMap() const;

  /*****************************************************************************************************************/
  /**
   * @brief Get the iface Map object.
   *
   * @return std::shared_ptr<BPFMap> The iface_name.
   */
  std::shared_ptr<BPFMap> getIfaceMap() const;

  /*****************************************************************************************************************/
  /**
   * @brief Get the File Descriptor.
   *
   * @return int The File Descriptor Value.
   */
  int getFd() const;

  /*****************************************************************************************************************/
 private:
  /**
   * @brief Initialize BPF wrappers maps.
   *
   */
  void initializeMaps();

  /*****************************************************************************************************************/
  // The reference of the bpf maps.
  std::shared_ptr<BPFMaps> mpMaps;

  /*****************************************************************************************************************/
  // The skeleton of the UPF program generated by bpftool.
  // ProgramLifeCycle is the owner of the pointer.
  far_ebpf_xdp_prgrm_kernel_c* spSkeleton;

  /*****************************************************************************************************************/
  // The program eBPF map.
  std::shared_ptr<BPFMap> mpFARMap;

  /*****************************************************************************************************************/
  // The egress interface map.
  std::shared_ptr<BPFMap> mpEgressInterfaceMap;

  /*****************************************************************************************************************/
  // The arp table map.
  std::shared_ptr<BPFMap> mpArpTableMap;

  /*****************************************************************************************************************/
  // The BPF lifecycle program.
  std::shared_ptr<FARProgramLifeCycle> mpLifeCycle;

  /*****************************************************************************************************************/
  // The iface map.
  std::shared_ptr<BPFMap> mpUPFIfaceMap;
  /*****************************************************************************************************************/
};

#endif  // __FAR_EBPF_XDP_PRGRM_USER_H__
