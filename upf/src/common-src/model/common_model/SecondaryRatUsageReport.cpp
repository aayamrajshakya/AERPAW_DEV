/**
 * Common Data Types
 * Common Data Types for Service Based Interfaces. Â© 2022, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SecondaryRatUsageReport.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::common {

SecondaryRatUsageReport::SecondaryRatUsageReport() {}

void SecondaryRatUsageReport::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool SecondaryRatUsageReport::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool SecondaryRatUsageReport::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "SecondaryRatUsageReport" : pathPrefix;

  /* QosFlowsUsageData */ {
    const std::vector<oai::model::common::QosFlowUsageReport>& value =
        m_QosFlowsUsageData;
    const std::string currentValuePath = _pathPrefix + ".qosFlowsUsageData";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const oai::model::common::QosFlowUsageReport& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".qosFlowsUsageData") &&
            success;

        i++;
      }
    }
  }

  return success;
}

bool SecondaryRatUsageReport::operator==(
    const SecondaryRatUsageReport& rhs) const {
  return

      (getSecondaryRatType() == rhs.getSecondaryRatType()) &&

      (getQosFlowsUsageData() == rhs.getQosFlowsUsageData())

          ;
}

bool SecondaryRatUsageReport::operator!=(
    const SecondaryRatUsageReport& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SecondaryRatUsageReport& o) {
  j                      = nlohmann::json();
  j["secondaryRatType"]  = o.m_SecondaryRatType;
  j["qosFlowsUsageData"] = o.m_QosFlowsUsageData;
}

void from_json(const nlohmann::json& j, SecondaryRatUsageReport& o) {
  j.at("secondaryRatType").get_to(o.m_SecondaryRatType);
  j.at("qosFlowsUsageData").get_to(o.m_QosFlowsUsageData);
}

oai::model::common::RatType SecondaryRatUsageReport::getSecondaryRatType()
    const {
  return m_SecondaryRatType;
}
void SecondaryRatUsageReport::setSecondaryRatType(
    oai::model::common::RatType const& value) {
  m_SecondaryRatType = value;
}
std::vector<oai::model::common::QosFlowUsageReport>
SecondaryRatUsageReport::getQosFlowsUsageData() const {
  return m_QosFlowsUsageData;
}
void SecondaryRatUsageReport::setQosFlowsUsageData(
    std::vector<oai::model::common::QosFlowUsageReport> const& value) {
  m_QosFlowsUsageData = value;
}

}  // namespace oai::model::common
