/**
 * NRF NFDiscovery Service
 * NRF NFDiscovery Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.8
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SmfInfo.h"
#include "Helpers.h"
#include "config.hpp"

#include <sstream>

namespace oai::model::nrf {

SmfInfo::SmfInfo() {
  m_TaiListIsSet        = false;
  m_TaiRangeListIsSet   = false;
  m_PgwFqdn             = "";
  m_PgwFqdnIsSet        = false;
  m_AccessTypeIsSet     = false;
  m_Priority            = 0;
  m_PriorityIsSet       = false;
  m_VsmfSupportInd      = false;
  m_VsmfSupportIndIsSet = false;
}

void SmfInfo::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool SmfInfo::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool SmfInfo::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success                  = true;
  const std::string _pathPrefix = pathPrefix.empty() ? "SmfInfo" : pathPrefix;

  /* SNssaiSmfInfoList */ {
    const std::vector<oai::model::nrf::SnssaiSmfInfoItem>& value =
        m_SNssaiSmfInfoList;
    const std::string currentValuePath = _pathPrefix + ".sNssaiSmfInfoList";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const oai::model::nrf::SnssaiSmfInfoItem& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".sNssaiSmfInfoList") &&
            success;

        i++;
      }
    }
  }

  if (taiListIsSet()) {
    const std::vector<oai::model::common::Tai>& value = m_TaiList;
    const std::string currentValuePath = _pathPrefix + ".taiList";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const oai::model::common::Tai& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".taiList") && success;

        i++;
      }
    }
  }

  if (taiRangeListIsSet()) {
    const std::vector<oai::model::nrf::TaiRange>& value = m_TaiRangeList;
    const std::string currentValuePath = _pathPrefix + ".taiRangeList";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const oai::model::nrf::TaiRange& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".taiRangeList") && success;

        i++;
      }
    }
  }

  if (accessTypeIsSet()) {
    const std::vector<oai::model::common::AccessType>& value = m_AccessType;
    const std::string currentValuePath = _pathPrefix + ".accessType";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const oai::model::common::AccessType& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath) && success;

        i++;
      }
    }
  }

  if (priorityIsSet()) {
    const int32_t& value               = m_Priority;
    const std::string currentValuePath = _pathPrefix + ".priority";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
    if (value > 65535) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 65535;";
    }
  }

  return success;
}

bool SmfInfo::operator==(const SmfInfo& rhs) const {
  return

      (getSNssaiSmfInfoList() == rhs.getSNssaiSmfInfoList()) &&

      ((!taiListIsSet() && !rhs.taiListIsSet()) ||
       (taiListIsSet() && rhs.taiListIsSet() &&
        getTaiList() == rhs.getTaiList())) &&

      ((!taiRangeListIsSet() && !rhs.taiRangeListIsSet()) ||
       (taiRangeListIsSet() && rhs.taiRangeListIsSet() &&
        getTaiRangeList() == rhs.getTaiRangeList())) &&

      ((!pgwFqdnIsSet() && !rhs.pgwFqdnIsSet()) ||
       (pgwFqdnIsSet() && rhs.pgwFqdnIsSet() &&
        getPgwFqdn() == rhs.getPgwFqdn())) &&

      ((!accessTypeIsSet() && !rhs.accessTypeIsSet()) ||
       (accessTypeIsSet() && rhs.accessTypeIsSet() &&
        getAccessType() == rhs.getAccessType())) &&

      ((!priorityIsSet() && !rhs.priorityIsSet()) ||
       (priorityIsSet() && rhs.priorityIsSet() &&
        getPriority() == rhs.getPriority())) &&

      ((!vsmfSupportIndIsSet() && !rhs.vsmfSupportIndIsSet()) ||
       (vsmfSupportIndIsSet() && rhs.vsmfSupportIndIsSet() &&
        isVsmfSupportInd() == rhs.isVsmfSupportInd()))

          ;
}

bool SmfInfo::operator!=(const SmfInfo& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SmfInfo& o) {
  j                      = nlohmann::json::object();
  j["sNssaiSmfInfoList"] = o.m_SNssaiSmfInfoList;
  if (o.taiListIsSet() || !o.m_TaiList.empty()) j["taiList"] = o.m_TaiList;
  if (o.taiRangeListIsSet() || !o.m_TaiRangeList.empty())
    j["taiRangeList"] = o.m_TaiRangeList;
  if (o.pgwFqdnIsSet()) j["pgwFqdn"] = o.m_PgwFqdn;
  if (o.accessTypeIsSet() || !o.m_AccessType.empty())
    j["accessType"] = o.m_AccessType;
  if (o.priorityIsSet()) j["priority"] = o.m_Priority;
  if (o.vsmfSupportIndIsSet()) j["vsmfSupportInd"] = o.m_VsmfSupportInd;
}

void from_json(const nlohmann::json& j, SmfInfo& o) {
  j.at("sNssaiSmfInfoList").get_to(o.m_SNssaiSmfInfoList);
  if (j.find("taiList") != j.end()) {
    j.at("taiList").get_to(o.m_TaiList);
    o.m_TaiListIsSet = true;
  }
  if (j.find("taiRangeList") != j.end()) {
    j.at("taiRangeList").get_to(o.m_TaiRangeList);
    o.m_TaiRangeListIsSet = true;
  }
  if (j.find("pgwFqdn") != j.end()) {
    j.at("pgwFqdn").get_to(o.m_PgwFqdn);
    o.m_PgwFqdnIsSet = true;
  }
  if (j.find("accessType") != j.end()) {
    j.at("accessType").get_to(o.m_AccessType);
    o.m_AccessTypeIsSet = true;
  }
  if (j.find("priority") != j.end()) {
    j.at("priority").get_to(o.m_Priority);
    o.m_PriorityIsSet = true;
  }
  if (j.find("vsmfSupportInd") != j.end()) {
    j.at("vsmfSupportInd").get_to(o.m_VsmfSupportInd);
    o.m_VsmfSupportIndIsSet = true;
  }
}

std::vector<oai::model::nrf::SnssaiSmfInfoItem> SmfInfo::getSNssaiSmfInfoList()
    const {
  return m_SNssaiSmfInfoList;
}
void SmfInfo::setSNssaiSmfInfoList(
    std::vector<oai::model::nrf::SnssaiSmfInfoItem> const& value) {
  m_SNssaiSmfInfoList = value;
}
std::vector<oai::model::common::Tai> SmfInfo::getTaiList() const {
  return m_TaiList;
}
void SmfInfo::setTaiList(std::vector<oai::model::common::Tai> const& value) {
  m_TaiList      = value;
  m_TaiListIsSet = true;
}
bool SmfInfo::taiListIsSet() const {
  return m_TaiListIsSet;
}
void SmfInfo::unsetTaiList() {
  m_TaiListIsSet = false;
}
std::vector<oai::model::nrf::TaiRange> SmfInfo::getTaiRangeList() const {
  return m_TaiRangeList;
}
void SmfInfo::setTaiRangeList(
    std::vector<oai::model::nrf::TaiRange> const& value) {
  m_TaiRangeList      = value;
  m_TaiRangeListIsSet = true;
}
bool SmfInfo::taiRangeListIsSet() const {
  return m_TaiRangeListIsSet;
}
void SmfInfo::unsetTaiRangeList() {
  m_TaiRangeListIsSet = false;
}
std::string SmfInfo::getPgwFqdn() const {
  return m_PgwFqdn;
}
void SmfInfo::setPgwFqdn(std::string const& value) {
  m_PgwFqdn      = value;
  m_PgwFqdnIsSet = true;
}
bool SmfInfo::pgwFqdnIsSet() const {
  return m_PgwFqdnIsSet;
}
void SmfInfo::unsetPgwFqdn() {
  m_PgwFqdnIsSet = false;
}
std::vector<oai::model::common::AccessType> SmfInfo::getAccessType() const {
  return m_AccessType;
}
void SmfInfo::setAccessType(
    std::vector<oai::model::common::AccessType> const& value) {
  m_AccessType      = value;
  m_AccessTypeIsSet = true;
}
bool SmfInfo::accessTypeIsSet() const {
  return m_AccessTypeIsSet;
}
void SmfInfo::unsetAccessType() {
  m_AccessTypeIsSet = false;
}
int32_t SmfInfo::getPriority() const {
  return m_Priority;
}
void SmfInfo::setPriority(int32_t const value) {
  m_Priority      = value;
  m_PriorityIsSet = true;
}
bool SmfInfo::priorityIsSet() const {
  return m_PriorityIsSet;
}
void SmfInfo::unsetPriority() {
  m_PriorityIsSet = false;
}
bool SmfInfo::isVsmfSupportInd() const {
  return m_VsmfSupportInd;
}
void SmfInfo::setVsmfSupportInd(bool const value) {
  m_VsmfSupportInd      = value;
  m_VsmfSupportIndIsSet = true;
}
bool SmfInfo::vsmfSupportIndIsSet() const {
  return m_VsmfSupportIndIsSet;
}
void SmfInfo::unsetVsmfSupportInd() {
  m_VsmfSupportIndIsSet = false;
}

std::string SmfInfo::to_string(int indent_level) const {
  std::string out;
  std::string fmt_title = oai::config::get_title_formatter(indent_level);
  out.append(fmt::format(fmt_title, "smf_info:"));

  if (!m_SNssaiSmfInfoList.empty()) {
    for (const auto& info : m_SNssaiSmfInfoList) {
      out.append(info.to_string(indent_level + 1));
    }
  }
  // TODO other values

  return out;
}

}  // namespace oai::model::nrf
