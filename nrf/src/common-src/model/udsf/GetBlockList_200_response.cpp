/**
 * Nudsf_DataRepository
 * Nudsf Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "GetBlockList_200_response.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::udsf {

GetBlockList_200_response::GetBlockList_200_response() {
  m_BlocksIsSet = false;
}

void GetBlockList_200_response::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool GetBlockList_200_response::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool GetBlockList_200_response::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "GetBlockList_200_response" : pathPrefix;

  if (blocksIsSet()) {
    const std::vector<nlohmann::json>& value = m_Blocks;
    const std::string currentValuePath       = _pathPrefix + ".blocks";

    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const nlohmann::json& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        i++;
      }
    }
  }

  return success;
}

bool GetBlockList_200_response::operator==(
    const GetBlockList_200_response& rhs) const {
  return

      ((!blocksIsSet() && !rhs.blocksIsSet()) ||
       (blocksIsSet() && rhs.blocksIsSet() && getBlocks() == rhs.getBlocks()))

          ;
}

bool GetBlockList_200_response::operator!=(
    const GetBlockList_200_response& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GetBlockList_200_response& o) {
  j = nlohmann::json();
  if (o.blocksIsSet() || !o.m_Blocks.empty()) j["blocks"] = o.m_Blocks;
}

void from_json(const nlohmann::json& j, GetBlockList_200_response& o) {
  if (j.find("blocks") != j.end()) {
    j.at("blocks").get_to(o.m_Blocks);
    o.m_BlocksIsSet = true;
  }
}

std::vector<nlohmann::json> GetBlockList_200_response::getBlocks() const {
  return m_Blocks;
}
void GetBlockList_200_response::setBlocks(
    std::vector<nlohmann::json> const& value) {
  m_Blocks      = value;
  m_BlocksIsSet = true;
}
bool GetBlockList_200_response::blocksIsSet() const {
  return m_BlocksIsSet;
}
void GetBlockList_200_response::unsetBlocks() {
  m_BlocksIsSet = false;
}

}  // namespace oai::model::udsf
