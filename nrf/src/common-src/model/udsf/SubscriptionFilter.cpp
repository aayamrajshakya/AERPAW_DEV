/**
 * Nudsf_DataRepository
 * Nudsf Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SubscriptionFilter.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::udsf {

SubscriptionFilter::SubscriptionFilter() {
  m_MonitoredResourceUrisIsSet = false;
  m_OperationsIsSet            = false;
}

void SubscriptionFilter::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool SubscriptionFilter::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool SubscriptionFilter::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "SubscriptionFilter" : pathPrefix;

  if (monitoredResourceUrisIsSet()) {
    const std::vector<std::string>& value = m_MonitoredResourceUris;
    const std::string currentValuePath = _pathPrefix + ".monitoredResourceUris";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const std::string& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        i++;
      }
    }
  }

  if (operationsIsSet()) {
    const std::vector<oai::model::udsf::RecordOperation>& value = m_Operations;
    const std::string currentValuePath = _pathPrefix + ".operations";

    if (value.size() > 3) {
      success = false;
      msg << currentValuePath << ": must have at most 3 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const oai::model::udsf::RecordOperation& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".operations") && success;

        i++;
      }
    }
  }

  return success;
}

bool SubscriptionFilter::operator==(const SubscriptionFilter& rhs) const {
  return

      ((!monitoredResourceUrisIsSet() && !rhs.monitoredResourceUrisIsSet()) ||
       (monitoredResourceUrisIsSet() && rhs.monitoredResourceUrisIsSet() &&
        getMonitoredResourceUris() == rhs.getMonitoredResourceUris())) &&

      ((!operationsIsSet() && !rhs.operationsIsSet()) ||
       (operationsIsSet() && rhs.operationsIsSet() &&
        getOperations() == rhs.getOperations()))

          ;
}

bool SubscriptionFilter::operator!=(const SubscriptionFilter& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SubscriptionFilter& o) {
  j = nlohmann::json();
  if (o.monitoredResourceUrisIsSet() || !o.m_MonitoredResourceUris.empty())
    j["monitoredResourceUris"] = o.m_MonitoredResourceUris;
  if (o.operationsIsSet() || !o.m_Operations.empty())
    j["operations"] = o.m_Operations;
}

void from_json(const nlohmann::json& j, SubscriptionFilter& o) {
  if (j.find("monitoredResourceUris") != j.end()) {
    j.at("monitoredResourceUris").get_to(o.m_MonitoredResourceUris);
    o.m_MonitoredResourceUrisIsSet = true;
  }
  if (j.find("operations") != j.end()) {
    j.at("operations").get_to(o.m_Operations);
    o.m_OperationsIsSet = true;
  }
}

std::vector<std::string> SubscriptionFilter::getMonitoredResourceUris() const {
  return m_MonitoredResourceUris;
}
void SubscriptionFilter::setMonitoredResourceUris(
    std::vector<std::string> const& value) {
  m_MonitoredResourceUris      = value;
  m_MonitoredResourceUrisIsSet = true;
}
bool SubscriptionFilter::monitoredResourceUrisIsSet() const {
  return m_MonitoredResourceUrisIsSet;
}
void SubscriptionFilter::unsetMonitoredResourceUris() {
  m_MonitoredResourceUrisIsSet = false;
}
std::vector<oai::model::udsf::RecordOperation>
SubscriptionFilter::getOperations() const {
  return m_Operations;
}
void SubscriptionFilter::setOperations(
    std::vector<oai::model::udsf::RecordOperation> const& value) {
  m_Operations      = value;
  m_OperationsIsSet = true;
}
bool SubscriptionFilter::operationsIsSet() const {
  return m_OperationsIsSet;
}
void SubscriptionFilter::unsetOperations() {
  m_OperationsIsSet = false;
}

}  // namespace oai::model::udsf
