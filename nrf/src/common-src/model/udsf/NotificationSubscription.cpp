/**
 * Nudsf_DataRepository
 * Nudsf Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NotificationSubscription.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::udsf {

NotificationSubscription::NotificationSubscription() {
  m_CallbackReference            = "";
  m_ExpiryCallbackReference      = "";
  m_ExpiryCallbackReferenceIsSet = false;
  m_Expiry                       = "";
  m_ExpiryIsSet                  = false;
  m_ExpiryNotification           = 0;
  m_ExpiryNotificationIsSet      = false;
  m_SubFilterIsSet               = false;
  m_SupportedFeatures            = "";
  m_SupportedFeaturesIsSet       = false;
}

void NotificationSubscription::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool NotificationSubscription::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool NotificationSubscription::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "NotificationSubscription" : pathPrefix;

  if (expiryNotificationIsSet()) {
    const int32_t& value               = m_ExpiryNotification;
    const std::string currentValuePath = _pathPrefix + ".expiryNotification";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  if (supportedFeaturesIsSet()) {
    const std::string& value           = m_SupportedFeatures;
    const std::string currentValuePath = _pathPrefix + ".supportedFeatures";
  }

  return success;
}

bool NotificationSubscription::operator==(
    const NotificationSubscription& rhs) const {
  return

      (getClientId() == rhs.getClientId()) &&

      (getCallbackReference() == rhs.getCallbackReference()) &&

      ((!expiryCallbackReferenceIsSet() &&
        !rhs.expiryCallbackReferenceIsSet()) ||
       (expiryCallbackReferenceIsSet() && rhs.expiryCallbackReferenceIsSet() &&
        getExpiryCallbackReference() == rhs.getExpiryCallbackReference())) &&

      ((!expiryIsSet() && !rhs.expiryIsSet()) ||
       (expiryIsSet() && rhs.expiryIsSet() &&
        getExpiry() == rhs.getExpiry())) &&

      ((!expiryNotificationIsSet() && !rhs.expiryNotificationIsSet()) ||
       (expiryNotificationIsSet() && rhs.expiryNotificationIsSet() &&
        getExpiryNotification() == rhs.getExpiryNotification())) &&

      ((!subFilterIsSet() && !rhs.subFilterIsSet()) ||
       (subFilterIsSet() && rhs.subFilterIsSet() &&
        getSubFilter() == rhs.getSubFilter())) &&

      ((!supportedFeaturesIsSet() && !rhs.supportedFeaturesIsSet()) ||
       (supportedFeaturesIsSet() && rhs.supportedFeaturesIsSet() &&
        getSupportedFeatures() == rhs.getSupportedFeatures()))

          ;
}

bool NotificationSubscription::operator!=(
    const NotificationSubscription& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const NotificationSubscription& o) {
  j                      = nlohmann::json();
  j["clientId"]          = o.m_ClientId;
  j["callbackReference"] = o.m_CallbackReference;
  if (o.expiryCallbackReferenceIsSet())
    j["expiryCallbackReference"] = o.m_ExpiryCallbackReference;
  if (o.expiryIsSet()) j["expiry"] = o.m_Expiry;
  if (o.expiryNotificationIsSet())
    j["expiryNotification"] = o.m_ExpiryNotification;
  if (o.subFilterIsSet()) j["subFilter"] = o.m_SubFilter;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
}

void from_json(const nlohmann::json& j, NotificationSubscription& o) {
  j.at("clientId").get_to(o.m_ClientId);
  j.at("callbackReference").get_to(o.m_CallbackReference);
  if (j.find("expiryCallbackReference") != j.end()) {
    j.at("expiryCallbackReference").get_to(o.m_ExpiryCallbackReference);
    o.m_ExpiryCallbackReferenceIsSet = true;
  }
  if (j.find("expiry") != j.end()) {
    j.at("expiry").get_to(o.m_Expiry);
    o.m_ExpiryIsSet = true;
  }
  if (j.find("expiryNotification") != j.end()) {
    j.at("expiryNotification").get_to(o.m_ExpiryNotification);
    o.m_ExpiryNotificationIsSet = true;
  }
  if (j.find("subFilter") != j.end()) {
    j.at("subFilter").get_to(o.m_SubFilter);
    o.m_SubFilterIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
}

oai::model::udsf::ClientId NotificationSubscription::getClientId() const {
  return m_ClientId;
}
void NotificationSubscription::setClientId(
    oai::model::udsf::ClientId const& value) {
  m_ClientId = value;
}
std::string NotificationSubscription::getCallbackReference() const {
  return m_CallbackReference;
}
void NotificationSubscription::setCallbackReference(std::string const& value) {
  m_CallbackReference = value;
}
std::string NotificationSubscription::getExpiryCallbackReference() const {
  return m_ExpiryCallbackReference;
}
void NotificationSubscription::setExpiryCallbackReference(
    std::string const& value) {
  m_ExpiryCallbackReference      = value;
  m_ExpiryCallbackReferenceIsSet = true;
}
bool NotificationSubscription::expiryCallbackReferenceIsSet() const {
  return m_ExpiryCallbackReferenceIsSet;
}
void NotificationSubscription::unsetExpiryCallbackReference() {
  m_ExpiryCallbackReferenceIsSet = false;
}
std::string NotificationSubscription::getExpiry() const {
  return m_Expiry;
}
void NotificationSubscription::setExpiry(std::string const& value) {
  m_Expiry      = value;
  m_ExpiryIsSet = true;
}
bool NotificationSubscription::expiryIsSet() const {
  return m_ExpiryIsSet;
}
void NotificationSubscription::unsetExpiry() {
  m_ExpiryIsSet = false;
}
int32_t NotificationSubscription::getExpiryNotification() const {
  return m_ExpiryNotification;
}
void NotificationSubscription::setExpiryNotification(int32_t const value) {
  m_ExpiryNotification      = value;
  m_ExpiryNotificationIsSet = true;
}
bool NotificationSubscription::expiryNotificationIsSet() const {
  return m_ExpiryNotificationIsSet;
}
void NotificationSubscription::unsetExpiryNotification() {
  m_ExpiryNotificationIsSet = false;
}
oai::model::udsf::SubscriptionFilter NotificationSubscription::getSubFilter()
    const {
  return m_SubFilter;
}
void NotificationSubscription::setSubFilter(
    oai::model::udsf::SubscriptionFilter const& value) {
  m_SubFilter      = value;
  m_SubFilterIsSet = true;
}
bool NotificationSubscription::subFilterIsSet() const {
  return m_SubFilterIsSet;
}
void NotificationSubscription::unsetSubFilter() {
  m_SubFilterIsSet = false;
}
std::string NotificationSubscription::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void NotificationSubscription::setSupportedFeatures(std::string const& value) {
  m_SupportedFeatures      = value;
  m_SupportedFeaturesIsSet = true;
}
bool NotificationSubscription::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void NotificationSubscription::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}

}  // namespace oai::model::udsf
