/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * QosFlowUsage.h
 *
 * Possible values are - GENERAL: Indicate no specific QoS flow usage
 * information is available.  - IMS_SIG: Indicate that the QoS flow is used for
 * IMS signalling only.
 */

#ifndef QosFlowUsage_H_
#define QosFlowUsage_H_

#include "QosFlowUsage_anyOf.h"
#include <nlohmann/json.hpp>

namespace oai::model::pcf {

/// <summary>
/// Possible values are - GENERAL: Indicate no specific QoS flow usage
/// information is available.  - IMS_SIG: Indicate that the QoS flow is used for
/// IMS signalling only.
/// </summary>
class QosFlowUsage {
 public:
  QosFlowUsage();
  virtual ~QosFlowUsage() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const QosFlowUsage& rhs) const;
  bool operator!=(const QosFlowUsage& rhs) const;

  /////////////////////////////////////////////
  /// QosFlowUsage members

  QosFlowUsage_anyOf getValue() const;
  void setValue(QosFlowUsage_anyOf value);
  QosFlowUsage_anyOf::eQosFlowUsage_anyOf getEnumValue() const;
  void setEnumValue(QosFlowUsage_anyOf::eQosFlowUsage_anyOf value);
  friend void to_json(nlohmann::json& j, const QosFlowUsage& o);
  friend void from_json(const nlohmann::json& j, QosFlowUsage& o);
  friend void to_json(nlohmann::json& j, const QosFlowUsage_anyOf& o);
  friend void from_json(const nlohmann::json& j, QosFlowUsage_anyOf& o);

 protected:
  QosFlowUsage_anyOf m_value;
};

}  // namespace oai::model::pcf

#endif /* QosFlowUsage_H_ */
