/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SessionRule.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::pcf {

SessionRule::SessionRule() {
  m_AuthSessAmbrIsSet = false;
  m_AuthDefQosIsSet   = false;
  m_SessRuleId        = "";
  m_RefUmData         = "";
  m_RefUmDataIsSet    = false;
  m_RefUmN3gData      = "";
  m_RefUmN3gDataIsSet = false;
  m_RefCondData       = "";
  m_RefCondDataIsSet  = false;
}

void SessionRule::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool SessionRule::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool SessionRule::validate(
    std::stringstream& /* msg */, const std::string& /* pathPrefix */) const {
  bool success = true;
  /*
  const std::string _pathPrefix =
      pathPrefix.empty() ? "SessionRule" : pathPrefix;
  */
  return success;
}

bool SessionRule::operator==(const SessionRule& rhs) const {
  return

      ((!authSessAmbrIsSet() && !rhs.authSessAmbrIsSet()) ||
       (authSessAmbrIsSet() && rhs.authSessAmbrIsSet() &&
        getAuthSessAmbr() == rhs.getAuthSessAmbr())) &&

      ((!authDefQosIsSet() && !rhs.authDefQosIsSet()) ||
       (authDefQosIsSet() && rhs.authDefQosIsSet() &&
        getAuthDefQos() == rhs.getAuthDefQos())) &&

      (getSessRuleId() == rhs.getSessRuleId()) &&

      ((!refUmDataIsSet() && !rhs.refUmDataIsSet()) ||
       (refUmDataIsSet() && rhs.refUmDataIsSet() &&
        getRefUmData() == rhs.getRefUmData())) &&

      ((!refUmN3gDataIsSet() && !rhs.refUmN3gDataIsSet()) ||
       (refUmN3gDataIsSet() && rhs.refUmN3gDataIsSet() &&
        getRefUmN3gData() == rhs.getRefUmN3gData())) &&

      ((!refCondDataIsSet() && !rhs.refCondDataIsSet()) ||
       (refCondDataIsSet() && rhs.refCondDataIsSet() &&
        getRefCondData() == rhs.getRefCondData()))

          ;
}

bool SessionRule::operator!=(const SessionRule& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SessionRule& o) {
  j = nlohmann::json();
  if (o.authSessAmbrIsSet()) j["authSessAmbr"] = o.m_AuthSessAmbr;
  if (o.authDefQosIsSet()) j["authDefQos"] = o.m_AuthDefQos;
  j["sessRuleId"] = o.m_SessRuleId;
  if (o.refUmDataIsSet()) j["refUmData"] = o.m_RefUmData;
  if (o.refUmN3gDataIsSet()) j["refUmN3gData"] = o.m_RefUmN3gData;
  if (o.refCondDataIsSet()) j["refCondData"] = o.m_RefCondData;
}

void from_json(const nlohmann::json& j, SessionRule& o) {
  if (j.find("authSessAmbr") != j.end()) {
    j.at("authSessAmbr").get_to(o.m_AuthSessAmbr);
    o.m_AuthSessAmbrIsSet = true;
  }
  if (j.find("authDefQos") != j.end()) {
    j.at("authDefQos").get_to(o.m_AuthDefQos);
    o.m_AuthDefQosIsSet = true;
  }
  j.at("sessRuleId").get_to(o.m_SessRuleId);
  if (j.find("refUmData") != j.end()) {
    j.at("refUmData").get_to(o.m_RefUmData);
    o.m_RefUmDataIsSet = true;
  }
  if (j.find("refUmN3gData") != j.end()) {
    j.at("refUmN3gData").get_to(o.m_RefUmN3gData);
    o.m_RefUmN3gDataIsSet = true;
  }
  if (j.find("refCondData") != j.end()) {
    j.at("refCondData").get_to(o.m_RefCondData);
    o.m_RefCondDataIsSet = true;
  }
}

oai::model::common::Ambr SessionRule::getAuthSessAmbr() const {
  return m_AuthSessAmbr;
}
void SessionRule::setAuthSessAmbr(oai::model::common::Ambr const& value) {
  m_AuthSessAmbr      = value;
  m_AuthSessAmbrIsSet = true;
}
bool SessionRule::authSessAmbrIsSet() const {
  return m_AuthSessAmbrIsSet;
}
void SessionRule::unsetAuthSessAmbr() {
  m_AuthSessAmbrIsSet = false;
}
oai::model::pcf::AuthorizedDefaultQos SessionRule::getAuthDefQos() const {
  return m_AuthDefQos;
}
void SessionRule::setAuthDefQos(
    oai::model::pcf::AuthorizedDefaultQos const& value) {
  m_AuthDefQos      = value;
  m_AuthDefQosIsSet = true;
}
bool SessionRule::authDefQosIsSet() const {
  return m_AuthDefQosIsSet;
}
void SessionRule::unsetAuthDefQos() {
  m_AuthDefQosIsSet = false;
}
std::string SessionRule::getSessRuleId() const {
  return m_SessRuleId;
}
void SessionRule::setSessRuleId(std::string const& value) {
  m_SessRuleId = value;
}
std::string SessionRule::getRefUmData() const {
  return m_RefUmData;
}
void SessionRule::setRefUmData(std::string const& value) {
  m_RefUmData      = value;
  m_RefUmDataIsSet = true;
}
bool SessionRule::refUmDataIsSet() const {
  return m_RefUmDataIsSet;
}
void SessionRule::unsetRefUmData() {
  m_RefUmDataIsSet = false;
}
std::string SessionRule::getRefUmN3gData() const {
  return m_RefUmN3gData;
}
void SessionRule::setRefUmN3gData(std::string const& value) {
  m_RefUmN3gData      = value;
  m_RefUmN3gDataIsSet = true;
}
bool SessionRule::refUmN3gDataIsSet() const {
  return m_RefUmN3gDataIsSet;
}
void SessionRule::unsetRefUmN3gData() {
  m_RefUmN3gDataIsSet = false;
}
std::string SessionRule::getRefCondData() const {
  return m_RefCondData;
}
void SessionRule::setRefCondData(std::string const& value) {
  m_RefCondData      = value;
  m_RefCondDataIsSet = true;
}
bool SessionRule::refCondDataIsSet() const {
  return m_RefCondDataIsSet;
}
void SessionRule::unsetRefCondData() {
  m_RefCondDataIsSet = false;
}

}  // namespace oai::model::pcf
