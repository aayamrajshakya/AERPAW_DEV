/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * RedirectAddressType.h
 *
 * Possible values are - IPV4_ADDR: Indicates that the address type is in the
 * form of \&quot;dotted-decimal\&quot; IPv4 address. - IPV6_ADDR: Indicates
 * that the address type is in the form of IPv6 address. - URL: Indicates that
 * the address type is in the form of Uniform Resource Locator. - SIP_URI:
 * Indicates that the address type is in the form of SIP Uniform Resource
 * Identifier.
 */

#ifndef RedirectAddressType_H_
#define RedirectAddressType_H_

#include "RedirectAddressType_anyOf.h"
#include <nlohmann/json.hpp>

namespace oai::model::pcf {

/// <summary>
/// Possible values are - IPV4_ADDR: Indicates that the address type is in the
/// form of \&quot;dotted-decimal\&quot; IPv4 address. - IPV6_ADDR: Indicates
/// that the address type is in the form of IPv6 address. - URL: Indicates that
/// the address type is in the form of Uniform Resource Locator. - SIP_URI:
/// Indicates that the address type is in the form of SIP Uniform Resource
/// Identifier.
/// </summary>
class RedirectAddressType {
 public:
  RedirectAddressType();
  virtual ~RedirectAddressType() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const RedirectAddressType& rhs) const;
  bool operator!=(const RedirectAddressType& rhs) const;

  /////////////////////////////////////////////
  /// RedirectAddressType members

  RedirectAddressType_anyOf getValue() const;
  void setValue(RedirectAddressType_anyOf value);
  RedirectAddressType_anyOf::eRedirectAddressType_anyOf getEnumValue() const;
  void setEnumValue(
      RedirectAddressType_anyOf::eRedirectAddressType_anyOf value);
  friend void to_json(nlohmann::json& j, const RedirectAddressType& o);
  friend void from_json(const nlohmann::json& j, RedirectAddressType& o);
  friend void to_json(nlohmann::json& j, const RedirectAddressType_anyOf& o);
  friend void from_json(const nlohmann::json& j, RedirectAddressType_anyOf& o);

 protected:
  RedirectAddressType_anyOf m_value;
};

}  // namespace oai::model::pcf

#endif /* RedirectAddressType_H_ */
