/**
 * Nudsf_DataRepository
 * Nudsf Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NotificationSubscription.h
 *
 * Definition of a notification subscription
 */

#ifndef NotificationSubscription_H_
#define NotificationSubscription_H_

#include "ClientId.h"
#include <string>
#include "SubscriptionFilter.h"
#include <nlohmann/json.hpp>

namespace oai::model::udsf {

/// <summary>
/// Definition of a notification subscription
/// </summary>
class NotificationSubscription {
 public:
  NotificationSubscription();
  virtual ~NotificationSubscription() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const NotificationSubscription& rhs) const;
  bool operator!=(const NotificationSubscription& rhs) const;

  /////////////////////////////////////////////
  /// NotificationSubscription members

  /// <summary>
  ///
  /// </summary>
  oai::model::udsf::ClientId getClientId() const;
  void setClientId(oai::model::udsf::ClientId const& value);
  /// <summary>
  /// String providing an URI formatted according to RFC 3986.
  /// </summary>
  std::string getCallbackReference() const;
  void setCallbackReference(std::string const& value);
  /// <summary>
  /// String providing an URI formatted according to RFC 3986.
  /// </summary>
  std::string getExpiryCallbackReference() const;
  void setExpiryCallbackReference(std::string const& value);
  bool expiryCallbackReferenceIsSet() const;
  void unsetExpiryCallbackReference();
  /// <summary>
  /// string with format &#39;date-time&#39; as defined in OpenAPI.
  /// </summary>
  std::string getExpiry() const;
  void setExpiry(std::string const& value);
  bool expiryIsSet() const;
  void unsetExpiry();
  /// <summary>
  /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
  /// </summary>
  int32_t getExpiryNotification() const;
  void setExpiryNotification(int32_t const value);
  bool expiryNotificationIsSet() const;
  void unsetExpiryNotification();
  /// <summary>
  ///
  /// </summary>
  oai::model::udsf::SubscriptionFilter getSubFilter() const;
  void setSubFilter(oai::model::udsf::SubscriptionFilter const& value);
  bool subFilterIsSet() const;
  void unsetSubFilter();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in  hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;,  \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in  table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall  appear first in the string, and the
  /// character representing features 1 to 4 shall appear last  in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are  defined features for an API, all features that
  /// would be represented by characters that are not  present in the string are
  /// not supported.
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const& value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();

  friend void to_json(nlohmann::json& j, const NotificationSubscription& o);
  friend void from_json(const nlohmann::json& j, NotificationSubscription& o);

 protected:
  oai::model::udsf::ClientId m_ClientId;

  std::string m_CallbackReference;

  std::string m_ExpiryCallbackReference;
  bool m_ExpiryCallbackReferenceIsSet;
  std::string m_Expiry;
  bool m_ExpiryIsSet;
  int32_t m_ExpiryNotification;
  bool m_ExpiryNotificationIsSet;
  oai::model::udsf::SubscriptionFilter m_SubFilter;
  bool m_SubFilterIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
};

}  // namespace oai::model::udsf

#endif /* NotificationSubscription_H_ */
