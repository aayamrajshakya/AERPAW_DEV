/**
 * Nudsf_DataRepository
 * Nudsf Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SearchCondition.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::udsf {

SearchCondition::SearchCondition() {
  m_SchemaId      = "";
  m_SchemaIdIsSet = false;
}

void SearchCondition::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool SearchCondition::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool SearchCondition::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "SearchCondition" : pathPrefix;

  /* Units */ {
    const std::vector<oai::model::udsf::SearchComparison>& value = m_Units;
    const std::string currentValuePath = _pathPrefix + ".units";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const oai::model::udsf::SearchComparison& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".units") && success;

        i++;
      }
    }
  }

  return success;
}

bool SearchCondition::operator==(const SearchCondition& rhs) const {
  return

      (getCond() == rhs.getCond()) && (getUnits() == rhs.getUnits()) &&
      ((!schemaIdIsSet() && !rhs.schemaIdIsSet()) ||
       (schemaIdIsSet() && rhs.schemaIdIsSet() &&
        getSchemaId() == rhs.getSchemaId()));
}

bool SearchCondition::operator!=(const SearchCondition& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SearchCondition& o) {
  j          = nlohmann::json();
  j["cond"]  = o.m_Cond;
  j["units"] = o.m_Units;
  if (o.schemaIdIsSet()) j["schemaId"] = o.m_SchemaId;
}

void from_json(const nlohmann::json& j, SearchCondition& o) {
  j.at("cond").get_to(o.m_Cond);
  j.at("units").get_to(o.m_Units);
  if (j.find("schemaId") != j.end()) {
    j.at("schemaId").get_to(o.m_SchemaId);
    o.m_SchemaIdIsSet = true;
  }
}

oai::model::udsf::ConditionOperator SearchCondition::getCond() const {
  return m_Cond;
}
void SearchCondition::setCond(
    oai::model::udsf::ConditionOperator const& value) {
  m_Cond = value;
}
std::vector<oai::model::udsf::SearchComparison> SearchCondition::getUnits()
    const {
  return m_Units;
}
void SearchCondition::setUnits(
    std::vector<oai::model::udsf::SearchComparison> const& value) {
  m_Units = value;
}
std::string SearchCondition::getSchemaId() const {
  return m_SchemaId;
}
void SearchCondition::setSchemaId(std::string const& value) {
  m_SchemaId      = value;
  m_SchemaIdIsSet = true;
}
bool SearchCondition::schemaIdIsSet() const {
  return m_SchemaIdIsSet;
}
void SearchCondition::unsetSchemaId() {
  m_SchemaIdIsSet = false;
}

}  // namespace oai::model::udsf
