/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UeCampingRep.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::pcf {

UeCampingRep::UeCampingRep() {
  m_AccessTypeIsSet       = false;
  m_RatTypeIsSet          = false;
  m_ServNfIdIsSet         = false;
  m_ServingNetworkIsSet   = false;
  m_UserLocationInfoIsSet = false;
  m_UeTimeZone            = "";
  m_UeTimeZoneIsSet       = false;
  m_NetLocAccSuppIsSet    = false;
}

void UeCampingRep::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool UeCampingRep::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool UeCampingRep::validate(
    std::stringstream& /* msg */, const std::string& /* pathPrefix */) const {
  bool success = true;
  /*
  const std::string _pathPrefix =
      pathPrefix.empty() ? "UeCampingRep" : pathPrefix;
  */
  return success;
}

bool UeCampingRep::operator==(const UeCampingRep& rhs) const {
  return

      ((!accessTypeIsSet() && !rhs.accessTypeIsSet()) ||
       (accessTypeIsSet() && rhs.accessTypeIsSet() &&
        getAccessType() == rhs.getAccessType())) &&

      ((!ratTypeIsSet() && !rhs.ratTypeIsSet()) ||
       (ratTypeIsSet() && rhs.ratTypeIsSet() &&
        getRatType() == rhs.getRatType())) &&

      ((!servNfIdIsSet() && !rhs.servNfIdIsSet()) ||
       (servNfIdIsSet() && rhs.servNfIdIsSet() &&
        getServNfId() == rhs.getServNfId())) &&

      ((!servingNetworkIsSet() && !rhs.servingNetworkIsSet()) ||
       (servingNetworkIsSet() && rhs.servingNetworkIsSet() &&
        getServingNetwork() == rhs.getServingNetwork())) &&

      ((!userLocationInfoIsSet() && !rhs.userLocationInfoIsSet()) ||
       (userLocationInfoIsSet() && rhs.userLocationInfoIsSet() &&
        getUserLocationInfo() == rhs.getUserLocationInfo())) &&

      ((!ueTimeZoneIsSet() && !rhs.ueTimeZoneIsSet()) ||
       (ueTimeZoneIsSet() && rhs.ueTimeZoneIsSet() &&
        getUeTimeZone() == rhs.getUeTimeZone())) &&

      ((!netLocAccSuppIsSet() && !rhs.netLocAccSuppIsSet()) ||
       (netLocAccSuppIsSet() && rhs.netLocAccSuppIsSet() &&
        getNetLocAccSupp() == rhs.getNetLocAccSupp()))

          ;
}

bool UeCampingRep::operator!=(const UeCampingRep& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UeCampingRep& o) {
  j = nlohmann::json();
  if (o.accessTypeIsSet()) j["accessType"] = o.m_AccessType;
  if (o.ratTypeIsSet()) j["ratType"] = o.m_RatType;
  if (o.servNfIdIsSet()) j["servNfId"] = o.m_ServNfId;
  if (o.servingNetworkIsSet()) j["servingNetwork"] = o.m_ServingNetwork;
  if (o.userLocationInfoIsSet()) j["userLocationInfo"] = o.m_UserLocationInfo;
  if (o.ueTimeZoneIsSet()) j["ueTimeZone"] = o.m_UeTimeZone;
  if (o.netLocAccSuppIsSet()) j["netLocAccSupp"] = o.m_NetLocAccSupp;
}

void from_json(const nlohmann::json& j, UeCampingRep& o) {
  if (j.find("accessType") != j.end()) {
    j.at("accessType").get_to(o.m_AccessType);
    o.m_AccessTypeIsSet = true;
  }
  if (j.find("ratType") != j.end()) {
    j.at("ratType").get_to(o.m_RatType);
    o.m_RatTypeIsSet = true;
  }
  if (j.find("servNfId") != j.end()) {
    j.at("servNfId").get_to(o.m_ServNfId);
    o.m_ServNfIdIsSet = true;
  }
  if (j.find("servingNetwork") != j.end()) {
    j.at("servingNetwork").get_to(o.m_ServingNetwork);
    o.m_ServingNetworkIsSet = true;
  }
  if (j.find("userLocationInfo") != j.end()) {
    j.at("userLocationInfo").get_to(o.m_UserLocationInfo);
    o.m_UserLocationInfoIsSet = true;
  }
  if (j.find("ueTimeZone") != j.end()) {
    j.at("ueTimeZone").get_to(o.m_UeTimeZone);
    o.m_UeTimeZoneIsSet = true;
  }
  if (j.find("netLocAccSupp") != j.end()) {
    j.at("netLocAccSupp").get_to(o.m_NetLocAccSupp);
    o.m_NetLocAccSuppIsSet = true;
  }
}

oai::model::common::AccessType UeCampingRep::getAccessType() const {
  return m_AccessType;
}
void UeCampingRep::setAccessType(oai::model::common::AccessType const& value) {
  m_AccessType      = value;
  m_AccessTypeIsSet = true;
}
bool UeCampingRep::accessTypeIsSet() const {
  return m_AccessTypeIsSet;
}
void UeCampingRep::unsetAccessType() {
  m_AccessTypeIsSet = false;
}
oai::model::common::RatType UeCampingRep::getRatType() const {
  return m_RatType;
}
void UeCampingRep::setRatType(oai::model::common::RatType const& value) {
  m_RatType      = value;
  m_RatTypeIsSet = true;
}
bool UeCampingRep::ratTypeIsSet() const {
  return m_RatTypeIsSet;
}
void UeCampingRep::unsetRatType() {
  m_RatTypeIsSet = false;
}
oai::model::pcf::ServingNfIdentity UeCampingRep::getServNfId() const {
  return m_ServNfId;
}
void UeCampingRep::setServNfId(
    oai::model::pcf::ServingNfIdentity const& value) {
  m_ServNfId      = value;
  m_ServNfIdIsSet = true;
}
bool UeCampingRep::servNfIdIsSet() const {
  return m_ServNfIdIsSet;
}
void UeCampingRep::unsetServNfId() {
  m_ServNfIdIsSet = false;
}
oai::model::common::PlmnIdNid UeCampingRep::getServingNetwork() const {
  return m_ServingNetwork;
}
void UeCampingRep::setServingNetwork(
    oai::model::common::PlmnIdNid const& value) {
  m_ServingNetwork      = value;
  m_ServingNetworkIsSet = true;
}
bool UeCampingRep::servingNetworkIsSet() const {
  return m_ServingNetworkIsSet;
}
void UeCampingRep::unsetServingNetwork() {
  m_ServingNetworkIsSet = false;
}
oai::model::common::UserLocation UeCampingRep::getUserLocationInfo() const {
  return m_UserLocationInfo;
}
void UeCampingRep::setUserLocationInfo(
    oai::model::common::UserLocation const& value) {
  m_UserLocationInfo      = value;
  m_UserLocationInfoIsSet = true;
}
bool UeCampingRep::userLocationInfoIsSet() const {
  return m_UserLocationInfoIsSet;
}
void UeCampingRep::unsetUserLocationInfo() {
  m_UserLocationInfoIsSet = false;
}
std::string UeCampingRep::getUeTimeZone() const {
  return m_UeTimeZone;
}
void UeCampingRep::setUeTimeZone(std::string const& value) {
  m_UeTimeZone      = value;
  m_UeTimeZoneIsSet = true;
}
bool UeCampingRep::ueTimeZoneIsSet() const {
  return m_UeTimeZoneIsSet;
}
void UeCampingRep::unsetUeTimeZone() {
  m_UeTimeZoneIsSet = false;
}
oai::model::pcf::NetLocAccessSupport UeCampingRep::getNetLocAccSupp() const {
  return m_NetLocAccSupp;
}
void UeCampingRep::setNetLocAccSupp(
    oai::model::pcf::NetLocAccessSupport const& value) {
  m_NetLocAccSupp      = value;
  m_NetLocAccSuppIsSet = true;
}
bool UeCampingRep::netLocAccSuppIsSet() const {
  return m_NetLocAccSuppIsSet;
}
void UeCampingRep::unsetNetLocAccSupp() {
  m_NetLocAccSuppIsSet = false;
}

}  // namespace oai::model::pcf
