/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * QosMonitoringData.h
 *
 *
 */

#ifndef QosMonitoringData_H_
#define QosMonitoringData_H_

#include "ReportingFrequency.h"
#include "RequestedQosMonitoringParameter.h"
#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace oai::model::pcf {

/// <summary>
///
/// </summary>
class QosMonitoringData {
 public:
  QosMonitoringData();
  virtual ~QosMonitoringData() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const QosMonitoringData& rhs) const;
  bool operator!=(const QosMonitoringData& rhs) const;

  /////////////////////////////////////////////
  /// QosMonitoringData members

  /// <summary>
  /// Univocally identifies the QoS monitoring policy data within a PDU session.
  /// </summary>
  std::string getQmId() const;
  void setQmId(std::string const& value);
  /// <summary>
  /// indicates the UL packet delay, DL packet delay and/or round trip packet
  /// delay between the UE and the UPF is to be monitored when the QoS
  /// Monitoring for URLLC is enabled for the service data flow.
  /// </summary>
  std::vector<oai::model::pcf::RequestedQosMonitoringParameter>
  getReqQosMonParams() const;
  void setReqQosMonParams(
      std::vector<oai::model::pcf::RequestedQosMonitoringParameter> const&
          value);
  /// <summary>
  ///
  /// </summary>
  std::vector<oai::model::pcf::ReportingFrequency> getRepFreqs() const;
  void setRepFreqs(
      std::vector<oai::model::pcf::ReportingFrequency> const& value);
  /// <summary>
  /// Indicates the period of time in units of miliiseconds for DL packet delay.
  /// </summary>
  int32_t getRepThreshDl() const;
  void setRepThreshDl(int32_t const value);
  bool repThreshDlIsSet() const;
  void unsetRepThreshDl();
  /// <summary>
  /// Indicates the period of time in units of miliiseconds for UL packet delay.
  /// </summary>
  int32_t getRepThreshUl() const;
  void setRepThreshUl(int32_t const value);
  bool repThreshUlIsSet() const;
  void unsetRepThreshUl();
  /// <summary>
  /// Indicates the period of time in units of miliiseconds for round trip
  /// packet delay.
  /// </summary>
  int32_t getRepThreshRp() const;
  void setRepThreshRp(int32_t const value);
  bool repThreshRpIsSet() const;
  void unsetRepThreshRp();
  /// <summary>
  ///
  /// </summary>
  int32_t getWaitTime() const;
  void setWaitTime(int32_t const value);
  bool waitTimeIsSet() const;
  void unsetWaitTime();
  /// <summary>
  ///
  /// </summary>
  int32_t getRepPeriod() const;
  void setRepPeriod(int32_t const value);
  bool repPeriodIsSet() const;
  void unsetRepPeriod();
  /// <summary>
  ///
  /// </summary>
  std::string getNotifyUri() const;
  void setNotifyUri(std::string const& value);
  bool notifyUriIsSet() const;
  void unsetNotifyUri();
  /// <summary>
  ///
  /// </summary>
  std::string getNotifyCorreId() const;
  void setNotifyCorreId(std::string const& value);
  bool notifyCorreIdIsSet() const;
  void unsetNotifyCorreId();

  friend void to_json(nlohmann::json& j, const QosMonitoringData& o);
  friend void from_json(const nlohmann::json& j, QosMonitoringData& o);

 protected:
  std::string m_QmId;

  std::vector<oai::model::pcf::RequestedQosMonitoringParameter>
      m_ReqQosMonParams;

  std::vector<oai::model::pcf::ReportingFrequency> m_RepFreqs;

  int32_t m_RepThreshDl;
  bool m_RepThreshDlIsSet;
  int32_t m_RepThreshUl;
  bool m_RepThreshUlIsSet;
  int32_t m_RepThreshRp;
  bool m_RepThreshRpIsSet;
  int32_t m_WaitTime;
  bool m_WaitTimeIsSet;
  int32_t m_RepPeriod;
  bool m_RepPeriodIsSet;
  std::string m_NotifyUri;
  bool m_NotifyUriIsSet;
  std::string m_NotifyCorreId;
  bool m_NotifyCorreIdIsSet;
};

}  // namespace oai::model::pcf

#endif /* QosMonitoringData_H_ */
