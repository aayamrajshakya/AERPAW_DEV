/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AuthorizedDefaultQos.h
 *
 *
 */

#ifndef AuthorizedDefaultQos_H_
#define AuthorizedDefaultQos_H_

#include <string>
#include "Arp.h"
#include <nlohmann/json.hpp>

namespace oai::model::pcf {

/// <summary>
///
/// </summary>
class AuthorizedDefaultQos {
 public:
  AuthorizedDefaultQos();
  virtual ~AuthorizedDefaultQos() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const AuthorizedDefaultQos& rhs) const;
  bool operator!=(const AuthorizedDefaultQos& rhs) const;

  /////////////////////////////////////////////
  /// AuthorizedDefaultQos members

  /// <summary>
  ///
  /// </summary>
  int32_t getR5qi() const;
  void setR5qi(int32_t const value);
  bool r5qiIsSet() const;
  void unsetr_5qi();
  /// <summary>
  ///
  /// </summary>
  oai::model::common::Arp getArp() const;
  void setArp(oai::model::common::Arp const& value);
  bool arpIsSet() const;
  void unsetArp();
  /// <summary>
  ///
  /// </summary>
  int32_t getPriorityLevel() const;
  void setPriorityLevel(int32_t const value);
  bool priorityLevelIsSet() const;
  void unsetPriorityLevel();
  /// <summary>
  ///
  /// </summary>
  int32_t getAverWindow() const;
  void setAverWindow(int32_t const value);
  bool averWindowIsSet() const;
  void unsetAverWindow();
  /// <summary>
  ///
  /// </summary>
  int32_t getMaxDataBurstVol() const;
  void setMaxDataBurstVol(int32_t const value);
  bool maxDataBurstVolIsSet() const;
  void unsetMaxDataBurstVol();
  /// <summary>
  ///
  /// </summary>
  std::string getMaxbrUl() const;
  void setMaxbrUl(std::string const& value);
  bool maxbrUlIsSet() const;
  void unsetMaxbrUl();
  /// <summary>
  ///
  /// </summary>
  std::string getMaxbrDl() const;
  void setMaxbrDl(std::string const& value);
  bool maxbrDlIsSet() const;
  void unsetMaxbrDl();
  /// <summary>
  ///
  /// </summary>
  std::string getGbrUl() const;
  void setGbrUl(std::string const& value);
  bool gbrUlIsSet() const;
  void unsetGbrUl();
  /// <summary>
  ///
  /// </summary>
  std::string getGbrDl() const;
  void setGbrDl(std::string const& value);
  bool gbrDlIsSet() const;
  void unsetGbrDl();
  /// <summary>
  ///
  /// </summary>
  int32_t getExtMaxDataBurstVol() const;
  void setExtMaxDataBurstVol(int32_t const value);
  bool extMaxDataBurstVolIsSet() const;
  void unsetExtMaxDataBurstVol();

  friend void to_json(nlohmann::json& j, const AuthorizedDefaultQos& o);
  friend void from_json(const nlohmann::json& j, AuthorizedDefaultQos& o);

 protected:
  int32_t m_r_5qi;
  bool m_r_5qiIsSet;
  oai::model::common::Arp m_Arp;
  bool m_ArpIsSet;
  int32_t m_PriorityLevel;
  bool m_PriorityLevelIsSet;
  int32_t m_AverWindow;
  bool m_AverWindowIsSet;
  int32_t m_MaxDataBurstVol;
  bool m_MaxDataBurstVolIsSet;
  std::string m_MaxbrUl;
  bool m_MaxbrUlIsSet;
  std::string m_MaxbrDl;
  bool m_MaxbrDlIsSet;
  std::string m_GbrUl;
  bool m_GbrUlIsSet;
  std::string m_GbrDl;
  bool m_GbrDlIsSet;
  int32_t m_ExtMaxDataBurstVol;
  bool m_ExtMaxDataBurstVolIsSet;
};

}  // namespace oai::model::pcf

#endif /* AuthorizedDefaultQos_H_ */
