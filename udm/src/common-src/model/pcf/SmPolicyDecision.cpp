/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SmPolicyDecision.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::pcf {

SmPolicyDecision::SmPolicyDecision() {
  m_SessRulesIsSet             = false;
  m_PccRulesIsSet              = false;
  m_PcscfRestIndication        = false;
  m_PcscfRestIndicationIsSet   = false;
  m_QosDecsIsSet               = false;
  m_ChgDecsIsSet               = false;
  m_ChargingInfoIsSet          = false;
  m_TraffContDecsIsSet         = false;
  m_UmDecsIsSet                = false;
  m_QosCharsIsSet              = false;
  m_QosMonDecsIsSet            = false;
  m_ReflectiveQoSTimer         = 0;
  m_ReflectiveQoSTimerIsSet    = false;
  m_CondsIsSet                 = false;
  m_RevalidationTime           = "";
  m_RevalidationTimeIsSet      = false;
  m_Offline                    = false;
  m_OfflineIsSet               = false;
  m_Online                     = false;
  m_OnlineIsSet                = false;
  m_PolicyCtrlReqTriggersIsSet = false;
  m_LastReqRuleDataIsSet       = false;
  m_LastReqUsageDataIsSet      = false;
  m_PraInfosIsSet              = false;
  m_Ipv4Index                  = 0;
  m_Ipv4IndexIsSet             = false;
  m_Ipv6Index                  = 0;
  m_Ipv6IndexIsSet             = false;
  m_QosFlowUsageIsSet          = false;
  m_RelCauseIsSet              = false;
  m_SuppFeat                   = "";
  m_SuppFeatIsSet              = false;
  m_TsnBridgeManContIsSet      = false;
  m_TsnPortManContDsttIsSet    = false;
  m_TsnPortManContNwttsIsSet   = false;
  m_RedSessIndication          = false;
  m_RedSessIndicationIsSet     = false;
}

void SmPolicyDecision::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool SmPolicyDecision::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool SmPolicyDecision::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "SmPolicyDecision" : pathPrefix;
  /*
  if (sessRulesIsSet()) {
    const std::map<std::string, oai::model::pcf::SessionRule>& value =
        m_SessRules;
    const std::string currentValuePath = _pathPrefix + ".sessRules";
  }

  if (pccRulesIsSet()) {
    const std::map<std::string, oai::model::pcf::PccRule>& value = m_PccRules;
    const std::string currentValuePath = _pathPrefix + ".pccRules";
  }

  if (qosDecsIsSet()) {
    const std::map<std::string, oai::model::pcf::QosData>& value = m_QosDecs;
    const std::string currentValuePath = _pathPrefix + ".qosDecs";
  }

  if (chgDecsIsSet()) {
    const std::map<std::string, oai::model::pcf::ChargingData>& value =
        m_ChgDecs;
    const std::string currentValuePath = _pathPrefix + ".chgDecs";
  }

  if (traffContDecsIsSet()) {
    const std::map<std::string, oai::model::pcf::TrafficControlData>& value =
        m_TraffContDecs;
    const std::string currentValuePath = _pathPrefix + ".traffContDecs";
  }

  if (umDecsIsSet()) {
    const std::map<std::string, oai::model::pcf::UsageMonitoringData>& value =
        m_UmDecs;
    const std::string currentValuePath = _pathPrefix + ".umDecs";
  }

  if (qosCharsIsSet()) {
    const std::map<std::string, oai::model::pcf::QosCharacteristics>& value =
        m_QosChars;
    const std::string currentValuePath = _pathPrefix + ".qosChars";
  }

  if (qosMonDecsIsSet()) {
    const std::map<std::string, oai::model::pcf::QosMonitoringData>& value =
        m_QosMonDecs;
    const std::string currentValuePath = _pathPrefix + ".qosMonDecs";
  }

  if (condsIsSet()) {
    const std::map<std::string, oai::model::pcf::ConditionData>& value =
        m_Conds;
    const std::string currentValuePath = _pathPrefix + ".conds";
  }
  */
  if (policyCtrlReqTriggersIsSet()) {
    const std::vector<oai::model::pcf::PolicyControlRequestTrigger>& value =
        m_PolicyCtrlReqTriggers;
    const std::string currentValuePath = _pathPrefix + ".policyCtrlReqTriggers";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const oai::model::pcf::PolicyControlRequestTrigger& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".policyCtrlReqTriggers") &&
            success;

        i++;
      }
    }
  }

  if (lastReqRuleDataIsSet()) {
    const std::vector<oai::model::pcf::RequestedRuleData>& value =
        m_LastReqRuleData;
    const std::string currentValuePath = _pathPrefix + ".lastReqRuleData";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const oai::model::pcf::RequestedRuleData& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".lastReqRuleData") &&
                  success;

        i++;
      }
    }
  }
  /*
  if (praInfosIsSet()) {
    const std::map<std::string, oai::model::common::PresenceInfoRm>& value =
        m_PraInfos;
    const std::string currentValuePath = _pathPrefix + ".praInfos";
  }

  if (suppFeatIsSet()) {
    const std::string& value           = m_SuppFeat;
    const std::string currentValuePath = _pathPrefix + ".suppFeat";
  }
  */
  if (tsnPortManContNwttsIsSet()) {
    const std::vector<oai::model::pcf::PortManagementContainer>& value =
        m_TsnPortManContNwtts;
    const std::string currentValuePath = _pathPrefix + ".tsnPortManContNwtts";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const oai::model::pcf::PortManagementContainer& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".tsnPortManContNwtts") &&
            success;

        i++;
      }
    }
  }

  return success;
}

bool SmPolicyDecision::operator==(const SmPolicyDecision& rhs) const {
  return

      ((!sessRulesIsSet() && !rhs.sessRulesIsSet()) ||
       (sessRulesIsSet() && rhs.sessRulesIsSet() &&
        getSessRules() == rhs.getSessRules())) &&

      ((!pccRulesIsSet() && !rhs.pccRulesIsSet()) ||
       (pccRulesIsSet() && rhs.pccRulesIsSet() &&
        getPccRules() == rhs.getPccRules())) &&

      ((!pcscfRestIndicationIsSet() && !rhs.pcscfRestIndicationIsSet()) ||
       (pcscfRestIndicationIsSet() && rhs.pcscfRestIndicationIsSet() &&
        isPcscfRestIndication() == rhs.isPcscfRestIndication())) &&

      ((!qosDecsIsSet() && !rhs.qosDecsIsSet()) ||
       (qosDecsIsSet() && rhs.qosDecsIsSet() &&
        getQosDecs() == rhs.getQosDecs())) &&

      ((!chgDecsIsSet() && !rhs.chgDecsIsSet()) ||
       (chgDecsIsSet() && rhs.chgDecsIsSet() &&
        getChgDecs() == rhs.getChgDecs())) &&

      ((!chargingInfoIsSet() && !rhs.chargingInfoIsSet()) ||
       (chargingInfoIsSet() && rhs.chargingInfoIsSet() &&
        getChargingInfo() == rhs.getChargingInfo())) &&

      ((!traffContDecsIsSet() && !rhs.traffContDecsIsSet()) ||
       (traffContDecsIsSet() && rhs.traffContDecsIsSet() &&
        getTraffContDecs() == rhs.getTraffContDecs())) &&

      ((!umDecsIsSet() && !rhs.umDecsIsSet()) ||
       (umDecsIsSet() && rhs.umDecsIsSet() &&
        getUmDecs() == rhs.getUmDecs())) &&

      ((!qosCharsIsSet() && !rhs.qosCharsIsSet()) ||
       (qosCharsIsSet() && rhs.qosCharsIsSet() &&
        getQosChars() == rhs.getQosChars())) &&

      ((!qosMonDecsIsSet() && !rhs.qosMonDecsIsSet()) ||
       (qosMonDecsIsSet() && rhs.qosMonDecsIsSet() &&
        getQosMonDecs() == rhs.getQosMonDecs())) &&

      ((!reflectiveQoSTimerIsSet() && !rhs.reflectiveQoSTimerIsSet()) ||
       (reflectiveQoSTimerIsSet() && rhs.reflectiveQoSTimerIsSet() &&
        getReflectiveQoSTimer() == rhs.getReflectiveQoSTimer())) &&

      ((!condsIsSet() && !rhs.condsIsSet()) ||
       (condsIsSet() && rhs.condsIsSet() && getConds() == rhs.getConds())) &&

      ((!revalidationTimeIsSet() && !rhs.revalidationTimeIsSet()) ||
       (revalidationTimeIsSet() && rhs.revalidationTimeIsSet() &&
        getRevalidationTime() == rhs.getRevalidationTime())) &&

      ((!offlineIsSet() && !rhs.offlineIsSet()) ||
       (offlineIsSet() && rhs.offlineIsSet() &&
        isOffline() == rhs.isOffline())) &&

      ((!onlineIsSet() && !rhs.onlineIsSet()) ||
       (onlineIsSet() && rhs.onlineIsSet() && isOnline() == rhs.isOnline())) &&

      ((!policyCtrlReqTriggersIsSet() && !rhs.policyCtrlReqTriggersIsSet()) ||
       (policyCtrlReqTriggersIsSet() && rhs.policyCtrlReqTriggersIsSet() &&
        getPolicyCtrlReqTriggers() == rhs.getPolicyCtrlReqTriggers())) &&

      ((!lastReqRuleDataIsSet() && !rhs.lastReqRuleDataIsSet()) ||
       (lastReqRuleDataIsSet() && rhs.lastReqRuleDataIsSet() &&
        getLastReqRuleData() == rhs.getLastReqRuleData())) &&

      ((!lastReqUsageDataIsSet() && !rhs.lastReqUsageDataIsSet()) ||
       (lastReqUsageDataIsSet() && rhs.lastReqUsageDataIsSet() &&
        getLastReqUsageData() == rhs.getLastReqUsageData())) &&

      ((!praInfosIsSet() && !rhs.praInfosIsSet()) ||
       (praInfosIsSet() && rhs.praInfosIsSet() &&
        getPraInfos() == rhs.getPraInfos())) &&

      ((!ipv4IndexIsSet() && !rhs.ipv4IndexIsSet()) ||
       (ipv4IndexIsSet() && rhs.ipv4IndexIsSet() &&
        getIpv4Index() == rhs.getIpv4Index())) &&

      ((!ipv6IndexIsSet() && !rhs.ipv6IndexIsSet()) ||
       (ipv6IndexIsSet() && rhs.ipv6IndexIsSet() &&
        getIpv6Index() == rhs.getIpv6Index())) &&

      ((!qosFlowUsageIsSet() && !rhs.qosFlowUsageIsSet()) ||
       (qosFlowUsageIsSet() && rhs.qosFlowUsageIsSet() &&
        getQosFlowUsage() == rhs.getQosFlowUsage())) &&

      ((!relCauseIsSet() && !rhs.relCauseIsSet()) ||
       (relCauseIsSet() && rhs.relCauseIsSet() &&
        getRelCause() == rhs.getRelCause())) &&

      ((!suppFeatIsSet() && !rhs.suppFeatIsSet()) ||
       (suppFeatIsSet() && rhs.suppFeatIsSet() &&
        getSuppFeat() == rhs.getSuppFeat())) &&

      ((!tsnBridgeManContIsSet() && !rhs.tsnBridgeManContIsSet()) ||
       (tsnBridgeManContIsSet() && rhs.tsnBridgeManContIsSet() &&
        getTsnBridgeManCont() == rhs.getTsnBridgeManCont())) &&

      ((!tsnPortManContDsttIsSet() && !rhs.tsnPortManContDsttIsSet()) ||
       (tsnPortManContDsttIsSet() && rhs.tsnPortManContDsttIsSet() &&
        getTsnPortManContDstt() == rhs.getTsnPortManContDstt())) &&

      ((!tsnPortManContNwttsIsSet() && !rhs.tsnPortManContNwttsIsSet()) ||
       (tsnPortManContNwttsIsSet() && rhs.tsnPortManContNwttsIsSet() &&
        getTsnPortManContNwtts() == rhs.getTsnPortManContNwtts())) &&

      ((!redSessIndicationIsSet() && !rhs.redSessIndicationIsSet()) ||
       (redSessIndicationIsSet() && rhs.redSessIndicationIsSet() &&
        isRedSessIndication() == rhs.isRedSessIndication()))

          ;
}

bool SmPolicyDecision::operator!=(const SmPolicyDecision& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SmPolicyDecision& o) {
  j = nlohmann::json();
  if (o.sessRulesIsSet() || !o.m_SessRules.empty())
    j["sessRules"] = o.m_SessRules;
  if (o.pccRulesIsSet() || !o.m_PccRules.empty()) j["pccRules"] = o.m_PccRules;
  if (o.pcscfRestIndicationIsSet())
    j["pcscfRestIndication"] = o.m_PcscfRestIndication;
  if (o.qosDecsIsSet() || !o.m_QosDecs.empty()) j["qosDecs"] = o.m_QosDecs;
  if (o.chgDecsIsSet() || !o.m_ChgDecs.empty()) j["chgDecs"] = o.m_ChgDecs;
  if (o.chargingInfoIsSet()) j["chargingInfo"] = o.m_ChargingInfo;
  if (o.traffContDecsIsSet() || !o.m_TraffContDecs.empty())
    j["traffContDecs"] = o.m_TraffContDecs;
  if (o.umDecsIsSet() || !o.m_UmDecs.empty()) j["umDecs"] = o.m_UmDecs;
  if (o.qosCharsIsSet() || !o.m_QosChars.empty()) j["qosChars"] = o.m_QosChars;
  if (o.qosMonDecsIsSet() || !o.m_QosMonDecs.empty())
    j["qosMonDecs"] = o.m_QosMonDecs;
  if (o.reflectiveQoSTimerIsSet())
    j["reflectiveQoSTimer"] = o.m_ReflectiveQoSTimer;
  if (o.condsIsSet() || !o.m_Conds.empty()) j["conds"] = o.m_Conds;
  if (o.revalidationTimeIsSet()) j["revalidationTime"] = o.m_RevalidationTime;
  if (o.offlineIsSet()) j["offline"] = o.m_Offline;
  if (o.onlineIsSet()) j["online"] = o.m_Online;
  if (o.policyCtrlReqTriggersIsSet() || !o.m_PolicyCtrlReqTriggers.empty())
    j["policyCtrlReqTriggers"] = o.m_PolicyCtrlReqTriggers;
  if (o.lastReqRuleDataIsSet() || !o.m_LastReqRuleData.empty())
    j["lastReqRuleData"] = o.m_LastReqRuleData;
  if (o.lastReqUsageDataIsSet()) j["lastReqUsageData"] = o.m_LastReqUsageData;
  if (o.praInfosIsSet() || !o.m_PraInfos.empty()) j["praInfos"] = o.m_PraInfos;
  if (o.ipv4IndexIsSet()) j["ipv4Index"] = o.m_Ipv4Index;
  if (o.ipv6IndexIsSet()) j["ipv6Index"] = o.m_Ipv6Index;
  if (o.qosFlowUsageIsSet()) j["qosFlowUsage"] = o.m_QosFlowUsage;
  if (o.relCauseIsSet()) j["relCause"] = o.m_RelCause;
  if (o.suppFeatIsSet()) j["suppFeat"] = o.m_SuppFeat;
  if (o.tsnBridgeManContIsSet()) j["tsnBridgeManCont"] = o.m_TsnBridgeManCont;
  if (o.tsnPortManContDsttIsSet())
    j["tsnPortManContDstt"] = o.m_TsnPortManContDstt;
  if (o.tsnPortManContNwttsIsSet() || !o.m_TsnPortManContNwtts.empty())
    j["tsnPortManContNwtts"] = o.m_TsnPortManContNwtts;
  if (o.redSessIndicationIsSet())
    j["redSessIndication"] = o.m_RedSessIndication;
}

void from_json(const nlohmann::json& j, SmPolicyDecision& o) {
  if (j.find("sessRules") != j.end()) {
    j.at("sessRules").get_to(o.m_SessRules);
    o.m_SessRulesIsSet = true;
  }
  if (j.find("pccRules") != j.end()) {
    j.at("pccRules").get_to(o.m_PccRules);
    o.m_PccRulesIsSet = true;
  }
  if (j.find("pcscfRestIndication") != j.end()) {
    j.at("pcscfRestIndication").get_to(o.m_PcscfRestIndication);
    o.m_PcscfRestIndicationIsSet = true;
  }
  if (j.find("qosDecs") != j.end()) {
    j.at("qosDecs").get_to(o.m_QosDecs);
    o.m_QosDecsIsSet = true;
  }
  if (j.find("chgDecs") != j.end()) {
    j.at("chgDecs").get_to(o.m_ChgDecs);
    o.m_ChgDecsIsSet = true;
  }
  if (j.find("chargingInfo") != j.end()) {
    j.at("chargingInfo").get_to(o.m_ChargingInfo);
    o.m_ChargingInfoIsSet = true;
  }
  if (j.find("traffContDecs") != j.end()) {
    j.at("traffContDecs").get_to(o.m_TraffContDecs);
    o.m_TraffContDecsIsSet = true;
  }
  if (j.find("umDecs") != j.end()) {
    j.at("umDecs").get_to(o.m_UmDecs);
    o.m_UmDecsIsSet = true;
  }
  if (j.find("qosChars") != j.end()) {
    j.at("qosChars").get_to(o.m_QosChars);
    o.m_QosCharsIsSet = true;
  }
  if (j.find("qosMonDecs") != j.end()) {
    j.at("qosMonDecs").get_to(o.m_QosMonDecs);
    o.m_QosMonDecsIsSet = true;
  }
  if (j.find("reflectiveQoSTimer") != j.end()) {
    j.at("reflectiveQoSTimer").get_to(o.m_ReflectiveQoSTimer);
    o.m_ReflectiveQoSTimerIsSet = true;
  }
  if (j.find("conds") != j.end()) {
    j.at("conds").get_to(o.m_Conds);
    o.m_CondsIsSet = true;
  }
  if (j.find("revalidationTime") != j.end()) {
    j.at("revalidationTime").get_to(o.m_RevalidationTime);
    o.m_RevalidationTimeIsSet = true;
  }
  if (j.find("offline") != j.end()) {
    j.at("offline").get_to(o.m_Offline);
    o.m_OfflineIsSet = true;
  }
  if (j.find("online") != j.end()) {
    j.at("online").get_to(o.m_Online);
    o.m_OnlineIsSet = true;
  }
  if (j.find("policyCtrlReqTriggers") != j.end()) {
    j.at("policyCtrlReqTriggers").get_to(o.m_PolicyCtrlReqTriggers);
    o.m_PolicyCtrlReqTriggersIsSet = true;
  }
  if (j.find("lastReqRuleData") != j.end()) {
    j.at("lastReqRuleData").get_to(o.m_LastReqRuleData);
    o.m_LastReqRuleDataIsSet = true;
  }
  if (j.find("lastReqUsageData") != j.end()) {
    j.at("lastReqUsageData").get_to(o.m_LastReqUsageData);
    o.m_LastReqUsageDataIsSet = true;
  }
  if (j.find("praInfos") != j.end()) {
    j.at("praInfos").get_to(o.m_PraInfos);
    o.m_PraInfosIsSet = true;
  }
  if (j.find("ipv4Index") != j.end()) {
    j.at("ipv4Index").get_to(o.m_Ipv4Index);
    o.m_Ipv4IndexIsSet = true;
  }
  if (j.find("ipv6Index") != j.end()) {
    j.at("ipv6Index").get_to(o.m_Ipv6Index);
    o.m_Ipv6IndexIsSet = true;
  }
  if (j.find("qosFlowUsage") != j.end()) {
    j.at("qosFlowUsage").get_to(o.m_QosFlowUsage);
    o.m_QosFlowUsageIsSet = true;
  }
  if (j.find("relCause") != j.end()) {
    j.at("relCause").get_to(o.m_RelCause);
    o.m_RelCauseIsSet = true;
  }
  if (j.find("suppFeat") != j.end()) {
    j.at("suppFeat").get_to(o.m_SuppFeat);
    o.m_SuppFeatIsSet = true;
  }
  if (j.find("tsnBridgeManCont") != j.end()) {
    j.at("tsnBridgeManCont").get_to(o.m_TsnBridgeManCont);
    o.m_TsnBridgeManContIsSet = true;
  }
  if (j.find("tsnPortManContDstt") != j.end()) {
    j.at("tsnPortManContDstt").get_to(o.m_TsnPortManContDstt);
    o.m_TsnPortManContDsttIsSet = true;
  }
  if (j.find("tsnPortManContNwtts") != j.end()) {
    j.at("tsnPortManContNwtts").get_to(o.m_TsnPortManContNwtts);
    o.m_TsnPortManContNwttsIsSet = true;
  }
  if (j.find("redSessIndication") != j.end()) {
    j.at("redSessIndication").get_to(o.m_RedSessIndication);
    o.m_RedSessIndicationIsSet = true;
  }
}

std::map<std::string, oai::model::pcf::SessionRule>
SmPolicyDecision::getSessRules() const {
  return m_SessRules;
}
void SmPolicyDecision::setSessRules(
    std::map<std::string, oai::model::pcf::SessionRule> const& value) {
  m_SessRules      = value;
  m_SessRulesIsSet = true;
}
bool SmPolicyDecision::sessRulesIsSet() const {
  return m_SessRulesIsSet;
}
void SmPolicyDecision::unsetSessRules() {
  m_SessRulesIsSet = false;
}
std::map<std::string, oai::model::pcf::PccRule> SmPolicyDecision::getPccRules()
    const {
  return m_PccRules;
}
void SmPolicyDecision::setPccRules(
    std::map<std::string, oai::model::pcf::PccRule> const& value) {
  m_PccRules      = value;
  m_PccRulesIsSet = true;
}
bool SmPolicyDecision::pccRulesIsSet() const {
  return m_PccRulesIsSet;
}
void SmPolicyDecision::unsetPccRules() {
  m_PccRulesIsSet = false;
}
bool SmPolicyDecision::isPcscfRestIndication() const {
  return m_PcscfRestIndication;
}
void SmPolicyDecision::setPcscfRestIndication(bool const value) {
  m_PcscfRestIndication      = value;
  m_PcscfRestIndicationIsSet = true;
}
bool SmPolicyDecision::pcscfRestIndicationIsSet() const {
  return m_PcscfRestIndicationIsSet;
}
void SmPolicyDecision::unsetPcscfRestIndication() {
  m_PcscfRestIndicationIsSet = false;
}
std::map<std::string, oai::model::pcf::QosData> SmPolicyDecision::getQosDecs()
    const {
  return m_QosDecs;
}
void SmPolicyDecision::setQosDecs(
    std::map<std::string, oai::model::pcf::QosData> const& value) {
  m_QosDecs      = value;
  m_QosDecsIsSet = true;
}
bool SmPolicyDecision::qosDecsIsSet() const {
  return m_QosDecsIsSet;
}
void SmPolicyDecision::unsetQosDecs() {
  m_QosDecsIsSet = false;
}
std::map<std::string, oai::model::pcf::ChargingData>
SmPolicyDecision::getChgDecs() const {
  return m_ChgDecs;
}
void SmPolicyDecision::setChgDecs(
    std::map<std::string, oai::model::pcf::ChargingData> const& value) {
  m_ChgDecs      = value;
  m_ChgDecsIsSet = true;
}
bool SmPolicyDecision::chgDecsIsSet() const {
  return m_ChgDecsIsSet;
}
void SmPolicyDecision::unsetChgDecs() {
  m_ChgDecsIsSet = false;
}
oai::model::pcf::ChargingInformation SmPolicyDecision::getChargingInfo() const {
  return m_ChargingInfo;
}
void SmPolicyDecision::setChargingInfo(
    oai::model::pcf::ChargingInformation const& value) {
  m_ChargingInfo      = value;
  m_ChargingInfoIsSet = true;
}
bool SmPolicyDecision::chargingInfoIsSet() const {
  return m_ChargingInfoIsSet;
}
void SmPolicyDecision::unsetChargingInfo() {
  m_ChargingInfoIsSet = false;
}
std::map<std::string, oai::model::pcf::TrafficControlData>
SmPolicyDecision::getTraffContDecs() const {
  return m_TraffContDecs;
}
void SmPolicyDecision::setTraffContDecs(
    std::map<std::string, oai::model::pcf::TrafficControlData> const& value) {
  m_TraffContDecs      = value;
  m_TraffContDecsIsSet = true;
}
bool SmPolicyDecision::traffContDecsIsSet() const {
  return m_TraffContDecsIsSet;
}
void SmPolicyDecision::unsetTraffContDecs() {
  m_TraffContDecsIsSet = false;
}
std::map<std::string, oai::model::pcf::UsageMonitoringData>
SmPolicyDecision::getUmDecs() const {
  return m_UmDecs;
}
void SmPolicyDecision::setUmDecs(
    std::map<std::string, oai::model::pcf::UsageMonitoringData> const& value) {
  m_UmDecs      = value;
  m_UmDecsIsSet = true;
}
bool SmPolicyDecision::umDecsIsSet() const {
  return m_UmDecsIsSet;
}
void SmPolicyDecision::unsetUmDecs() {
  m_UmDecsIsSet = false;
}
std::map<std::string, oai::model::pcf::QosCharacteristics>
SmPolicyDecision::getQosChars() const {
  return m_QosChars;
}
void SmPolicyDecision::setQosChars(
    std::map<std::string, oai::model::pcf::QosCharacteristics> const& value) {
  m_QosChars      = value;
  m_QosCharsIsSet = true;
}
bool SmPolicyDecision::qosCharsIsSet() const {
  return m_QosCharsIsSet;
}
void SmPolicyDecision::unsetQosChars() {
  m_QosCharsIsSet = false;
}
std::map<std::string, oai::model::pcf::QosMonitoringData>
SmPolicyDecision::getQosMonDecs() const {
  return m_QosMonDecs;
}
void SmPolicyDecision::setQosMonDecs(
    std::map<std::string, oai::model::pcf::QosMonitoringData> const& value) {
  m_QosMonDecs      = value;
  m_QosMonDecsIsSet = true;
}
bool SmPolicyDecision::qosMonDecsIsSet() const {
  return m_QosMonDecsIsSet;
}
void SmPolicyDecision::unsetQosMonDecs() {
  m_QosMonDecsIsSet = false;
}
int32_t SmPolicyDecision::getReflectiveQoSTimer() const {
  return m_ReflectiveQoSTimer;
}
void SmPolicyDecision::setReflectiveQoSTimer(int32_t const value) {
  m_ReflectiveQoSTimer      = value;
  m_ReflectiveQoSTimerIsSet = true;
}
bool SmPolicyDecision::reflectiveQoSTimerIsSet() const {
  return m_ReflectiveQoSTimerIsSet;
}
void SmPolicyDecision::unsetReflectiveQoSTimer() {
  m_ReflectiveQoSTimerIsSet = false;
}
std::map<std::string, oai::model::pcf::ConditionData>
SmPolicyDecision::getConds() const {
  return m_Conds;
}
void SmPolicyDecision::setConds(
    std::map<std::string, oai::model::pcf::ConditionData> const& value) {
  m_Conds      = value;
  m_CondsIsSet = true;
}
bool SmPolicyDecision::condsIsSet() const {
  return m_CondsIsSet;
}
void SmPolicyDecision::unsetConds() {
  m_CondsIsSet = false;
}
std::string SmPolicyDecision::getRevalidationTime() const {
  return m_RevalidationTime;
}
void SmPolicyDecision::setRevalidationTime(std::string const& value) {
  m_RevalidationTime      = value;
  m_RevalidationTimeIsSet = true;
}
bool SmPolicyDecision::revalidationTimeIsSet() const {
  return m_RevalidationTimeIsSet;
}
void SmPolicyDecision::unsetRevalidationTime() {
  m_RevalidationTimeIsSet = false;
}
bool SmPolicyDecision::isOffline() const {
  return m_Offline;
}
void SmPolicyDecision::setOffline(bool const value) {
  m_Offline      = value;
  m_OfflineIsSet = true;
}
bool SmPolicyDecision::offlineIsSet() const {
  return m_OfflineIsSet;
}
void SmPolicyDecision::unsetOffline() {
  m_OfflineIsSet = false;
}
bool SmPolicyDecision::isOnline() const {
  return m_Online;
}
void SmPolicyDecision::setOnline(bool const value) {
  m_Online      = value;
  m_OnlineIsSet = true;
}
bool SmPolicyDecision::onlineIsSet() const {
  return m_OnlineIsSet;
}
void SmPolicyDecision::unsetOnline() {
  m_OnlineIsSet = false;
}
std::vector<oai::model::pcf::PolicyControlRequestTrigger>
SmPolicyDecision::getPolicyCtrlReqTriggers() const {
  return m_PolicyCtrlReqTriggers;
}
void SmPolicyDecision::setPolicyCtrlReqTriggers(
    std::vector<oai::model::pcf::PolicyControlRequestTrigger> const& value) {
  m_PolicyCtrlReqTriggers      = value;
  m_PolicyCtrlReqTriggersIsSet = true;
}
bool SmPolicyDecision::policyCtrlReqTriggersIsSet() const {
  return m_PolicyCtrlReqTriggersIsSet;
}
void SmPolicyDecision::unsetPolicyCtrlReqTriggers() {
  m_PolicyCtrlReqTriggersIsSet = false;
}
std::vector<oai::model::pcf::RequestedRuleData>
SmPolicyDecision::getLastReqRuleData() const {
  return m_LastReqRuleData;
}
void SmPolicyDecision::setLastReqRuleData(
    std::vector<oai::model::pcf::RequestedRuleData> const& value) {
  m_LastReqRuleData      = value;
  m_LastReqRuleDataIsSet = true;
}
bool SmPolicyDecision::lastReqRuleDataIsSet() const {
  return m_LastReqRuleDataIsSet;
}
void SmPolicyDecision::unsetLastReqRuleData() {
  m_LastReqRuleDataIsSet = false;
}
oai::model::pcf::RequestedUsageData SmPolicyDecision::getLastReqUsageData()
    const {
  return m_LastReqUsageData;
}
void SmPolicyDecision::setLastReqUsageData(
    oai::model::pcf::RequestedUsageData const& value) {
  m_LastReqUsageData      = value;
  m_LastReqUsageDataIsSet = true;
}
bool SmPolicyDecision::lastReqUsageDataIsSet() const {
  return m_LastReqUsageDataIsSet;
}
void SmPolicyDecision::unsetLastReqUsageData() {
  m_LastReqUsageDataIsSet = false;
}
std::map<std::string, oai::model::common::PresenceInfoRm>
SmPolicyDecision::getPraInfos() const {
  return m_PraInfos;
}
void SmPolicyDecision::setPraInfos(
    std::map<std::string, oai::model::common::PresenceInfoRm> const& value) {
  m_PraInfos      = value;
  m_PraInfosIsSet = true;
}
bool SmPolicyDecision::praInfosIsSet() const {
  return m_PraInfosIsSet;
}
void SmPolicyDecision::unsetPraInfos() {
  m_PraInfosIsSet = false;
}
int32_t SmPolicyDecision::getIpv4Index() const {
  return m_Ipv4Index;
}
void SmPolicyDecision::setIpv4Index(int32_t const value) {
  m_Ipv4Index      = value;
  m_Ipv4IndexIsSet = true;
}
bool SmPolicyDecision::ipv4IndexIsSet() const {
  return m_Ipv4IndexIsSet;
}
void SmPolicyDecision::unsetIpv4Index() {
  m_Ipv4IndexIsSet = false;
}
int32_t SmPolicyDecision::getIpv6Index() const {
  return m_Ipv6Index;
}
void SmPolicyDecision::setIpv6Index(int32_t const value) {
  m_Ipv6Index      = value;
  m_Ipv6IndexIsSet = true;
}
bool SmPolicyDecision::ipv6IndexIsSet() const {
  return m_Ipv6IndexIsSet;
}
void SmPolicyDecision::unsetIpv6Index() {
  m_Ipv6IndexIsSet = false;
}
oai::model::pcf::QosFlowUsage SmPolicyDecision::getQosFlowUsage() const {
  return m_QosFlowUsage;
}
void SmPolicyDecision::setQosFlowUsage(
    oai::model::pcf::QosFlowUsage const& value) {
  m_QosFlowUsage      = value;
  m_QosFlowUsageIsSet = true;
}
bool SmPolicyDecision::qosFlowUsageIsSet() const {
  return m_QosFlowUsageIsSet;
}
void SmPolicyDecision::unsetQosFlowUsage() {
  m_QosFlowUsageIsSet = false;
}
oai::model::pcf::SmPolicyAssociationReleaseCause SmPolicyDecision::getRelCause()
    const {
  return m_RelCause;
}
void SmPolicyDecision::setRelCause(
    oai::model::pcf::SmPolicyAssociationReleaseCause const& value) {
  m_RelCause      = value;
  m_RelCauseIsSet = true;
}
bool SmPolicyDecision::relCauseIsSet() const {
  return m_RelCauseIsSet;
}
void SmPolicyDecision::unsetRelCause() {
  m_RelCauseIsSet = false;
}
std::string SmPolicyDecision::getSuppFeat() const {
  return m_SuppFeat;
}
void SmPolicyDecision::setSuppFeat(std::string const& value) {
  m_SuppFeat      = value;
  m_SuppFeatIsSet = true;
}
bool SmPolicyDecision::suppFeatIsSet() const {
  return m_SuppFeatIsSet;
}
void SmPolicyDecision::unsetSuppFeat() {
  m_SuppFeatIsSet = false;
}
oai::model::pcf::BridgeManagementContainer
SmPolicyDecision::getTsnBridgeManCont() const {
  return m_TsnBridgeManCont;
}
void SmPolicyDecision::setTsnBridgeManCont(
    oai::model::pcf::BridgeManagementContainer const& value) {
  m_TsnBridgeManCont      = value;
  m_TsnBridgeManContIsSet = true;
}
bool SmPolicyDecision::tsnBridgeManContIsSet() const {
  return m_TsnBridgeManContIsSet;
}
void SmPolicyDecision::unsetTsnBridgeManCont() {
  m_TsnBridgeManContIsSet = false;
}
oai::model::pcf::PortManagementContainer
SmPolicyDecision::getTsnPortManContDstt() const {
  return m_TsnPortManContDstt;
}
void SmPolicyDecision::setTsnPortManContDstt(
    oai::model::pcf::PortManagementContainer const& value) {
  m_TsnPortManContDstt      = value;
  m_TsnPortManContDsttIsSet = true;
}
bool SmPolicyDecision::tsnPortManContDsttIsSet() const {
  return m_TsnPortManContDsttIsSet;
}
void SmPolicyDecision::unsetTsnPortManContDstt() {
  m_TsnPortManContDsttIsSet = false;
}
std::vector<oai::model::pcf::PortManagementContainer>
SmPolicyDecision::getTsnPortManContNwtts() const {
  return m_TsnPortManContNwtts;
}
void SmPolicyDecision::setTsnPortManContNwtts(
    std::vector<oai::model::pcf::PortManagementContainer> const& value) {
  m_TsnPortManContNwtts      = value;
  m_TsnPortManContNwttsIsSet = true;
}
bool SmPolicyDecision::tsnPortManContNwttsIsSet() const {
  return m_TsnPortManContNwttsIsSet;
}
void SmPolicyDecision::unsetTsnPortManContNwtts() {
  m_TsnPortManContNwttsIsSet = false;
}
bool SmPolicyDecision::isRedSessIndication() const {
  return m_RedSessIndication;
}
void SmPolicyDecision::setRedSessIndication(bool const value) {
  m_RedSessIndication      = value;
  m_RedSessIndicationIsSet = true;
}
bool SmPolicyDecision::redSessIndicationIsSet() const {
  return m_RedSessIndicationIsSet;
}
void SmPolicyDecision::unsetRedSessIndication() {
  m_RedSessIndicationIsSet = false;
}

std::ostream& operator<<(
    std::ostream& os, const oai::model::pcf::SmPolicyDecision& decision) {
  os << "PCC Rule IDs: ";
  std::string ids;
  for (const auto& rule : decision.getPccRules()) {
    ids.append(rule.first);
    ids.append(", ");
  }
  if (ids.length() > 1) {
    ids = ids.substr(0, ids.size() - 2);
  }

  os << ids << "\n";

  return os;
}

}  // namespace oai::model::pcf
