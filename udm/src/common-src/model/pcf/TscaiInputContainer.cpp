/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "TscaiInputContainer.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::pcf {

TscaiInputContainer::TscaiInputContainer() {
  m_Periodicity           = 0;
  m_PeriodicityIsSet      = false;
  m_BurstArrivalTime      = "";
  m_BurstArrivalTimeIsSet = false;
}

void TscaiInputContainer::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool TscaiInputContainer::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool TscaiInputContainer::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "TscaiInputContainer" : pathPrefix;

  if (periodicityIsSet()) {
    const int32_t& value               = m_Periodicity;
    const std::string currentValuePath = _pathPrefix + ".periodicity";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  return success;
}

bool TscaiInputContainer::operator==(const TscaiInputContainer& rhs) const {
  return

      ((!periodicityIsSet() && !rhs.periodicityIsSet()) ||
       (periodicityIsSet() && rhs.periodicityIsSet() &&
        getPeriodicity() == rhs.getPeriodicity())) &&

      ((!burstArrivalTimeIsSet() && !rhs.burstArrivalTimeIsSet()) ||
       (burstArrivalTimeIsSet() && rhs.burstArrivalTimeIsSet() &&
        getBurstArrivalTime() == rhs.getBurstArrivalTime()))

          ;
}

bool TscaiInputContainer::operator!=(const TscaiInputContainer& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TscaiInputContainer& o) {
  j = nlohmann::json();
  if (o.periodicityIsSet()) j["periodicity"] = o.m_Periodicity;
  if (o.burstArrivalTimeIsSet()) j["burstArrivalTime"] = o.m_BurstArrivalTime;
}

void from_json(const nlohmann::json& j, TscaiInputContainer& o) {
  if (j.find("periodicity") != j.end()) {
    j.at("periodicity").get_to(o.m_Periodicity);
    o.m_PeriodicityIsSet = true;
  }
  if (j.find("burstArrivalTime") != j.end()) {
    j.at("burstArrivalTime").get_to(o.m_BurstArrivalTime);
    o.m_BurstArrivalTimeIsSet = true;
  }
}

int32_t TscaiInputContainer::getPeriodicity() const {
  return m_Periodicity;
}
void TscaiInputContainer::setPeriodicity(int32_t const value) {
  m_Periodicity      = value;
  m_PeriodicityIsSet = true;
}
bool TscaiInputContainer::periodicityIsSet() const {
  return m_PeriodicityIsSet;
}
void TscaiInputContainer::unsetPeriodicity() {
  m_PeriodicityIsSet = false;
}
std::string TscaiInputContainer::getBurstArrivalTime() const {
  return m_BurstArrivalTime;
}
void TscaiInputContainer::setBurstArrivalTime(std::string const& value) {
  m_BurstArrivalTime      = value;
  m_BurstArrivalTimeIsSet = true;
}
bool TscaiInputContainer::burstArrivalTimeIsSet() const {
  return m_BurstArrivalTimeIsSet;
}
void TscaiInputContainer::unsetBurstArrivalTime() {
  m_BurstArrivalTimeIsSet = false;
}

}  // namespace oai::model::pcf
