/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AnGwAddress.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::pcf {
using namespace oai::model::common;

AnGwAddress::AnGwAddress() {
  m_AnGwIpv4Addr      = "";
  m_AnGwIpv4AddrIsSet = false;
  m_AnGwIpv6AddrIsSet = false;
}

void AnGwAddress::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool AnGwAddress::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool AnGwAddress::validate(
    std::stringstream& /* msg */, const std::string& /* pathPrefix */) const {
  bool success = true;
  /*
  const std::string _pathPrefix =
      pathPrefix.empty() ? "AnGwAddress" : pathPrefix;

  if (anGwIpv4AddrIsSet()) {
    const std::string& value           = m_AnGwIpv4Addr;
    const std::string currentValuePath = _pathPrefix + ".anGwIpv4Addr";
  }
  */
  return success;
}

bool AnGwAddress::operator==(const AnGwAddress& rhs) const {
  return

      ((!anGwIpv4AddrIsSet() && !rhs.anGwIpv4AddrIsSet()) ||
       (anGwIpv4AddrIsSet() && rhs.anGwIpv4AddrIsSet() &&
        getAnGwIpv4Addr() == rhs.getAnGwIpv4Addr())) &&

      ((!anGwIpv6AddrIsSet() && !rhs.anGwIpv6AddrIsSet()) ||
       (anGwIpv6AddrIsSet() && rhs.anGwIpv6AddrIsSet() &&
        getAnGwIpv6Addr() == rhs.getAnGwIpv6Addr()))

          ;
}

bool AnGwAddress::operator!=(const AnGwAddress& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AnGwAddress& o) {
  j = nlohmann::json();
  if (o.anGwIpv4AddrIsSet()) j["anGwIpv4Addr"] = o.m_AnGwIpv4Addr;
  if (o.anGwIpv6AddrIsSet()) j["anGwIpv6Addr"] = o.m_AnGwIpv6Addr;
}

void from_json(const nlohmann::json& j, AnGwAddress& o) {
  if (j.find("anGwIpv4Addr") != j.end()) {
    j.at("anGwIpv4Addr").get_to(o.m_AnGwIpv4Addr);
    o.m_AnGwIpv4AddrIsSet = true;
  }
  if (j.find("anGwIpv6Addr") != j.end()) {
    j.at("anGwIpv6Addr").get_to(o.m_AnGwIpv6Addr);
    o.m_AnGwIpv6AddrIsSet = true;
  }
}

std::string AnGwAddress::getAnGwIpv4Addr() const {
  return m_AnGwIpv4Addr;
}
void AnGwAddress::setAnGwIpv4Addr(std::string const& value) {
  m_AnGwIpv4Addr      = value;
  m_AnGwIpv4AddrIsSet = true;
}
bool AnGwAddress::anGwIpv4AddrIsSet() const {
  return m_AnGwIpv4AddrIsSet;
}
void AnGwAddress::unsetAnGwIpv4Addr() {
  m_AnGwIpv4AddrIsSet = false;
}
Ipv6Addr AnGwAddress::getAnGwIpv6Addr() const {
  return m_AnGwIpv6Addr;
}
void AnGwAddress::setAnGwIpv6Addr(Ipv6Addr const& value) {
  m_AnGwIpv6Addr      = value;
  m_AnGwIpv6AddrIsSet = true;
}
bool AnGwAddress::anGwIpv6AddrIsSet() const {
  return m_AnGwIpv6AddrIsSet;
}
void AnGwAddress::unsetAnGwIpv6Addr() {
  m_AnGwIpv6AddrIsSet = false;
}

}  // namespace oai::model::pcf
