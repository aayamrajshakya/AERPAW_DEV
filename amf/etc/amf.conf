################################################################################
# Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The OpenAirInterface Software Alliance licenses this file to You under
# the OAI Public License, Version 1.1  (the "License"); you may not use this file
# except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.openairinterface.org/?page_id=698
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the OpenAirInterface (OAI) Software Alliance:
#      contact@openairinterface.org
################################################################################

#### This file is a jinja2 template all the values between double curly brace will be replaced with environment variables

AMF =
{
  INSTANCE_ID = {{ env["INSTANCE"] if "INSTANCE" in env.keys() else 0 }} ;            # 0 is the default
  PID_DIRECTORY = "{{ env["PID_DIRECTORY"] if "PID_DIRECTORY" in env.keys() else '/var/run' }}";   # /var/run is the default

  AMF_NAME = "OAI-AMF";
  LOG_LEVEL = "{{ env["LOG_LEVEL"] if "LOG_LEVEL" in env.keys() else 'debug' }}";

  RELATIVE_CAPACITY = 30;
  # Display statistics about whole system (in seconds)
  STATISTICS_TIMER_INTERVAL = 20;

  CORE_CONFIGURATION:
  {
    EMERGENCY_SUPPORT = "false";
  };

  GUAMI:
  {
    MCC = "{{ env["MCC"] }}"; MNC = "{{ env["MNC"] }}"; RegionID = "{{ env["REGION_ID"] }}"; AMFSetID = "{{ env["AMF_SET_ID"] }}"; AMFPointer = "1"
  }

  SERVED_GUAMI_LIST = (
    {MCC = "{{ env["SERVED_GUAMI_MCC_0"] }}"; MNC = "{{ env["SERVED_GUAMI_MNC_0"] }}"; RegionID = "{{ env["SERVED_GUAMI_REGION_ID_0"] }}"; AMFSetID = "{{ env["SERVED_GUAMI_AMF_SET_ID_0"] }}"; AMFPointer = "0"}
    #48bits <MCC><MNC><RegionID><AMFSetID><AMFPointer>
  );

  PLMN_SUPPORT_LIST = ({
    MCC = "{{ env["PLMN_SUPPORT_MCC"] }}"; MNC = "{{ env["PLMN_SUPPORT_MNC"] }}"; TAC = {{ env["PLMN_SUPPORT_TAC"] }};
    SLICE_SUPPORT_LIST = (
      {SST = {{ env["SST_0"] }}; SD = "{{ env["SD_0"] if "SD_0" in env.keys() else '0xFFFFFF' }}"}
      {% if "SST_1" in env.keys() %},{SST = {{ env["SST_1"] }};SD = "{{ env["SD_1"] if "SD_1" in env.keys() else '0xFFFFFF' }}"}{% endif %}
      {% if "SST_2" in env.keys() %},{SST = {{ env["SST_2"] }};SD = "{{ env["SD_2"] if "SD_2" in env.keys() else '0xFFFFFF' }}"}{% endif %}
     )
  });

  INTERFACES:
  {
    # AMF binded interface for N1/N2 interface (NGAP)
    NGAP_AMF:
    {
      INTERFACE_NAME = "{{ env["AMF_INTERFACE_NAME_FOR_NGAP"] }}";
      IPV4_ADDRESS   = "read";
      PORT           = 38412;
      PPID           = 60;
    };

    # AMF binded interface for SBI (N11 (SMF)/N12 (AUSF), etc.)
    SBI:
    {
      INTERFACE_NAME = "{{ env["AMF_INTERFACE_NAME_FOR_N11"] }}";
      IPV4_ADDRESS   = "read";
      # default is 80
      PORT           = {{ env["AMF_INTERFACE_PORT_FOR_N11"] if "AMF_INTERFACE_PORT_FOR_N11" in env.keys() else '80' }};
      # default is v1
      API_VERSION    = "{{ env["AMF_API_VERSION"] if "AMF_API_VERSION" in env.keys() else 'v1' }}";
      # default is 8080
      HTTP2_PORT     = {{ env["AMF_INTERFACE_HTT2_PORT_FOR_N11"] if "AMF_INTERFACE_HTT2_PORT_FOR_N11" in env.keys() else '8080' }};

      SMF_INSTANCES_POOL = (
        {SMF_INSTANCE_ID = 1; IPV4_ADDRESS = "{{ env["SMF_IPV4_ADDR_0"] if "SMF_IPV4_ADDR_0" in env.keys() else '0.0.0.0' }}"; PORT = "80"; HTTP2_PORT = 8080, VERSION = "{{ env["SMF_HTTP_VERSION"] if "SMF_HTTP_VERSION" in env.keys() else 'v1' }}"; FQDN = "{{ env["SMF_FQDN_0"] if "SMF_FQDN_0" in env.keys() else 'localhost' }}", SELECTED = "{{ env["SELECTED_0"] }}"}
      );
    };

    NRF :
    {
      IPV4_ADDRESS = "{{ env["NRF_IPV4_ADDRESS"] if "NRF_IPV4_ADDRESS" in env.keys() else '0.0.0.0' }}";
      PORT         = {{ env["NRF_PORT"] if "NRF_PORT" in env.keys() else 80 }};            # Default: 80
      API_VERSION  = "{{ env["NRF_API_VERSION"] if "NRF_API_VERSION" in env.keys() else 'v1' }}";
      FQDN         = "{{ env["NRF_FQDN"] if "NRF_FQDN" in env.keys() else 'localhost' }}"
    };

    AUSF :
    {
      IPV4_ADDRESS = "{{ env["AUSF_IPV4_ADDRESS"] if "AUSF_IPV4_ADDRESS" in env.keys() else '0.0.0.0' }}";
      PORT         = {{ env["AUSF_PORT"] if "AUSF_PORT" in env.keys() else 80 }};            # Default: 80
      API_VERSION  = "{{ env["AUSF_API_VERSION"] if "AUSF_API_VERSION" in env.keys() else 'v1' }}";
      FQDN         = "{{ env["AUSF_FQDN"] if "AUSF_FQDN" in env.keys() else 'localhost' }}"
    };

    UDM :
    {
      IPV4_ADDRESS = "{{ env["UDM_IPV4_ADDRESS"] if "UDM_IPV4_ADDRESS" in env.keys() else '0.0.0.0' }}";
      PORT         = {{ env["UDM_PORT"] if "UDM_PORT" in env.keys() else 80 }};    # Default: 80
      API_VERSION  = "{{ env["UDM_API_VERSION"] if "UDM_API_VERSION" in env.keys() else 'v2' }}";
      FQDN         = "{{ env["UDM_FQDN"] if "UDM_FQDN" in env.keys() else 'localhost' }}"
    };

    LMF :
    {
      IPV4_ADDRESS ="{{ env["LMF_IPV4_ADDRESS"] if "LMF_IPV4_ADDRESS" in env.keys() else '0.0.0.0' }}";
      PORT         = {{ env["LMF_PORT"] if "LMF_PORT" in env.keys() else 80 }};    # Default: 80
      API_VERSION  = "{{ env["LMF_API_VERSION"] if "LMF_API_VERSION" in env.keys() else 'v2' }}";
      FQDN         = "{{ env["LMF_FQDN"] if "LMF_FQDN" in env.keys() else 'localhost' }}"
    };

    NSSF :
    {
      IPV4_ADDRESS = "{{ env["NSSF_HOST"] if "NSSF_HOST" in env.keys() else '0.0.0.0' }}";
      PORT         = {{ env["NSSF_PORT"] if "NSSF_PORT" in env.keys() else 80 }};            # Default: 80
      API_VERSION  = "{{ env["NSSF_API_VERSION"] if "NSSF_API_VERSION" in env.keys() else 'v2' }}";
      FQDN         = "{{ env["NSSF_FQDN"] if "NSSF_FQDN" in env.keys() else 'oai-nssf' }}"
    };

  };

  SUPPORT_FEATURES:
  {
     # STRING, {"yes", "no"},
     NF_REGISTRATION = "{{ env["NF_REGISTRATION"] if "NF_REGISTRATION" in env.keys() else 'no' }}";  # Set to yes if AMF registers to an NRF
     NRF_SELECTION   = "{{ env["NRF_SELECTION"] if "NRF_SELECTION" in env.keys() else 'no' }}";    # Set to yes to enable NRF discovery and selection
     EXTERNAL_NRF    = "{{ env["EXTERNAL_NRF"] if "EXTERNAL_NRF" in env.keys() else 'no' }}";     # Set to yes if AMF works with an external NRF
     SMF_SELECTION   = "{{ env["SMF_SELECTION"] if "SMF_SELECTION" in env.keys() else 'no' }}";    # Set to yes to enable SMF discovery and selection
     EXTERNAL_AUSF   = "{{ env["EXTERNAL_AUSF"] if "EXTERNAL_AUSF" in env.keys() else 'no' }}";    # Set to yes if AMF works with an external AUSF
     EXTERNAL_UDM    = "{{ env["EXTERNAL_UDM"] if "EXTERNAL_UDM" in env.keys() else 'no' }}";     # Set to yes if AMF works with an external UDM
     EXTERNAL_LMF    = "{{ env["EXTERNAL_LMF"] if "EXTERNAL_LMF" in env.keys() else 'no' }}";     # Set to yes if AMF works with an external LMF
     EXTERNAL_NSSF   = "{{ env["EXTERNAL_NSSF"] if "EXTERNAL_NSSF" in env.keys() else 'no' }}";    # Set to yes if AMF works with an external NSSF
     USE_FQDN_DNS    = "{{ env["USE_FQDN_DNS"] if "USE_FQDN_DNS" in env.keys() else 'no' }}";   # Set to yes if AMF relies on a DNS to resolve NRF/SMF/UDM/AUSF's FQDN
     USE_HTTP2       = "{{ env["USE_HTTP2"] if "USE_HTTP2" in env.keys() else 'no' }}";        # Set to yes to enable HTTP2 for AMF server
  }

  AUTHENTICATION:
  {
    ## MySQL mandatory options
    MYSQL_server = "{{ env["MYSQL_SERVER"] if "MYSQL_SERVER" in env.keys() else 'mysql' }}"; # MySQL Server address
    MYSQL_user   = "{{ env["MYSQL_USER"] if "MYSQL_USER" in env.keys() else 'test' }}";   # Database server login
    MYSQL_pass   = "{{ env["MYSQL_PASS"] if "MYSQL_PASS" in env.keys() else 'test' }}";   # Database server password
    MYSQL_db     = "{{ env["MYSQL_DB"] if "MYSQL_DB" in env.keys() else 'oai_db' }}";     # Your database name
    RANDOM = "true";
  };

  NAS:
  {
    ORDERED_SUPPORTED_INTEGRITY_ALGORITHM_LIST = {{ env["INT_ALGO_LIST"] if "INT_ALGO_LIST" in env.keys() else [ "NIA0" , "NIA1" , "NIA2" ] | tojson }} ;
    ORDERED_SUPPORTED_CIPHERING_ALGORITHM_LIST = {{ env["CIPH_ALGO_LIST"] if "CIPH_ALGO_LIST" in env.keys() else [ "NEA0" , "NEA1" , "NEA2" ] | tojson }} ;
  };
};
