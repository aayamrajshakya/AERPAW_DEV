/**
 * Namf_Communication
 * AMF Communication Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.8
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "N2InfoContainer.h"
#include "Helpers.h"

#include <sstream>

namespace oai::amf::model {

N2InfoContainer::N2InfoContainer() {
  m_SmInfoIsSet    = false;
  m_RanInfoIsSet   = false;
  m_NrppaInfoIsSet = false;
  m_PwsInfoIsSet   = false;
  m_V2xInfoIsSet   = false;
}

void N2InfoContainer::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool N2InfoContainer::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool N2InfoContainer::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "N2InfoContainer" : pathPrefix;

  return success;
}

bool N2InfoContainer::operator==(const N2InfoContainer& rhs) const {
  return

      (getN2InformationClass() == rhs.getN2InformationClass()) &&

      ((!smInfoIsSet() && !rhs.smInfoIsSet()) ||
       (smInfoIsSet() && rhs.smInfoIsSet() &&
        getSmInfo() == rhs.getSmInfo())) &&

      ((!ranInfoIsSet() && !rhs.ranInfoIsSet()) ||
       (ranInfoIsSet() && rhs.ranInfoIsSet() &&
        getRanInfo() == rhs.getRanInfo())) &&

      ((!nrppaInfoIsSet() && !rhs.nrppaInfoIsSet()) ||
       (nrppaInfoIsSet() && rhs.nrppaInfoIsSet() &&
        getNrppaInfo() == rhs.getNrppaInfo())) &&

      ((!pwsInfoIsSet() && !rhs.pwsInfoIsSet()) ||
       (pwsInfoIsSet() && rhs.pwsInfoIsSet() &&
        getPwsInfo() == rhs.getPwsInfo())) &&

      ((!v2xInfoIsSet() && !rhs.v2xInfoIsSet()) ||
       (v2xInfoIsSet() && rhs.v2xInfoIsSet() &&
        getV2xInfo() == rhs.getV2xInfo()))

          ;
}

bool N2InfoContainer::operator!=(const N2InfoContainer& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const N2InfoContainer& o) {
  j                       = nlohmann::json();
  j["n2InformationClass"] = o.m_N2InformationClass;
  if (o.smInfoIsSet()) j["smInfo"] = o.m_SmInfo;
  if (o.ranInfoIsSet()) j["ranInfo"] = o.m_RanInfo;
  if (o.nrppaInfoIsSet()) j["nrppaInfo"] = o.m_NrppaInfo;
  if (o.pwsInfoIsSet()) j["pwsInfo"] = o.m_PwsInfo;
  if (o.v2xInfoIsSet()) j["v2xInfo"] = o.m_V2xInfo;
}

void from_json(const nlohmann::json& j, N2InfoContainer& o) {
  j.at("n2InformationClass").get_to(o.m_N2InformationClass);
  if (j.find("smInfo") != j.end()) {
    j.at("smInfo").get_to(o.m_SmInfo);
    o.m_SmInfoIsSet = true;
  }
  if (j.find("ranInfo") != j.end()) {
    j.at("ranInfo").get_to(o.m_RanInfo);
    o.m_RanInfoIsSet = true;
  }
  if (j.find("nrppaInfo") != j.end()) {
    j.at("nrppaInfo").get_to(o.m_NrppaInfo);
    o.m_NrppaInfoIsSet = true;
  }
  if (j.find("pwsInfo") != j.end()) {
    j.at("pwsInfo").get_to(o.m_PwsInfo);
    o.m_PwsInfoIsSet = true;
  }
  if (j.find("v2xInfo") != j.end()) {
    j.at("v2xInfo").get_to(o.m_V2xInfo);
    o.m_V2xInfoIsSet = true;
  }
}

oai::amf::model::N2InformationClass N2InfoContainer::getN2InformationClass()
    const {
  return m_N2InformationClass;
}
void N2InfoContainer::setN2InformationClass(
    oai::amf::model::N2InformationClass const& value) {
  m_N2InformationClass = value;
}
oai::amf::model::N2SmInformation N2InfoContainer::getSmInfo() const {
  return m_SmInfo;
}
void N2InfoContainer::setSmInfo(oai::amf::model::N2SmInformation const& value) {
  m_SmInfo      = value;
  m_SmInfoIsSet = true;
}
bool N2InfoContainer::smInfoIsSet() const {
  return m_SmInfoIsSet;
}
void N2InfoContainer::unsetSmInfo() {
  m_SmInfoIsSet = false;
}
oai::amf::model::N2RanInformation N2InfoContainer::getRanInfo() const {
  return m_RanInfo;
}
void N2InfoContainer::setRanInfo(
    oai::amf::model::N2RanInformation const& value) {
  m_RanInfo      = value;
  m_RanInfoIsSet = true;
}
bool N2InfoContainer::ranInfoIsSet() const {
  return m_RanInfoIsSet;
}
void N2InfoContainer::unsetRanInfo() {
  m_RanInfoIsSet = false;
}
oai::amf::model::NrppaInformation N2InfoContainer::getNrppaInfo() const {
  return m_NrppaInfo;
}
void N2InfoContainer::setNrppaInfo(
    oai::amf::model::NrppaInformation const& value) {
  m_NrppaInfo      = value;
  m_NrppaInfoIsSet = true;
}
bool N2InfoContainer::nrppaInfoIsSet() const {
  return m_NrppaInfoIsSet;
}
void N2InfoContainer::unsetNrppaInfo() {
  m_NrppaInfoIsSet = false;
}
oai::amf::model::PwsInformation N2InfoContainer::getPwsInfo() const {
  return m_PwsInfo;
}
void N2InfoContainer::setPwsInfo(oai::amf::model::PwsInformation const& value) {
  m_PwsInfo      = value;
  m_PwsInfoIsSet = true;
}
bool N2InfoContainer::pwsInfoIsSet() const {
  return m_PwsInfoIsSet;
}
void N2InfoContainer::unsetPwsInfo() {
  m_PwsInfoIsSet = false;
}
oai::amf::model::V2xInformation N2InfoContainer::getV2xInfo() const {
  return m_V2xInfo;
}
void N2InfoContainer::setV2xInfo(oai::amf::model::V2xInformation const& value) {
  m_V2xInfo      = value;
  m_V2xInfoIsSet = true;
}
bool N2InfoContainer::v2xInfoIsSet() const {
  return m_V2xInfoIsSet;
}
void N2InfoContainer::unsetV2xInfo() {
  m_V2xInfoIsSet = false;
}

}  // namespace oai::amf::model
