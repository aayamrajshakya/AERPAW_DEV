/**
 * Namf_Communication
 * AMF Communication Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.8
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "N1MessageClass_anyOf.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace oai::amf::model {

N1MessageClass_anyOf::N1MessageClass_anyOf() {}

void N1MessageClass_anyOf::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool N1MessageClass_anyOf::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool N1MessageClass_anyOf::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "N1MessageClass_anyOf" : pathPrefix;

  if (m_value == N1MessageClass_anyOf::eN1MessageClass_anyOf::
                     INVALID_VALUE_OPENAPI_GENERATED) {
    success = false;
    msg << _pathPrefix << ": has no value;";
  }

  return success;
}

bool N1MessageClass_anyOf::operator==(const N1MessageClass_anyOf& rhs) const {
  return getValue() == rhs.getValue()

      ;
}

bool N1MessageClass_anyOf::operator!=(const N1MessageClass_anyOf& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const N1MessageClass_anyOf& o) {
  j = nlohmann::json();

  switch (o.getValue()) {
    case N1MessageClass_anyOf::eN1MessageClass_anyOf::
        INVALID_VALUE_OPENAPI_GENERATED:
      j = "INVALID_VALUE_OPENAPI_GENERATED";
      break;
    case N1MessageClass_anyOf::eN1MessageClass_anyOf::_5GMM:
      j = "5GMM";
      break;
    case N1MessageClass_anyOf::eN1MessageClass_anyOf::SM:
      j = "SM";
      break;
    case N1MessageClass_anyOf::eN1MessageClass_anyOf::LPP:
      j = "LPP";
      break;
    case N1MessageClass_anyOf::eN1MessageClass_anyOf::SMS:
      j = "SMS";
      break;
    case N1MessageClass_anyOf::eN1MessageClass_anyOf::UPDP:
      j = "UPDP";
      break;
    case N1MessageClass_anyOf::eN1MessageClass_anyOf::LCS:
      j = "LCS";
      break;
  }
}

void from_json(const nlohmann::json& j, N1MessageClass_anyOf& o) {
  auto s = j.get<std::string>();
  if (s == "5GMM") {
    o.setValue(N1MessageClass_anyOf::eN1MessageClass_anyOf::_5GMM);
  } else if (s == "SM") {
    o.setValue(N1MessageClass_anyOf::eN1MessageClass_anyOf::SM);
  } else if (s == "LPP") {
    o.setValue(N1MessageClass_anyOf::eN1MessageClass_anyOf::LPP);
  } else if (s == "SMS") {
    o.setValue(N1MessageClass_anyOf::eN1MessageClass_anyOf::SMS);
  } else if (s == "UPDP") {
    o.setValue(N1MessageClass_anyOf::eN1MessageClass_anyOf::UPDP);
  } else if (s == "LCS") {
    o.setValue(N1MessageClass_anyOf::eN1MessageClass_anyOf::LCS);
  } else {
    std::stringstream ss;
    ss << "Unexpected value " << s << " in json"
       << " cannot be converted to enum of type"
       << " N1MessageClass_anyOf::eN1MessageClass_anyOf";
    throw std::invalid_argument(ss.str());
  }
}

N1MessageClass_anyOf::eN1MessageClass_anyOf N1MessageClass_anyOf::getValue()
    const {
  return m_value;
}
void N1MessageClass_anyOf::setValue(
    N1MessageClass_anyOf::eN1MessageClass_anyOf value) {
  m_value = value;
}

}  // namespace oai::amf::model
