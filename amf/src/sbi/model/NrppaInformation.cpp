/**
 * Namf_Communication
 * AMF Communication Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.8
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NrppaInformation.h"
#include "Helpers.h"

#include <sstream>

namespace oai::amf::model {

NrppaInformation::NrppaInformation() {
  m_NfId                   = "";
  m_ServiceInstanceId      = "";
  m_ServiceInstanceIdIsSet = false;
}

void NrppaInformation::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool NrppaInformation::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool NrppaInformation::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "NrppaInformation" : pathPrefix;

  return success;
}

bool NrppaInformation::operator==(const NrppaInformation& rhs) const {
  return

      (getNfId() == rhs.getNfId()) &&

      (getNrppaPdu() == rhs.getNrppaPdu()) &&

      ((!serviceInstanceIdIsSet() && !rhs.serviceInstanceIdIsSet()) ||
       (serviceInstanceIdIsSet() && rhs.serviceInstanceIdIsSet() &&
        getServiceInstanceId() == rhs.getServiceInstanceId()))

          ;
}

bool NrppaInformation::operator!=(const NrppaInformation& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const NrppaInformation& o) {
  j             = nlohmann::json();
  j["nfId"]     = o.m_NfId;
  j["nrppaPdu"] = o.m_NrppaPdu;
  if (o.serviceInstanceIdIsSet())
    j["serviceInstanceId"] = o.m_ServiceInstanceId;
}

void from_json(const nlohmann::json& j, NrppaInformation& o) {
  j.at("nfId").get_to(o.m_NfId);
  j.at("nrppaPdu").get_to(o.m_NrppaPdu);
  if (j.find("serviceInstanceId") != j.end()) {
    j.at("serviceInstanceId").get_to(o.m_ServiceInstanceId);
    o.m_ServiceInstanceIdIsSet = true;
  }
}

std::string NrppaInformation::getNfId() const {
  return m_NfId;
}
void NrppaInformation::setNfId(std::string const& value) {
  m_NfId = value;
}
oai::amf::model::N2InfoContent NrppaInformation::getNrppaPdu() const {
  return m_NrppaPdu;
}
void NrppaInformation::setNrppaPdu(
    oai::amf::model::N2InfoContent const& value) {
  m_NrppaPdu = value;
}
std::string NrppaInformation::getServiceInstanceId() const {
  return m_ServiceInstanceId;
}
void NrppaInformation::setServiceInstanceId(std::string const& value) {
  m_ServiceInstanceId      = value;
  m_ServiceInstanceIdIsSet = true;
}
bool NrppaInformation::serviceInstanceIdIsSet() const {
  return m_ServiceInstanceIdIsSet;
}
void NrppaInformation::unsetServiceInstanceId() {
  m_ServiceInstanceIdIsSet = false;
}

}  // namespace oai::amf::model
