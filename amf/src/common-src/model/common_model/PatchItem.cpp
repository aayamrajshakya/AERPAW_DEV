/**
 * Common Data Types
 * Common Data Types for Service Based Interfaces. Â© 2022, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PatchItem.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::common {

PatchItem::PatchItem() {
  m_Path       = "";
  m_From       = "";
  m_FromIsSet  = false;
  m_ValueIsSet = false;
}

void PatchItem::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool PatchItem::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool PatchItem::validate(
    std::stringstream& /* msg */, const std::string& pathPrefix) const {
  bool success                  = true;
  const std::string _pathPrefix = pathPrefix.empty() ? "PatchItem" : pathPrefix;

  return success;
}

bool PatchItem::operator==(const PatchItem& rhs) const {
  return

      (getOp() == rhs.getOp()) &&

      (getPath() == rhs.getPath()) &&

      ((!fromIsSet() && !rhs.fromIsSet()) ||
       (fromIsSet() && rhs.fromIsSet() && getFrom() == rhs.getFrom())) &&

      ((!valueIsSet() && !rhs.valueIsSet()) ||
       (valueIsSet() && rhs.valueIsSet() && getValue() == rhs.getValue()))

          ;
}

bool PatchItem::operator!=(const PatchItem& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PatchItem& o) {
  j         = nlohmann::json();
  j["op"]   = o.m_Op;
  j["path"] = o.m_Path;
  if (o.fromIsSet()) j["from"] = o.m_From;
  if (o.valueIsSet()) j["value"] = o.m_Value;
}

void from_json(const nlohmann::json& j, PatchItem& o) {
  j.at("op").get_to(o.m_Op);
  j.at("path").get_to(o.m_Path);
  if (j.find("from") != j.end()) {
    j.at("from").get_to(o.m_From);
    o.m_FromIsSet = true;
  }
  if (j.find("value") != j.end()) {
    j.at("value").get_to(o.m_Value);
    o.m_ValueIsSet = true;
  }
}

oai::model::common::PatchOperation PatchItem::getOp() const {
  return m_Op;
}
void PatchItem::setOp(oai::model::common::PatchOperation const& value) {
  m_Op = value;
}
std::string PatchItem::getPath() const {
  return m_Path;
}
void PatchItem::setPath(std::string const& value) {
  m_Path = value;
}
std::string PatchItem::getFrom() const {
  return m_From;
}
void PatchItem::setFrom(std::string const& value) {
  m_From      = value;
  m_FromIsSet = true;
}
bool PatchItem::fromIsSet() const {
  return m_FromIsSet;
}
void PatchItem::unsetFrom() {
  m_FromIsSet = false;
}
std::string PatchItem::getValue() const {
  return m_Value;
}
void PatchItem::setValue(std::string const& value) {
  m_Value      = value;
  m_ValueIsSet = true;
}
bool PatchItem::valueIsSet() const {
  return m_ValueIsSet;
}
void PatchItem::unsetValue() {
  m_ValueIsSet = false;
}

}  // namespace oai::model::common
