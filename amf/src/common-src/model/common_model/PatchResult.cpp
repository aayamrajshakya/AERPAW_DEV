/**
 * Common Data Types
 * Common Data Types for Service Based Interfaces. Â© 2022, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PatchResult.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::common {

PatchResult::PatchResult() {}

void PatchResult::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool PatchResult::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool PatchResult::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "PatchResult" : pathPrefix;

  /* Report */ {
    const std::vector<oai::model::common::ReportItem>& value = m_Report;
    const std::string currentValuePath = _pathPrefix + ".report";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const oai::model::common::ReportItem& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".report") && success;

        i++;
      }
    }
  }

  return success;
}

bool PatchResult::operator==(const PatchResult& rhs) const {
  return

      (getReport() == rhs.getReport())

          ;
}

bool PatchResult::operator!=(const PatchResult& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PatchResult& o) {
  j           = nlohmann::json();
  j["report"] = o.m_Report;
}

void from_json(const nlohmann::json& j, PatchResult& o) {
  j.at("report").get_to(o.m_Report);
}

std::vector<oai::model::common::ReportItem> PatchResult::getReport() const {
  return m_Report;
}
void PatchResult::setReport(
    std::vector<oai::model::common::ReportItem> const& value) {
  m_Report = value;
}

}  // namespace oai::model::common
