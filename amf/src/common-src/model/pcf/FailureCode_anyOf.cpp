/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "FailureCode_anyOf.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace oai::model::pcf {

FailureCode_anyOf::FailureCode_anyOf() {}

void FailureCode_anyOf::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool FailureCode_anyOf::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool FailureCode_anyOf::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "FailureCode_anyOf" : pathPrefix;

  if (m_value ==
      FailureCode_anyOf::eFailureCode_anyOf::INVALID_VALUE_OPENAPI_GENERATED) {
    success = false;
    msg << _pathPrefix << ": has no value;";
  }

  return success;
}

bool FailureCode_anyOf::operator==(const FailureCode_anyOf& rhs) const {
  return getValue() == rhs.getValue()

      ;
}

bool FailureCode_anyOf::operator!=(const FailureCode_anyOf& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const FailureCode_anyOf& o) {
  j = nlohmann::json();

  switch (o.getValue()) {
    case FailureCode_anyOf::eFailureCode_anyOf::INVALID_VALUE_OPENAPI_GENERATED:
      j = "INVALID_VALUE_OPENAPI_GENERATED";
      break;
    case FailureCode_anyOf::eFailureCode_anyOf::UNK_RULE_ID:
      j = "UNK_RULE_ID";
      break;
    case FailureCode_anyOf::eFailureCode_anyOf::RA_GR_ERR:
      j = "RA_GR_ERR";
      break;
    case FailureCode_anyOf::eFailureCode_anyOf::SER_ID_ERR:
      j = "SER_ID_ERR";
      break;
    case FailureCode_anyOf::eFailureCode_anyOf::NF_MAL:
      j = "NF_MAL";
      break;
    case FailureCode_anyOf::eFailureCode_anyOf::RES_LIM:
      j = "RES_LIM";
      break;
    case FailureCode_anyOf::eFailureCode_anyOf::MAX_NR_QOS_FLOW:
      j = "MAX_NR_QoS_FLOW";
      break;
    case FailureCode_anyOf::eFailureCode_anyOf::MISS_FLOW_INFO:
      j = "MISS_FLOW_INFO";
      break;
    case FailureCode_anyOf::eFailureCode_anyOf::RES_ALLO_FAIL:
      j = "RES_ALLO_FAIL";
      break;
    case FailureCode_anyOf::eFailureCode_anyOf::UNSUCC_QOS_VAL:
      j = "UNSUCC_QOS_VAL";
      break;
    case FailureCode_anyOf::eFailureCode_anyOf::INCOR_FLOW_INFO:
      j = "INCOR_FLOW_INFO";
      break;
    case FailureCode_anyOf::eFailureCode_anyOf::PS_TO_CS_HAN:
      j = "PS_TO_CS_HAN";
      break;
    case FailureCode_anyOf::eFailureCode_anyOf::APP_ID_ERR:
      j = "APP_ID_ERR";
      break;
    case FailureCode_anyOf::eFailureCode_anyOf::NO_QOS_FLOW_BOUND:
      j = "NO_QOS_FLOW_BOUND";
      break;
    case FailureCode_anyOf::eFailureCode_anyOf::FILTER_RES:
      j = "FILTER_RES";
      break;
    case FailureCode_anyOf::eFailureCode_anyOf::MISS_REDI_SER_ADDR:
      j = "MISS_REDI_SER_ADDR";
      break;
    case FailureCode_anyOf::eFailureCode_anyOf::CM_END_USER_SER_DENIED:
      j = "CM_END_USER_SER_DENIED";
      break;
    case FailureCode_anyOf::eFailureCode_anyOf::CM_CREDIT_CON_NOT_APP:
      j = "CM_CREDIT_CON_NOT_APP";
      break;
    case FailureCode_anyOf::eFailureCode_anyOf::CM_AUTH_REJ:
      j = "CM_AUTH_REJ";
      break;
    case FailureCode_anyOf::eFailureCode_anyOf::CM_USER_UNK:
      j = "CM_USER_UNK";
      break;
    case FailureCode_anyOf::eFailureCode_anyOf::CM_RAT_FAILED:
      j = "CM_RAT_FAILED";
      break;
    case FailureCode_anyOf::eFailureCode_anyOf::UE_STA_SUSP:
      j = "UE_STA_SUSP";
      break;
  }
}

void from_json(const nlohmann::json& j, FailureCode_anyOf& o) {
  auto s = j.get<std::string>();
  if (s == "UNK_RULE_ID") {
    o.setValue(FailureCode_anyOf::eFailureCode_anyOf::UNK_RULE_ID);
  } else if (s == "RA_GR_ERR") {
    o.setValue(FailureCode_anyOf::eFailureCode_anyOf::RA_GR_ERR);
  } else if (s == "SER_ID_ERR") {
    o.setValue(FailureCode_anyOf::eFailureCode_anyOf::SER_ID_ERR);
  } else if (s == "NF_MAL") {
    o.setValue(FailureCode_anyOf::eFailureCode_anyOf::NF_MAL);
  } else if (s == "RES_LIM") {
    o.setValue(FailureCode_anyOf::eFailureCode_anyOf::RES_LIM);
  } else if (s == "MAX_NR_QoS_FLOW") {
    o.setValue(FailureCode_anyOf::eFailureCode_anyOf::MAX_NR_QOS_FLOW);
  } else if (s == "MISS_FLOW_INFO") {
    o.setValue(FailureCode_anyOf::eFailureCode_anyOf::MISS_FLOW_INFO);
  } else if (s == "RES_ALLO_FAIL") {
    o.setValue(FailureCode_anyOf::eFailureCode_anyOf::RES_ALLO_FAIL);
  } else if (s == "UNSUCC_QOS_VAL") {
    o.setValue(FailureCode_anyOf::eFailureCode_anyOf::UNSUCC_QOS_VAL);
  } else if (s == "INCOR_FLOW_INFO") {
    o.setValue(FailureCode_anyOf::eFailureCode_anyOf::INCOR_FLOW_INFO);
  } else if (s == "PS_TO_CS_HAN") {
    o.setValue(FailureCode_anyOf::eFailureCode_anyOf::PS_TO_CS_HAN);
  } else if (s == "APP_ID_ERR") {
    o.setValue(FailureCode_anyOf::eFailureCode_anyOf::APP_ID_ERR);
  } else if (s == "NO_QOS_FLOW_BOUND") {
    o.setValue(FailureCode_anyOf::eFailureCode_anyOf::NO_QOS_FLOW_BOUND);
  } else if (s == "FILTER_RES") {
    o.setValue(FailureCode_anyOf::eFailureCode_anyOf::FILTER_RES);
  } else if (s == "MISS_REDI_SER_ADDR") {
    o.setValue(FailureCode_anyOf::eFailureCode_anyOf::MISS_REDI_SER_ADDR);
  } else if (s == "CM_END_USER_SER_DENIED") {
    o.setValue(FailureCode_anyOf::eFailureCode_anyOf::CM_END_USER_SER_DENIED);
  } else if (s == "CM_CREDIT_CON_NOT_APP") {
    o.setValue(FailureCode_anyOf::eFailureCode_anyOf::CM_CREDIT_CON_NOT_APP);
  } else if (s == "CM_AUTH_REJ") {
    o.setValue(FailureCode_anyOf::eFailureCode_anyOf::CM_AUTH_REJ);
  } else if (s == "CM_USER_UNK") {
    o.setValue(FailureCode_anyOf::eFailureCode_anyOf::CM_USER_UNK);
  } else if (s == "CM_RAT_FAILED") {
    o.setValue(FailureCode_anyOf::eFailureCode_anyOf::CM_RAT_FAILED);
  } else if (s == "UE_STA_SUSP") {
    o.setValue(FailureCode_anyOf::eFailureCode_anyOf::UE_STA_SUSP);
  } else {
    std::stringstream ss;
    ss << "Unexpected value " << s << " in json"
       << " cannot be converted to enum of type"
       << " FailureCode_anyOf::eFailureCode_anyOf";
    throw std::invalid_argument(ss.str());
  }
}

FailureCode_anyOf::eFailureCode_anyOf FailureCode_anyOf::getValue() const {
  return m_value;
}
void FailureCode_anyOf::setValue(FailureCode_anyOf::eFailureCode_anyOf value) {
  m_value = value;
}

}  // namespace oai::model::pcf
