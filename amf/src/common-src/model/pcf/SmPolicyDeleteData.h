/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SmPolicyDeleteData.h
 *
 *
 */

#ifndef SmPolicyDeleteData_H_
#define SmPolicyDeleteData_H_

#include "PduSessionRelCause.h"
#include "PlmnIdNid.h"
#include <string>
#include "UserLocation.h"
#include "AccuUsageReport.h"
#include <vector>
#include "RanNasRelCause.h"
#include <nlohmann/json.hpp>

namespace oai::model::pcf {

/// <summary>
///
/// </summary>
class SmPolicyDeleteData {
 public:
  SmPolicyDeleteData();
  virtual ~SmPolicyDeleteData() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const SmPolicyDeleteData& rhs) const;
  bool operator!=(const SmPolicyDeleteData& rhs) const;

  /////////////////////////////////////////////
  /// SmPolicyDeleteData members

  /// <summary>
  ///
  /// </summary>
  oai::model::common::UserLocation getUserLocationInfo() const;
  void setUserLocationInfo(oai::model::common::UserLocation const& value);
  bool userLocationInfoIsSet() const;
  void unsetUserLocationInfo();
  /// <summary>
  ///
  /// </summary>
  std::string getUeTimeZone() const;
  void setUeTimeZone(std::string const& value);
  bool ueTimeZoneIsSet() const;
  void unsetUeTimeZone();
  /// <summary>
  ///
  /// </summary>
  oai::model::common::PlmnIdNid getServingNetwork() const;
  void setServingNetwork(oai::model::common::PlmnIdNid const& value);
  bool servingNetworkIsSet() const;
  void unsetServingNetwork();
  /// <summary>
  ///
  /// </summary>
  std::string getUserLocationInfoTime() const;
  void setUserLocationInfoTime(std::string const& value);
  bool userLocationInfoTimeIsSet() const;
  void unsetUserLocationInfoTime();
  /// <summary>
  /// Contains the RAN and/or NAS release cause.
  /// </summary>
  std::vector<oai::model::pcf::RanNasRelCause> getRanNasRelCauses() const;
  void setRanNasRelCauses(
      std::vector<oai::model::pcf::RanNasRelCause> const& value);
  bool ranNasRelCausesIsSet() const;
  void unsetRanNasRelCauses();
  /// <summary>
  /// Contains the usage report
  /// </summary>
  std::vector<oai::model::pcf::AccuUsageReport> getAccuUsageReports() const;
  void setAccuUsageReports(
      std::vector<oai::model::pcf::AccuUsageReport> const& value);
  bool accuUsageReportsIsSet() const;
  void unsetAccuUsageReports();
  /// <summary>
  ///
  /// </summary>
  oai::model::pcf::PduSessionRelCause getPduSessRelCause() const;
  void setPduSessRelCause(oai::model::pcf::PduSessionRelCause const& value);
  bool pduSessRelCauseIsSet() const;
  void unsetPduSessRelCause();

  friend void to_json(nlohmann::json& j, const SmPolicyDeleteData& o);
  friend void from_json(const nlohmann::json& j, SmPolicyDeleteData& o);

 protected:
  oai::model::common::UserLocation m_UserLocationInfo;
  bool m_UserLocationInfoIsSet;
  std::string m_UeTimeZone;
  bool m_UeTimeZoneIsSet;
  oai::model::common::PlmnIdNid m_ServingNetwork;
  bool m_ServingNetworkIsSet;
  std::string m_UserLocationInfoTime;
  bool m_UserLocationInfoTimeIsSet;
  std::vector<oai::model::pcf::RanNasRelCause> m_RanNasRelCauses;
  bool m_RanNasRelCausesIsSet;
  std::vector<oai::model::pcf::AccuUsageReport> m_AccuUsageReports;
  bool m_AccuUsageReportsIsSet;
  oai::model::pcf::PduSessionRelCause m_PduSessRelCause;
  bool m_PduSessRelCauseIsSet;
};

}  // namespace oai::model::pcf

#endif /* SmPolicyDeleteData_H_ */
