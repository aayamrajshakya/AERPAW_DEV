/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ChargingData.h
 *
 *
 */

#ifndef ChargingData_H_
#define ChargingData_H_

#include "ReportingLevel.h"
#include <string>
#include "MeteringMethod.h"
#include <nlohmann/json.hpp>

namespace oai::model::pcf {

/// <summary>
///
/// </summary>
class ChargingData {
 public:
  ChargingData();
  virtual ~ChargingData() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const ChargingData& rhs) const;
  bool operator!=(const ChargingData& rhs) const;

  /////////////////////////////////////////////
  /// ChargingData members

  /// <summary>
  /// Univocally identifies the charging control policy data within a PDU
  /// session.
  /// </summary>
  std::string getChgId() const;
  void setChgId(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  oai::model::pcf::MeteringMethod getMeteringMethod() const;
  void setMeteringMethod(oai::model::pcf::MeteringMethod const& value);
  bool meteringMethodIsSet() const;
  void unsetMeteringMethod();
  /// <summary>
  /// Indicates the offline charging is applicable to the PCC rule when it is
  /// included and set to true.
  /// </summary>
  bool isOffline() const;
  void setOffline(bool const value);
  bool offlineIsSet() const;
  void unsetOffline();
  /// <summary>
  /// Indicates the online charging is applicable to the PCC rule when it is
  /// included and set to true.
  /// </summary>
  bool isOnline() const;
  void setOnline(bool const value);
  bool onlineIsSet() const;
  void unsetOnline();
  /// <summary>
  /// Indicates whether the service data flow is allowed to start while the SMF
  /// is waiting for the response to the credit request.
  /// </summary>
  bool isSdfHandl() const;
  void setSdfHandl(bool const value);
  bool sdfHandlIsSet() const;
  void unsetSdfHandl();
  /// <summary>
  ///
  /// </summary>
  uint32_t getRatingGroup() const;
  void setRatingGroup(uint32_t const value);
  bool ratingGroupIsSet() const;
  void unsetRatingGroup();
  /// <summary>
  ///
  /// </summary>
  oai::model::pcf::ReportingLevel getReportingLevel() const;
  void setReportingLevel(oai::model::pcf::ReportingLevel const& value);
  bool reportingLevelIsSet() const;
  void unsetReportingLevel();
  /// <summary>
  ///
  /// </summary>
  uint32_t getServiceId() const;
  void setServiceId(uint32_t const value);
  bool serviceIdIsSet() const;
  void unsetServiceId();
  /// <summary>
  /// Indicates the sponsor identity.
  /// </summary>
  std::string getSponsorId() const;
  void setSponsorId(std::string const& value);
  bool sponsorIdIsSet() const;
  void unsetSponsorId();
  /// <summary>
  /// Indicates the application service provider identity.
  /// </summary>
  std::string getAppSvcProvId() const;
  void setAppSvcProvId(std::string const& value);
  bool appSvcProvIdIsSet() const;
  void unsetAppSvcProvId();
  /// <summary>
  ///
  /// </summary>
  uint32_t getAfChargingIdentifier() const;
  void setAfChargingIdentifier(uint32_t const value);
  bool afChargingIdentifierIsSet() const;
  void unsetAfChargingIdentifier();
  /// <summary>
  ///
  /// </summary>
  std::string getAfChargId() const;
  void setAfChargId(std::string const& value);
  bool afChargIdIsSet() const;
  void unsetAfChargId();

  friend void to_json(nlohmann::json& j, const ChargingData& o);
  friend void from_json(const nlohmann::json& j, ChargingData& o);

 protected:
  std::string m_ChgId;

  oai::model::pcf::MeteringMethod m_MeteringMethod;
  bool m_MeteringMethodIsSet;
  bool m_Offline;
  bool m_OfflineIsSet;
  bool m_Online;
  bool m_OnlineIsSet;
  bool m_SdfHandl;
  bool m_SdfHandlIsSet;
  uint32_t m_RatingGroup;
  bool m_RatingGroupIsSet;
  oai::model::pcf::ReportingLevel m_ReportingLevel;
  bool m_ReportingLevelIsSet;
  uint32_t m_ServiceId;
  bool m_ServiceIdIsSet;
  std::string m_SponsorId;
  bool m_SponsorIdIsSet;
  std::string m_AppSvcProvId;
  bool m_AppSvcProvIdIsSet;
  uint32_t m_AfChargingIdentifier;
  bool m_AfChargingIdentifierIsSet;
  std::string m_AfChargId;
  bool m_AfChargIdIsSet;
};

}  // namespace oai::model::pcf

#endif /* ChargingData_H_ */
