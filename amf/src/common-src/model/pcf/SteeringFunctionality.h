/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SteeringFunctionality.h
 *
 * Possible values are   - MPTCP: Indicates that PCF authorizes the MPTCP
 * functionality to support traffic steering, switching and splitting.   -
 * ATSSS_LL: Indicates that PCF authorizes the ATSSS-LL functionality to support
 * traffic steering, switching and splitting.
 */

#ifndef SteeringFunctionality_H_
#define SteeringFunctionality_H_

#include "SteeringFunctionality_anyOf.h"
#include <nlohmann/json.hpp>

namespace oai::model::pcf {

/// <summary>
/// Possible values are   - MPTCP: Indicates that PCF authorizes the MPTCP
/// functionality to support traffic steering, switching and splitting.   -
/// ATSSS_LL: Indicates that PCF authorizes the ATSSS-LL functionality to
/// support traffic steering, switching and splitting.
/// </summary>
class SteeringFunctionality {
 public:
  SteeringFunctionality();
  virtual ~SteeringFunctionality() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const SteeringFunctionality& rhs) const;
  bool operator!=(const SteeringFunctionality& rhs) const;

  /////////////////////////////////////////////
  /// SteeringFunctionality members

  SteeringFunctionality_anyOf getValue() const;
  void setValue(SteeringFunctionality_anyOf value);
  SteeringFunctionality_anyOf::eSteeringFunctionality_anyOf getEnumValue()
      const;
  void setEnumValue(
      SteeringFunctionality_anyOf::eSteeringFunctionality_anyOf value);
  friend void to_json(nlohmann::json& j, const SteeringFunctionality& o);
  friend void from_json(const nlohmann::json& j, SteeringFunctionality& o);
  friend void to_json(nlohmann::json& j, const SteeringFunctionality_anyOf& o);
  friend void from_json(
      const nlohmann::json& j, SteeringFunctionality_anyOf& o);

 protected:
  SteeringFunctionality_anyOf m_value;
};

}  // namespace oai::model::pcf

#endif /* SteeringFunctionality_H_ */
