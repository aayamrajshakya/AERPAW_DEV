/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UpPathChgEvent.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::pcf {

UpPathChgEvent::UpPathChgEvent() {
  m_NotificationUri = "";
  m_NotifCorreId    = "";
  m_AfAckInd        = false;
  m_AfAckIndIsSet   = false;
}

void UpPathChgEvent::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool UpPathChgEvent::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool UpPathChgEvent::validate(
    std::stringstream& /* msg */, const std::string& /* pathPrefix */) const {
  bool success = true;
  /*
  const std::string _pathPrefix =
      pathPrefix.empty() ? "UpPathChgEvent" : pathPrefix;
  */
  return success;
}

bool UpPathChgEvent::operator==(const UpPathChgEvent& rhs) const {
  return

      (getNotificationUri() == rhs.getNotificationUri()) &&

      (getNotifCorreId() == rhs.getNotifCorreId()) &&

      (getDnaiChgType() == rhs.getDnaiChgType()) &&

      ((!afAckIndIsSet() && !rhs.afAckIndIsSet()) ||
       (afAckIndIsSet() && rhs.afAckIndIsSet() &&
        isAfAckInd() == rhs.isAfAckInd()))

          ;
}

bool UpPathChgEvent::operator!=(const UpPathChgEvent& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UpPathChgEvent& o) {
  j                    = nlohmann::json();
  j["notificationUri"] = o.m_NotificationUri;
  j["notifCorreId"]    = o.m_NotifCorreId;
  j["dnaiChgType"]     = o.m_DnaiChgType;
  if (o.afAckIndIsSet()) j["afAckInd"] = o.m_AfAckInd;
}

void from_json(const nlohmann::json& j, UpPathChgEvent& o) {
  j.at("notificationUri").get_to(o.m_NotificationUri);
  j.at("notifCorreId").get_to(o.m_NotifCorreId);
  j.at("dnaiChgType").get_to(o.m_DnaiChgType);
  if (j.find("afAckInd") != j.end()) {
    j.at("afAckInd").get_to(o.m_AfAckInd);
    o.m_AfAckIndIsSet = true;
  }
}

std::string UpPathChgEvent::getNotificationUri() const {
  return m_NotificationUri;
}
void UpPathChgEvent::setNotificationUri(std::string const& value) {
  m_NotificationUri = value;
}
std::string UpPathChgEvent::getNotifCorreId() const {
  return m_NotifCorreId;
}
void UpPathChgEvent::setNotifCorreId(std::string const& value) {
  m_NotifCorreId = value;
}
oai::model::common::DnaiChangeType UpPathChgEvent::getDnaiChgType() const {
  return m_DnaiChgType;
}
void UpPathChgEvent::setDnaiChgType(
    oai::model::common::DnaiChangeType const& value) {
  m_DnaiChgType = value;
}
bool UpPathChgEvent::isAfAckInd() const {
  return m_AfAckInd;
}
void UpPathChgEvent::setAfAckInd(bool const value) {
  m_AfAckInd      = value;
  m_AfAckIndIsSet = true;
}
bool UpPathChgEvent::afAckIndIsSet() const {
  return m_AfAckIndIsSet;
}
void UpPathChgEvent::unsetAfAckInd() {
  m_AfAckIndIsSet = false;
}

}  // namespace oai::model::pcf
