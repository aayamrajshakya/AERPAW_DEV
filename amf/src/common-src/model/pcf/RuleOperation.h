/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * RuleOperation.h
 *
 * Possible values are - CREATE_PCC_RULE: Indicates to create a new PCC rule to
 * reserve the resource requested by the UE.  - DELETE_PCC_RULE: Indicates to
 * delete a PCC rule corresponding to reserve the resource requested by the UE.
 * - MODIFY_PCC_RULE_AND_ADD_PACKET_FILTERS: Indicates to modify the PCC rule by
 * adding new packet filter(s). - MODIFY_ PCC_RULE_AND_REPLACE_PACKET_FILTERS:
 * Indicates to modify the PCC rule by replacing the existing packet filter(s).
 * - MODIFY_ PCC_RULE_AND_DELETE_PACKET_FILTERS: Indicates to modify the PCC
 * rule by deleting the existing packet filter(s). -
 * MODIFY_PCC_RULE_WITHOUT_MODIFY_PACKET_FILTERS: Indicates to modify the PCC
 * rule by modifying the QoS of the PCC rule.
 */

#ifndef RuleOperation_H_
#define RuleOperation_H_

#include "RuleOperation_anyOf.h"
#include <nlohmann/json.hpp>

namespace oai::model::pcf {

/// <summary>
/// Possible values are - CREATE_PCC_RULE: Indicates to create a new PCC rule to
/// reserve the resource requested by the UE.  - DELETE_PCC_RULE: Indicates to
/// delete a PCC rule corresponding to reserve the resource requested by the UE.
/// - MODIFY_PCC_RULE_AND_ADD_PACKET_FILTERS: Indicates to modify the PCC rule
/// by adding new packet filter(s). - MODIFY_
/// PCC_RULE_AND_REPLACE_PACKET_FILTERS: Indicates to modify the PCC rule by
/// replacing the existing packet filter(s). - MODIFY_
/// PCC_RULE_AND_DELETE_PACKET_FILTERS: Indicates to modify the PCC rule by
/// deleting the existing packet filter(s). -
/// MODIFY_PCC_RULE_WITHOUT_MODIFY_PACKET_FILTERS: Indicates to modify the PCC
/// rule by modifying the QoS of the PCC rule.
/// </summary>
class RuleOperation {
 public:
  RuleOperation();
  virtual ~RuleOperation() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const RuleOperation& rhs) const;
  bool operator!=(const RuleOperation& rhs) const;

  /////////////////////////////////////////////
  /// RuleOperation members

  RuleOperation_anyOf getValue() const;
  void setValue(RuleOperation_anyOf value);
  RuleOperation_anyOf::eRuleOperation_anyOf getEnumValue() const;
  void setEnumValue(RuleOperation_anyOf::eRuleOperation_anyOf value);
  friend void to_json(nlohmann::json& j, const RuleOperation& o);
  friend void from_json(const nlohmann::json& j, RuleOperation& o);
  friend void to_json(nlohmann::json& j, const RuleOperation_anyOf& o);
  friend void from_json(const nlohmann::json& j, RuleOperation_anyOf& o);

 protected:
  RuleOperation_anyOf m_value;
};

}  // namespace oai::model::pcf

#endif /* RuleOperation_H_ */
