/**
 * Nudsf_DataRepository
 * Nudsf Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "MetaSchema.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::udsf {

MetaSchema::MetaSchema() {
  m_SchemaId = "";
}

void MetaSchema::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool MetaSchema::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool MetaSchema::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "MetaSchema" : pathPrefix;

  /* MetaTags */ {
    const std::vector<oai::model::udsf::TagType>& value = m_MetaTags;
    const std::string currentValuePath = _pathPrefix + ".metaTags";

    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const oai::model::udsf::TagType& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".metaTags") && success;

        i++;
      }
    }
  }

  return success;
}

bool MetaSchema::operator==(const MetaSchema& rhs) const {
  return

      (getSchemaId() == rhs.getSchemaId()) &&

      (getMetaTags() == rhs.getMetaTags())

          ;
}

bool MetaSchema::operator!=(const MetaSchema& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const MetaSchema& o) {
  j             = nlohmann::json();
  j["schemaId"] = o.m_SchemaId;
  j["metaTags"] = o.m_MetaTags;
}

void from_json(const nlohmann::json& j, MetaSchema& o) {
  j.at("schemaId").get_to(o.m_SchemaId);
  j.at("metaTags").get_to(o.m_MetaTags);
}

std::string MetaSchema::getSchemaId() const {
  return m_SchemaId;
}
void MetaSchema::setSchemaId(std::string const& value) {
  m_SchemaId = value;
}
std::vector<oai::model::udsf::TagType> MetaSchema::getMetaTags() const {
  return m_MetaTags;
}
void MetaSchema::setMetaTags(
    std::vector<oai::model::udsf::TagType> const& value) {
  m_MetaTags = value;
}

}  // namespace oai::model::udsf
