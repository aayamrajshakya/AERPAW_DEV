/**
 * Nudsf_DataRepository
 * Nudsf Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NotificationDescription.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::udsf {

NotificationDescription::NotificationDescription() {
  m_RecordRef           = "";
  m_SubscriptionId      = "";
  m_SubscriptionIdIsSet = false;
}

void NotificationDescription::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool NotificationDescription::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool NotificationDescription::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "NotificationDescription" : pathPrefix;

  return success;
}

bool NotificationDescription::operator==(
    const NotificationDescription& rhs) const {
  return

      (getRecordRef() == rhs.getRecordRef()) &&

      (getOperationType() == rhs.getOperationType()) &&

      ((!subscriptionIdIsSet() && !rhs.subscriptionIdIsSet()) ||
       (subscriptionIdIsSet() && rhs.subscriptionIdIsSet() &&
        getSubscriptionId() == rhs.getSubscriptionId()))

          ;
}

bool NotificationDescription::operator!=(
    const NotificationDescription& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const NotificationDescription& o) {
  j                  = nlohmann::json();
  j["recordRef"]     = o.m_RecordRef;
  j["operationType"] = o.m_OperationType;
  if (o.subscriptionIdIsSet()) j["subscriptionId"] = o.m_SubscriptionId;
}

void from_json(const nlohmann::json& j, NotificationDescription& o) {
  j.at("recordRef").get_to(o.m_RecordRef);
  j.at("operationType").get_to(o.m_OperationType);
  if (j.find("subscriptionId") != j.end()) {
    j.at("subscriptionId").get_to(o.m_SubscriptionId);
    o.m_SubscriptionIdIsSet = true;
  }
}

std::string NotificationDescription::getRecordRef() const {
  return m_RecordRef;
}
void NotificationDescription::setRecordRef(std::string const& value) {
  m_RecordRef = value;
}
oai::model::udsf::RecordOperation NotificationDescription::getOperationType()
    const {
  return m_OperationType;
}
void NotificationDescription::setOperationType(
    oai::model::udsf::RecordOperation const& value) {
  m_OperationType = value;
}
std::string NotificationDescription::getSubscriptionId() const {
  return m_SubscriptionId;
}
void NotificationDescription::setSubscriptionId(std::string const& value) {
  m_SubscriptionId      = value;
  m_SubscriptionIdIsSet = true;
}
bool NotificationDescription::subscriptionIdIsSet() const {
  return m_SubscriptionIdIsSet;
}
void NotificationDescription::unsetSubscriptionId() {
  m_SubscriptionIdIsSet = false;
}

}  // namespace oai::model::udsf
