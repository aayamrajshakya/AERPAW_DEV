/**
 * Common Data Types
 * Common Data Types for Service Based Interfaces. Â© 2022, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "QosFlowUsageReport.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::common {

QosFlowUsageReport::QosFlowUsageReport() {
  m_Qfi            = 0;
  m_StartTimeStamp = "";
  m_EndTimeStamp   = "";
  m_DownlinkVolume = 0L;
  m_UplinkVolume   = 0L;
}

void QosFlowUsageReport::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool QosFlowUsageReport::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool QosFlowUsageReport::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "QosFlowUsageReport" : pathPrefix;

  /* Qfi */ {
    const int32_t& value               = m_Qfi;
    const std::string currentValuePath = _pathPrefix + ".qfi";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
    if (value > 63) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 63;";
    }
  }

  return success;
}

bool QosFlowUsageReport::operator==(const QosFlowUsageReport& rhs) const {
  return

      (getQfi() == rhs.getQfi()) &&

      (getStartTimeStamp() == rhs.getStartTimeStamp()) &&

      (getEndTimeStamp() == rhs.getEndTimeStamp()) &&

      (getDownlinkVolume() == rhs.getDownlinkVolume()) &&

      (getUplinkVolume() == rhs.getUplinkVolume())

          ;
}

bool QosFlowUsageReport::operator!=(const QosFlowUsageReport& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const QosFlowUsageReport& o) {
  j                   = nlohmann::json();
  j["qfi"]            = o.m_Qfi;
  j["startTimeStamp"] = o.m_StartTimeStamp;
  j["endTimeStamp"]   = o.m_EndTimeStamp;
  j["downlinkVolume"] = o.m_DownlinkVolume;
  j["uplinkVolume"]   = o.m_UplinkVolume;
}

void from_json(const nlohmann::json& j, QosFlowUsageReport& o) {
  j.at("qfi").get_to(o.m_Qfi);
  j.at("startTimeStamp").get_to(o.m_StartTimeStamp);
  j.at("endTimeStamp").get_to(o.m_EndTimeStamp);
  j.at("downlinkVolume").get_to(o.m_DownlinkVolume);
  j.at("uplinkVolume").get_to(o.m_UplinkVolume);
}

int32_t QosFlowUsageReport::getQfi() const {
  return m_Qfi;
}
void QosFlowUsageReport::setQfi(int32_t const value) {
  m_Qfi = value;
}
std::string QosFlowUsageReport::getStartTimeStamp() const {
  return m_StartTimeStamp;
}
void QosFlowUsageReport::setStartTimeStamp(std::string const& value) {
  m_StartTimeStamp = value;
}
std::string QosFlowUsageReport::getEndTimeStamp() const {
  return m_EndTimeStamp;
}
void QosFlowUsageReport::setEndTimeStamp(std::string const& value) {
  m_EndTimeStamp = value;
}
int64_t QosFlowUsageReport::getDownlinkVolume() const {
  return m_DownlinkVolume;
}
void QosFlowUsageReport::setDownlinkVolume(int64_t const value) {
  m_DownlinkVolume = value;
}
int64_t QosFlowUsageReport::getUplinkVolume() const {
  return m_UplinkVolume;
}
void QosFlowUsageReport::setUplinkVolume(int64_t const value) {
  m_UplinkVolume = value;
}

}  // namespace oai::model::common
