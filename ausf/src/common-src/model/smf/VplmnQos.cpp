/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "VplmnQos.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::smf {
using namespace oai::model::common;

VplmnQos::VplmnQos() {
  m_r_5qi            = 0;
  m_r_5qiIsSet       = false;
  m_ArpIsSet         = false;
  m_SessionAmbrIsSet = false;
  m_MaxFbrDl         = "";
  m_MaxFbrDlIsSet    = false;
  m_MaxFbrUl         = "";
  m_MaxFbrUlIsSet    = false;
  m_GuaFbrDl         = "";
  m_GuaFbrDlIsSet    = false;
  m_GuaFbrUl         = "";
  m_GuaFbrUlIsSet    = false;
}

void VplmnQos::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool VplmnQos::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool VplmnQos::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success                  = true;
  const std::string _pathPrefix = pathPrefix.empty() ? "VplmnQos" : pathPrefix;

  if (r5qiIsSet()) {
    const int32_t& value               = m_r_5qi;
    const std::string currentValuePath = _pathPrefix + ".r5qi";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
    if (value > 255) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 255;";
    }
  }

  if (maxFbrDlIsSet()) {
    const std::string& value           = m_MaxFbrDl;
    const std::string currentValuePath = _pathPrefix + ".maxFbrDl";
    success &= helpers::validate_regex(
        helpers::BANDWIDTH_VALIDATION_REGEX, value, msg, currentValuePath);
  }

  if (maxFbrUlIsSet()) {
    const std::string& value           = m_MaxFbrUl;
    const std::string currentValuePath = _pathPrefix + ".maxFbrUl";
    success &= helpers::validate_regex(
        helpers::BANDWIDTH_VALIDATION_REGEX, value, msg, currentValuePath);
  }

  if (guaFbrDlIsSet()) {
    const std::string& value           = m_GuaFbrDl;
    const std::string currentValuePath = _pathPrefix + ".guaFbrDl";
    success &= helpers::validate_regex(
        helpers::BANDWIDTH_VALIDATION_REGEX, value, msg, currentValuePath);
  }

  if (guaFbrUlIsSet()) {
    const std::string& value           = m_GuaFbrUl;
    const std::string currentValuePath = _pathPrefix + ".guaFbrUl";
    success &= helpers::validate_regex(
        helpers::BANDWIDTH_VALIDATION_REGEX, value, msg, currentValuePath);
  }

  return success;
}

bool VplmnQos::operator==(const VplmnQos& rhs) const {
  return

      ((!r5qiIsSet() && !rhs.r5qiIsSet()) ||
       (r5qiIsSet() && rhs.r5qiIsSet() && getR5qi() == rhs.getR5qi())) &&

      ((!arpIsSet() && !rhs.arpIsSet()) ||
       (arpIsSet() && rhs.arpIsSet() && getArp() == rhs.getArp())) &&

      ((!sessionAmbrIsSet() && !rhs.sessionAmbrIsSet()) ||
       (sessionAmbrIsSet() && rhs.sessionAmbrIsSet() &&
        getSessionAmbr() == rhs.getSessionAmbr())) &&

      ((!maxFbrDlIsSet() && !rhs.maxFbrDlIsSet()) ||
       (maxFbrDlIsSet() && rhs.maxFbrDlIsSet() &&
        getMaxFbrDl() == rhs.getMaxFbrDl())) &&

      ((!maxFbrUlIsSet() && !rhs.maxFbrUlIsSet()) ||
       (maxFbrUlIsSet() && rhs.maxFbrUlIsSet() &&
        getMaxFbrUl() == rhs.getMaxFbrUl())) &&

      ((!guaFbrDlIsSet() && !rhs.guaFbrDlIsSet()) ||
       (guaFbrDlIsSet() && rhs.guaFbrDlIsSet() &&
        getGuaFbrDl() == rhs.getGuaFbrDl())) &&

      ((!guaFbrUlIsSet() && !rhs.guaFbrUlIsSet()) ||
       (guaFbrUlIsSet() && rhs.guaFbrUlIsSet() &&
        getGuaFbrUl() == rhs.getGuaFbrUl()))

          ;
}

bool VplmnQos::operator!=(const VplmnQos& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const VplmnQos& o) {
  j = nlohmann::json();
  if (o.r5qiIsSet()) j["5qi"] = o.m_r_5qi;
  if (o.arpIsSet()) j["arp"] = o.m_Arp;
  if (o.sessionAmbrIsSet()) j["sessionAmbr"] = o.m_SessionAmbr;
  if (o.maxFbrDlIsSet()) j["maxFbrDl"] = o.m_MaxFbrDl;
  if (o.maxFbrUlIsSet()) j["maxFbrUl"] = o.m_MaxFbrUl;
  if (o.guaFbrDlIsSet()) j["guaFbrDl"] = o.m_GuaFbrDl;
  if (o.guaFbrUlIsSet()) j["guaFbrUl"] = o.m_GuaFbrUl;
}

void from_json(const nlohmann::json& j, VplmnQos& o) {
  if (j.find("5qi") != j.end()) {
    j.at("5qi").get_to(o.m_r_5qi);
    o.m_r_5qiIsSet = true;
  }
  if (j.find("arp") != j.end()) {
    j.at("arp").get_to(o.m_Arp);
    o.m_ArpIsSet = true;
  }
  if (j.find("sessionAmbr") != j.end()) {
    j.at("sessionAmbr").get_to(o.m_SessionAmbr);
    o.m_SessionAmbrIsSet = true;
  }
  if (j.find("maxFbrDl") != j.end()) {
    j.at("maxFbrDl").get_to(o.m_MaxFbrDl);
    o.m_MaxFbrDlIsSet = true;
  }
  if (j.find("maxFbrUl") != j.end()) {
    j.at("maxFbrUl").get_to(o.m_MaxFbrUl);
    o.m_MaxFbrUlIsSet = true;
  }
  if (j.find("guaFbrDl") != j.end()) {
    j.at("guaFbrDl").get_to(o.m_GuaFbrDl);
    o.m_GuaFbrDlIsSet = true;
  }
  if (j.find("guaFbrUl") != j.end()) {
    j.at("guaFbrUl").get_to(o.m_GuaFbrUl);
    o.m_GuaFbrUlIsSet = true;
  }
}

int32_t VplmnQos::getR5qi() const {
  return m_r_5qi;
}
void VplmnQos::setR5qi(int32_t const value) {
  m_r_5qi      = value;
  m_r_5qiIsSet = true;
}
bool VplmnQos::r5qiIsSet() const {
  return m_r_5qiIsSet;
}
void VplmnQos::unsetr_5qi() {
  m_r_5qiIsSet = false;
}
oai::model::common::Arp VplmnQos::getArp() const {
  return m_Arp;
}
void VplmnQos::setArp(oai::model::common::Arp const& value) {
  m_Arp      = value;
  m_ArpIsSet = true;
}
bool VplmnQos::arpIsSet() const {
  return m_ArpIsSet;
}
void VplmnQos::unsetArp() {
  m_ArpIsSet = false;
}
oai::model::common::Ambr VplmnQos::getSessionAmbr() const {
  return m_SessionAmbr;
}
void VplmnQos::setSessionAmbr(oai::model::common::Ambr const& value) {
  m_SessionAmbr      = value;
  m_SessionAmbrIsSet = true;
}
bool VplmnQos::sessionAmbrIsSet() const {
  return m_SessionAmbrIsSet;
}
void VplmnQos::unsetSessionAmbr() {
  m_SessionAmbrIsSet = false;
}
std::string VplmnQos::getMaxFbrDl() const {
  return m_MaxFbrDl;
}
void VplmnQos::setMaxFbrDl(std::string const& value) {
  m_MaxFbrDl      = value;
  m_MaxFbrDlIsSet = true;
}
bool VplmnQos::maxFbrDlIsSet() const {
  return m_MaxFbrDlIsSet;
}
void VplmnQos::unsetMaxFbrDl() {
  m_MaxFbrDlIsSet = false;
}
std::string VplmnQos::getMaxFbrUl() const {
  return m_MaxFbrUl;
}
void VplmnQos::setMaxFbrUl(std::string const& value) {
  m_MaxFbrUl      = value;
  m_MaxFbrUlIsSet = true;
}
bool VplmnQos::maxFbrUlIsSet() const {
  return m_MaxFbrUlIsSet;
}
void VplmnQos::unsetMaxFbrUl() {
  m_MaxFbrUlIsSet = false;
}
std::string VplmnQos::getGuaFbrDl() const {
  return m_GuaFbrDl;
}
void VplmnQos::setGuaFbrDl(std::string const& value) {
  m_GuaFbrDl      = value;
  m_GuaFbrDlIsSet = true;
}
bool VplmnQos::guaFbrDlIsSet() const {
  return m_GuaFbrDlIsSet;
}
void VplmnQos::unsetGuaFbrDl() {
  m_GuaFbrDlIsSet = false;
}
std::string VplmnQos::getGuaFbrUl() const {
  return m_GuaFbrUl;
}
void VplmnQos::setGuaFbrUl(std::string const& value) {
  m_GuaFbrUl      = value;
  m_GuaFbrUlIsSet = true;
}
bool VplmnQos::guaFbrUlIsSet() const {
  return m_GuaFbrUlIsSet;
}
void VplmnQos::unsetGuaFbrUl() {
  m_GuaFbrUlIsSet = false;
}

}  // namespace oai::model::smf
