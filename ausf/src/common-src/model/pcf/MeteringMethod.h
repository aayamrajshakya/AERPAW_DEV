/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * MeteringMethod.h
 *
 * Possible values are - DURATION: Indicates that the duration of the service
 * data flow traffic shall be metered. - VOLUME: Indicates that volume of the
 * service data flow traffic shall be metered. - DURATION_VOLUME: Indicates that
 * the duration and the volume of the service data flow traffic shall be
 * metered. - EVENT: Indicates that events of the service data flow traffic
 * shall be metered.
 */

#ifndef MeteringMethod_H_
#define MeteringMethod_H_

#include "NullValue.h"
#include "MeteringMethod_anyOf.h"
#include <nlohmann/json.hpp>

namespace oai::model::pcf {

/// <summary>
/// Possible values are - DURATION: Indicates that the duration of the service
/// data flow traffic shall be metered. - VOLUME: Indicates that volume of the
/// service data flow traffic shall be metered. - DURATION_VOLUME: Indicates
/// that the duration and the volume of the service data flow traffic shall be
/// metered. - EVENT: Indicates that events of the service data flow traffic
/// shall be metered.
/// </summary>
class MeteringMethod {
 public:
  MeteringMethod();
  virtual ~MeteringMethod() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const MeteringMethod& rhs) const;
  bool operator!=(const MeteringMethod& rhs) const;

  /////////////////////////////////////////////
  /// MeteringMethod members

  MeteringMethod_anyOf getValue() const;
  void setValue(MeteringMethod_anyOf value);
  MeteringMethod_anyOf::eMeteringMethod_anyOf getEnumValue() const;
  void setEnumValue(MeteringMethod_anyOf::eMeteringMethod_anyOf value);

  friend void to_json(nlohmann::json& j, const MeteringMethod& o);
  friend void from_json(const nlohmann::json& j, MeteringMethod& o);

 protected:
  MeteringMethod_anyOf m_value;
};

}  // namespace oai::model::pcf

#endif /* MeteringMethod_H_ */
