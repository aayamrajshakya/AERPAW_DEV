/**
 * Namf_Communication
 * AMF Communication Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.8
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NgapIeType_anyOf.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>
#include "logger.hpp"

namespace oai::amf::model {

NgapIeType_anyOf::NgapIeType_anyOf() {}

void NgapIeType_anyOf::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool NgapIeType_anyOf::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool NgapIeType_anyOf::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "NgapIeType_anyOf" : pathPrefix;

  if (m_value ==
      NgapIeType_anyOf::eNgapIeType_anyOf::INVALID_VALUE_OPENAPI_GENERATED) {
    success = false;
    msg << _pathPrefix << ": has no value;";
  }

  return success;
}

bool NgapIeType_anyOf::operator==(const NgapIeType_anyOf& rhs) const {
  return getValue() == rhs.getValue()

      ;
}

bool NgapIeType_anyOf::operator!=(const NgapIeType_anyOf& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const NgapIeType_anyOf& o) {
  j = nlohmann::json();

  switch (o.getValue()) {
    case NgapIeType_anyOf::eNgapIeType_anyOf::INVALID_VALUE_OPENAPI_GENERATED:
      j = "INVALID_VALUE_OPENAPI_GENERATED";
      break;
    case NgapIeType_anyOf::eNgapIeType_anyOf::PDU_RES_SETUP_REQ:
      j = "PDU_RES_SETUP_REQ";
      break;
    case NgapIeType_anyOf::eNgapIeType_anyOf::PDU_RES_REL_CMD:
      j = "PDU_RES_REL_CMD";
      break;
    case NgapIeType_anyOf::eNgapIeType_anyOf::PDU_RES_MOD_REQ:
      j = "PDU_RES_MOD_REQ";
      break;
    case NgapIeType_anyOf::eNgapIeType_anyOf::HANDOVER_CMD:
      j = "HANDOVER_CMD";
      break;
    case NgapIeType_anyOf::eNgapIeType_anyOf::HANDOVER_REQUIRED:
      j = "HANDOVER_REQUIRED";
      break;
    case NgapIeType_anyOf::eNgapIeType_anyOf::HANDOVER_PREP_FAIL:
      j = "HANDOVER_PREP_FAIL";
      break;
    case NgapIeType_anyOf::eNgapIeType_anyOf::SRC_TO_TAR_CONTAINER:
      j = "SRC_TO_TAR_CONTAINER";
      break;
    case NgapIeType_anyOf::eNgapIeType_anyOf::TAR_TO_SRC_CONTAINER:
      j = "TAR_TO_SRC_CONTAINER";
      break;
    case NgapIeType_anyOf::eNgapIeType_anyOf::TAR_TO_SRC_FAIL_CONTAINER:
      j = "TAR_TO_SRC_FAIL_CONTAINER";
      break;
    case NgapIeType_anyOf::eNgapIeType_anyOf::RAN_STATUS_TRANS_CONTAINER:
      j = "RAN_STATUS_TRANS_CONTAINER";
      break;
    case NgapIeType_anyOf::eNgapIeType_anyOf::SON_CONFIG_TRANSFER:
      j = "SON_CONFIG_TRANSFER";
      break;
    case NgapIeType_anyOf::eNgapIeType_anyOf::NRPPA_PDU:
      j = "NRPPA_PDU";
      break;
    case NgapIeType_anyOf::eNgapIeType_anyOf::UE_RADIO_CAPABILITY:
      j = "UE_RADIO_CAPABILITY";
      break;
    case NgapIeType_anyOf::eNgapIeType_anyOf::RIM_INFO_TRANSFER:
      j = "RIM_INFO_TRANSFER";
      break;
    case NgapIeType_anyOf::eNgapIeType_anyOf::SECONDARY_RAT_USAGE:
      j = "SECONDARY_RAT_USAGE";
      break;
    case NgapIeType_anyOf::eNgapIeType_anyOf::PC5_QOS_PARA:
      j = "PC5_QOS_PARA";
      break;
    case NgapIeType_anyOf::eNgapIeType_anyOf::EARLY_STATUS_TRANS_CONTAINER:
      j = "EARLY_STATUS_TRANS_CONTAINER";
      break;
  }
}

void from_json(const nlohmann::json& j, NgapIeType_anyOf& o) {
  auto s = j.get<std::string>();
  if (s == "PDU_RES_SETUP_REQ") {
    o.setValue(NgapIeType_anyOf::eNgapIeType_anyOf::PDU_RES_SETUP_REQ);
  } else if (s == "PDU_RES_REL_CMD") {
    o.setValue(NgapIeType_anyOf::eNgapIeType_anyOf::PDU_RES_REL_CMD);
  } else if (s == "PDU_RES_MOD_REQ") {
    o.setValue(NgapIeType_anyOf::eNgapIeType_anyOf::PDU_RES_MOD_REQ);
  } else if (s == "HANDOVER_CMD") {
    o.setValue(NgapIeType_anyOf::eNgapIeType_anyOf::HANDOVER_CMD);
  } else if (s == "HANDOVER_REQUIRED") {
    o.setValue(NgapIeType_anyOf::eNgapIeType_anyOf::HANDOVER_REQUIRED);
  } else if (s == "HANDOVER_PREP_FAIL") {
    o.setValue(NgapIeType_anyOf::eNgapIeType_anyOf::HANDOVER_PREP_FAIL);
  } else if (s == "SRC_TO_TAR_CONTAINER") {
    o.setValue(NgapIeType_anyOf::eNgapIeType_anyOf::SRC_TO_TAR_CONTAINER);
  } else if (s == "TAR_TO_SRC_CONTAINER") {
    o.setValue(NgapIeType_anyOf::eNgapIeType_anyOf::TAR_TO_SRC_CONTAINER);
  } else if (s == "TAR_TO_SRC_FAIL_CONTAINER") {
    o.setValue(NgapIeType_anyOf::eNgapIeType_anyOf::TAR_TO_SRC_FAIL_CONTAINER);
  } else if (s == "RAN_STATUS_TRANS_CONTAINER") {
    o.setValue(NgapIeType_anyOf::eNgapIeType_anyOf::RAN_STATUS_TRANS_CONTAINER);
  } else if (s == "SON_CONFIG_TRANSFER") {
    o.setValue(NgapIeType_anyOf::eNgapIeType_anyOf::SON_CONFIG_TRANSFER);
  } else if (s == "NRPPA_PDU") {
    Logger::amf_server().debug("NgapIeType_anyOf: set to NRPPA_PDU");
    o.setValue(NgapIeType_anyOf::eNgapIeType_anyOf::NRPPA_PDU);
  } else if (s == "UE_RADIO_CAPABILITY") {
    o.setValue(NgapIeType_anyOf::eNgapIeType_anyOf::UE_RADIO_CAPABILITY);
  } else if (s == "RIM_INFO_TRANSFER") {
    o.setValue(NgapIeType_anyOf::eNgapIeType_anyOf::RIM_INFO_TRANSFER);
  } else if (s == "SECONDARY_RAT_USAGE") {
    o.setValue(NgapIeType_anyOf::eNgapIeType_anyOf::SECONDARY_RAT_USAGE);
  } else if (s == "PC5_QOS_PARA") {
    o.setValue(NgapIeType_anyOf::eNgapIeType_anyOf::PC5_QOS_PARA);
  } else if (s == "EARLY_STATUS_TRANS_CONTAINER") {
    o.setValue(
        NgapIeType_anyOf::eNgapIeType_anyOf::EARLY_STATUS_TRANS_CONTAINER);
  } else {
    std::stringstream ss;
    ss << "Unexpected value " << s << " in json"
       << " cannot be converted to enum of type"
       << " NgapIeType_anyOf::eNgapIeType_anyOf";
    throw std::invalid_argument(ss.str());
  }
}

NgapIeType_anyOf::eNgapIeType_anyOf NgapIeType_anyOf::getValue() const {
  return m_value;
}
void NgapIeType_anyOf::setValue(NgapIeType_anyOf::eNgapIeType_anyOf value) {
  m_value = value;
}

}  // namespace oai::amf::model
