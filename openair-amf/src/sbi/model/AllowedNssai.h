/**
 * Namf_Communication
 * AMF Communication Service Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AllowedNssai.h
 *
 *
 */

#ifndef AllowedNssai_H_
#define AllowedNssai_H_

#include <vector>
#include "AccessType.h"
#include "AllowedSnssai.h"
#include <nlohmann/json.hpp>

namespace oai {
namespace amf {
namespace model {

/// <summary>
///
/// </summary>
class AllowedNssai {
 public:
  AllowedNssai();
  virtual ~AllowedNssai() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const AllowedNssai& rhs) const;
  bool operator!=(const AllowedNssai& rhs) const;

  /////////////////////////////////////////////
  /// AllowedNssai members

  /// <summary>
  ///
  /// </summary>
  std::vector<AllowedSnssai> getAllowedSnssaiList() const;
  void setAllowedSnssaiList(std::vector<AllowedSnssai> const& value);
  /// <summary>
  ///
  /// </summary>
  oai::model::common::AccessType getAccessType() const;
  void setAccessType(oai::model::common::AccessType const& value);

  friend void to_json(nlohmann::json& j, const AllowedNssai& o);
  friend void from_json(const nlohmann::json& j, AllowedNssai& o);

 protected:
  std::vector<AllowedSnssai> m_AllowedSnssaiList;

  oai::model::common::AccessType m_AccessType;
};

}  // namespace model
}  // namespace amf
}  // namespace oai

#endif /* AllowedNssai_H_ */
