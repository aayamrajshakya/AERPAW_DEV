/**
 * Namf_Communication
 * AMF Communication Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.8
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * N2InfoContent.h
 *
 *
 */

#ifndef N2InfoContent_H_
#define N2InfoContent_H_

#include "RefToBinaryData.h"
#include "NgapIeType.h"
#include <nlohmann/json.hpp>

namespace oai::amf::model {

/// <summary>
///
/// </summary>
class N2InfoContent {
 public:
  N2InfoContent();
  virtual ~N2InfoContent() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const N2InfoContent& rhs) const;
  bool operator!=(const N2InfoContent& rhs) const;

  /////////////////////////////////////////////
  /// N2InfoContent members

  /// <summary>
  ///
  /// </summary>
  int32_t getNgapMessageType() const;
  void setNgapMessageType(int32_t const value);
  bool ngapMessageTypeIsSet() const;
  void unsetNgapMessageType();
  /// <summary>
  ///
  /// </summary>
  oai::amf::model::NgapIeType getNgapIeType() const;
  void setNgapIeType(oai::amf::model::NgapIeType const& value);
  bool ngapIeTypeIsSet() const;
  void unsetNgapIeType();
  /// <summary>
  ///
  /// </summary>
  oai::model::common::RefToBinaryData getNgapData() const;
  void setNgapData(oai::model::common::RefToBinaryData const& value);

  friend void to_json(nlohmann::json& j, const N2InfoContent& o);
  friend void from_json(const nlohmann::json& j, N2InfoContent& o);

 protected:
  int32_t m_NgapMessageType;
  bool m_NgapMessageTypeIsSet;
  oai::amf::model::NgapIeType m_NgapIeType;
  bool m_NgapIeTypeIsSet;
  oai::model::common::RefToBinaryData m_NgapData;
};

}  // namespace oai::amf::model

#endif /* N2InfoContent_H_ */
