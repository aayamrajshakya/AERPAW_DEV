/**
 * Nudsf_DataRepository
 * Nudsf Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SubscriptionFilter.h
 *
 * A subscription filter
 */

#ifndef SubscriptionFilter_H_
#define SubscriptionFilter_H_

#include "RecordOperation.h"
#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace oai::model::udsf {

/// <summary>
/// A subscription filter
/// </summary>
class SubscriptionFilter {
 public:
  SubscriptionFilter();
  virtual ~SubscriptionFilter() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const SubscriptionFilter& rhs) const;
  bool operator!=(const SubscriptionFilter& rhs) const;

  /////////////////////////////////////////////
  /// SubscriptionFilter members

  /// <summary>
  /// list of resources applicable to the subscription
  /// </summary>
  std::vector<std::string> getMonitoredResourceUris() const;
  void setMonitoredResourceUris(std::vector<std::string> const& value);
  bool monitoredResourceUrisIsSet() const;
  void unsetMonitoredResourceUris();
  /// <summary>
  /// list of resources applicable to the subscription
  /// </summary>
  std::vector<oai::model::udsf::RecordOperation> getOperations() const;
  void setOperations(
      std::vector<oai::model::udsf::RecordOperation> const& value);
  bool operationsIsSet() const;
  void unsetOperations();

  friend void to_json(nlohmann::json& j, const SubscriptionFilter& o);
  friend void from_json(const nlohmann::json& j, SubscriptionFilter& o);

 protected:
  std::vector<std::string> m_MonitoredResourceUris;
  bool m_MonitoredResourceUrisIsSet;
  std::vector<oai::model::udsf::RecordOperation> m_Operations;
  bool m_OperationsIsSet;
};

}  // namespace oai::model::udsf

#endif /* SubscriptionFilter_H_ */
