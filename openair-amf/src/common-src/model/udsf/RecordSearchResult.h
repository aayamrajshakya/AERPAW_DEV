/**
 * Nudsf_DataRepository
 * Nudsf Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * RecordSearchResult.h
 *
 * Count and collection of Record references matching the providing filter.
 */

#ifndef RecordSearchResult_H_
#define RecordSearchResult_H_

#include <string>
#include "Record.h"
#include <map>
#include <vector>
#include <nlohmann/json.hpp>

namespace oai::model::udsf {

/// <summary>
/// Count and collection of Record references matching the providing filter.
/// </summary>
class RecordSearchResult {
 public:
  RecordSearchResult();
  virtual ~RecordSearchResult() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const RecordSearchResult& rhs) const;
  bool operator!=(const RecordSearchResult& rhs) const;

  /////////////////////////////////////////////
  /// RecordSearchResult members

  /// <summary>
  /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
  /// </summary>
  int32_t getCount() const;
  void setCount(int32_t const value);
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> getReferences() const;
  void setReferences(std::vector<std::string> const& value);
  bool referencesIsSet() const;
  void unsetReferences();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in  hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;,  \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in  table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall  appear first in the string, and the
  /// character representing features 1 to 4 shall appear last  in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are  defined features for an API, all features that
  /// would be represented by characters that are not  present in the string are
  /// not supported.
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const& value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  /// A map (list of key-value pairs where recordId serves as key) of Records
  /// </summary>
  std::map<std::string, oai::model::udsf::Record> getMatchingRecords() const;
  void setMatchingRecords(
      std::map<std::string, oai::model::udsf::Record> const& value);
  bool matchingRecordsIsSet() const;
  void unsetMatchingRecords();

  friend void to_json(nlohmann::json& j, const RecordSearchResult& o);
  friend void from_json(const nlohmann::json& j, RecordSearchResult& o);

 protected:
  int32_t m_Count;

  std::vector<std::string> m_References;
  bool m_ReferencesIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  std::map<std::string, oai::model::udsf::Record> m_MatchingRecords;
  bool m_MatchingRecordsIsSet;
};

}  // namespace oai::model::udsf

#endif /* RecordSearchResult_H_ */
