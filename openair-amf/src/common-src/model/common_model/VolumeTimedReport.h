/**
 * Common Data Types
 * Common Data Types for Service Based Interfaces. Â© 2022, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.7
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * VolumeTimedReport.h
 *
 *
 */

#ifndef VolumeTimedReport_H_
#define VolumeTimedReport_H_

#include <string>
#include <nlohmann/json.hpp>

namespace oai::model::common {

/// <summary>
///
/// </summary>
class VolumeTimedReport {
 public:
  VolumeTimedReport();
  virtual ~VolumeTimedReport() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const VolumeTimedReport& rhs) const;
  bool operator!=(const VolumeTimedReport& rhs) const;

  /////////////////////////////////////////////
  /// VolumeTimedReport members

  /// <summary>
  ///
  /// </summary>
  std::string getStartTimeStamp() const;
  void setStartTimeStamp(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  std::string getEndTimeStamp() const;
  void setEndTimeStamp(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  int64_t getDownlinkVolume() const;
  void setDownlinkVolume(int64_t const value);
  /// <summary>
  ///
  /// </summary>
  int64_t getUplinkVolume() const;
  void setUplinkVolume(int64_t const value);

  friend void to_json(nlohmann::json& j, const VolumeTimedReport& o);
  friend void from_json(const nlohmann::json& j, VolumeTimedReport& o);

 protected:
  std::string m_StartTimeStamp;

  std::string m_EndTimeStamp;

  int64_t m_DownlinkVolume;

  int64_t m_UplinkVolume;
};

}  // namespace oai::model::common

#endif /* VolumeTimedReport_H_ */
