/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NetLocAccessSupport.h
 *
 * Possible values are - ANR_NOT_SUPPORTED: Indicates that the access network
 * does not support the report of access network information. -
 * TZR_NOT_SUPPORTED: Indicates that the access network does not support the
 * report of UE time zone. - LOC_NOT_SUPPORTED: Indicates that the access
 * network does not support the report of UE Location (or PLMN Id).
 */

#ifndef NetLocAccessSupport_H_
#define NetLocAccessSupport_H_

#include "NetLocAccessSupport_anyOf.h"
#include <nlohmann/json.hpp>

namespace oai::model::pcf {

/// <summary>
/// Possible values are - ANR_NOT_SUPPORTED: Indicates that the access network
/// does not support the report of access network information. -
/// TZR_NOT_SUPPORTED: Indicates that the access network does not support the
/// report of UE time zone. - LOC_NOT_SUPPORTED: Indicates that the access
/// network does not support the report of UE Location (or PLMN Id).
/// </summary>
class NetLocAccessSupport {
 public:
  NetLocAccessSupport();
  virtual ~NetLocAccessSupport() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const NetLocAccessSupport& rhs) const;
  bool operator!=(const NetLocAccessSupport& rhs) const;

  /////////////////////////////////////////////
  /// NetLocAccessSupport members

  NetLocAccessSupport_anyOf getValue() const;
  void setValue(NetLocAccessSupport_anyOf value);
  NetLocAccessSupport_anyOf::eNetLocAccessSupport_anyOf getEnumValue() const;
  void setEnumValue(
      NetLocAccessSupport_anyOf::eNetLocAccessSupport_anyOf value);
  friend void to_json(nlohmann::json& j, const NetLocAccessSupport& o);
  friend void from_json(const nlohmann::json& j, NetLocAccessSupport& o);
  friend void to_json(nlohmann::json& j, const NetLocAccessSupport_anyOf& o);
  friend void from_json(const nlohmann::json& j, NetLocAccessSupport_anyOf& o);

 protected:
  NetLocAccessSupport_anyOf m_value;
};

}  // namespace oai::model::pcf

#endif /* NetLocAccessSupport_H_ */
