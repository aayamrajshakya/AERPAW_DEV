/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AppDetectionInfo.h
 *
 *
 */

#ifndef AppDetectionInfo_H_
#define AppDetectionInfo_H_

#include <string>
#include "FlowInformation.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace oai::model::pcf {

/// <summary>
///
/// </summary>
class AppDetectionInfo {
 public:
  AppDetectionInfo();
  virtual ~AppDetectionInfo() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const AppDetectionInfo& rhs) const;
  bool operator!=(const AppDetectionInfo& rhs) const;

  /////////////////////////////////////////////
  /// AppDetectionInfo members

  /// <summary>
  /// A reference to the application detection filter configured at the UPF
  /// </summary>
  std::string getAppId() const;
  void setAppId(std::string const& value);
  /// <summary>
  /// Identifier sent by the SMF in order to allow correlation of application
  /// Start and Stop events to the specific service data flow description, if
  /// service data flow descriptions are deducible.
  /// </summary>
  std::string getInstanceId() const;
  void setInstanceId(std::string const& value);
  bool instanceIdIsSet() const;
  void unsetInstanceId();
  /// <summary>
  /// Contains the detected service data flow descriptions if they are
  /// deducible.
  /// </summary>
  std::vector<oai::model::pcf::FlowInformation> getSdfDescriptions() const;
  void setSdfDescriptions(
      std::vector<oai::model::pcf::FlowInformation> const& value);
  bool sdfDescriptionsIsSet() const;
  void unsetSdfDescriptions();

  friend void to_json(nlohmann::json& j, const AppDetectionInfo& o);
  friend void from_json(const nlohmann::json& j, AppDetectionInfo& o);

 protected:
  std::string m_AppId;

  std::string m_InstanceId;
  bool m_InstanceIdIsSet;
  std::vector<oai::model::pcf::FlowInformation> m_SdfDescriptions;
  bool m_SdfDescriptionsIsSet;
};

}  // namespace oai::model::pcf

#endif /* AppDetectionInfo_H_ */
