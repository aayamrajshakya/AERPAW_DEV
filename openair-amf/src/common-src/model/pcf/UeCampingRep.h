/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UeCampingRep.h
 *
 *
 */

#ifndef UeCampingRep_H_
#define UeCampingRep_H_

#include "PlmnIdNid.h"
#include "NetLocAccessSupport.h"
#include "RatType.h"
#include <string>
#include "UserLocation.h"
#include "ServingNfIdentity.h"
#include "AccessType.h"
#include <nlohmann/json.hpp>

namespace oai::model::pcf {

/// <summary>
///
/// </summary>
class UeCampingRep {
 public:
  UeCampingRep();
  virtual ~UeCampingRep() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const UeCampingRep& rhs) const;
  bool operator!=(const UeCampingRep& rhs) const;

  /////////////////////////////////////////////
  /// UeCampingRep members

  /// <summary>
  ///
  /// </summary>
  oai::model::common::AccessType getAccessType() const;
  void setAccessType(oai::model::common::AccessType const& value);
  bool accessTypeIsSet() const;
  void unsetAccessType();
  /// <summary>
  ///
  /// </summary>
  oai::model::common::RatType getRatType() const;
  void setRatType(oai::model::common::RatType const& value);
  bool ratTypeIsSet() const;
  void unsetRatType();
  /// <summary>
  ///
  /// </summary>
  oai::model::pcf::ServingNfIdentity getServNfId() const;
  void setServNfId(oai::model::pcf::ServingNfIdentity const& value);
  bool servNfIdIsSet() const;
  void unsetServNfId();
  /// <summary>
  ///
  /// </summary>
  oai::model::common::PlmnIdNid getServingNetwork() const;
  void setServingNetwork(oai::model::common::PlmnIdNid const& value);
  bool servingNetworkIsSet() const;
  void unsetServingNetwork();
  /// <summary>
  ///
  /// </summary>
  oai::model::common::UserLocation getUserLocationInfo() const;
  void setUserLocationInfo(oai::model::common::UserLocation const& value);
  bool userLocationInfoIsSet() const;
  void unsetUserLocationInfo();
  /// <summary>
  ///
  /// </summary>
  std::string getUeTimeZone() const;
  void setUeTimeZone(std::string const& value);
  bool ueTimeZoneIsSet() const;
  void unsetUeTimeZone();
  /// <summary>
  ///
  /// </summary>
  oai::model::pcf::NetLocAccessSupport getNetLocAccSupp() const;
  void setNetLocAccSupp(oai::model::pcf::NetLocAccessSupport const& value);
  bool netLocAccSuppIsSet() const;
  void unsetNetLocAccSupp();

  friend void to_json(nlohmann::json& j, const UeCampingRep& o);
  friend void from_json(const nlohmann::json& j, UeCampingRep& o);

 protected:
  oai::model::common::AccessType m_AccessType;
  bool m_AccessTypeIsSet;
  oai::model::common::RatType m_RatType;
  bool m_RatTypeIsSet;
  oai::model::pcf::ServingNfIdentity m_ServNfId;
  bool m_ServNfIdIsSet;
  oai::model::common::PlmnIdNid m_ServingNetwork;
  bool m_ServingNetworkIsSet;
  oai::model::common::UserLocation m_UserLocationInfo;
  bool m_UserLocationInfoIsSet;
  std::string m_UeTimeZone;
  bool m_UeTimeZoneIsSet;
  oai::model::pcf::NetLocAccessSupport m_NetLocAccSupp;
  bool m_NetLocAccSuppIsSet;
};

}  // namespace oai::model::pcf

#endif /* UeCampingRep_H_ */
