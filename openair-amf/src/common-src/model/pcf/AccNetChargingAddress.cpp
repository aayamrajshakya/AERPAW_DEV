/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AccNetChargingAddress.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::pcf {

using namespace oai::model::common;

AccNetChargingAddress::AccNetChargingAddress() {
  m_AnChargIpv4Addr      = "";
  m_AnChargIpv4AddrIsSet = false;
  m_AnChargIpv6AddrIsSet = false;
}

void AccNetChargingAddress::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool AccNetChargingAddress::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool AccNetChargingAddress::validate(
    std::stringstream& /* msg */, const std::string& /* pathPrefix */) const {
  bool success = true;
  /*
  const std::string _pathPrefix =
      pathPrefix.empty() ? "AccNetChargingAddress" : pathPrefix;

  if (anChargIpv4AddrIsSet()) {
    const std::string& value           = m_AnChargIpv4Addr;
    const std::string currentValuePath = _pathPrefix + ".anChargIpv4Addr";
  }
  */

  return success;
}

bool AccNetChargingAddress::operator==(const AccNetChargingAddress& rhs) const {
  return

      ((!anChargIpv4AddrIsSet() && !rhs.anChargIpv4AddrIsSet()) ||
       (anChargIpv4AddrIsSet() && rhs.anChargIpv4AddrIsSet() &&
        getAnChargIpv4Addr() == rhs.getAnChargIpv4Addr())) &&

      ((!anChargIpv6AddrIsSet() && !rhs.anChargIpv6AddrIsSet()) ||
       (anChargIpv6AddrIsSet() && rhs.anChargIpv6AddrIsSet() &&
        getAnChargIpv6Addr() == rhs.getAnChargIpv6Addr()))

          ;
}

bool AccNetChargingAddress::operator!=(const AccNetChargingAddress& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AccNetChargingAddress& o) {
  j = nlohmann::json();
  if (o.anChargIpv4AddrIsSet()) j["anChargIpv4Addr"] = o.m_AnChargIpv4Addr;
  if (o.anChargIpv6AddrIsSet()) j["anChargIpv6Addr"] = o.m_AnChargIpv6Addr;
}

void from_json(const nlohmann::json& j, AccNetChargingAddress& o) {
  if (j.find("anChargIpv4Addr") != j.end()) {
    j.at("anChargIpv4Addr").get_to(o.m_AnChargIpv4Addr);
    o.m_AnChargIpv4AddrIsSet = true;
  }
  if (j.find("anChargIpv6Addr") != j.end()) {
    j.at("anChargIpv6Addr").get_to(o.m_AnChargIpv6Addr);
    o.m_AnChargIpv6AddrIsSet = true;
  }
}

std::string AccNetChargingAddress::getAnChargIpv4Addr() const {
  return m_AnChargIpv4Addr;
}
void AccNetChargingAddress::setAnChargIpv4Addr(std::string const& value) {
  m_AnChargIpv4Addr      = value;
  m_AnChargIpv4AddrIsSet = true;
}
bool AccNetChargingAddress::anChargIpv4AddrIsSet() const {
  return m_AnChargIpv4AddrIsSet;
}
void AccNetChargingAddress::unsetAnChargIpv4Addr() {
  m_AnChargIpv4AddrIsSet = false;
}
Ipv6Addr AccNetChargingAddress::getAnChargIpv6Addr() const {
  return m_AnChargIpv6Addr;
}
void AccNetChargingAddress::setAnChargIpv6Addr(Ipv6Addr const& value) {
  m_AnChargIpv6Addr      = value;
  m_AnChargIpv6AddrIsSet = true;
}
bool AccNetChargingAddress::anChargIpv6AddrIsSet() const {
  return m_AnChargIpv6AddrIsSet;
}
void AccNetChargingAddress::unsetAnChargIpv6Addr() {
  m_AnChargIpv6AddrIsSet = false;
}

}  // namespace oai::model::pcf
