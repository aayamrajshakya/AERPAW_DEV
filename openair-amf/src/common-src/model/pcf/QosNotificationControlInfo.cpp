/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "QosNotificationControlInfo.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::pcf {

QosNotificationControlInfo::QosNotificationControlInfo() {
  m_ContVer            = 0;
  m_ContVerIsSet       = false;
  m_AltQosParamId      = "";
  m_AltQosParamIdIsSet = false;
}

void QosNotificationControlInfo::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool QosNotificationControlInfo::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool QosNotificationControlInfo::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "QosNotificationControlInfo" : pathPrefix;

  /* RefPccRuleIds */ {
    const std::vector<std::string>& value = m_RefPccRuleIds;
    const std::string currentValuePath    = _pathPrefix + ".refPccRuleIds";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    /*
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const std::string& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        i++;
      }
    }
    */
  }

  return success;
}

bool QosNotificationControlInfo::operator==(
    const QosNotificationControlInfo& rhs) const {
  return

      (getRefPccRuleIds() == rhs.getRefPccRuleIds()) &&

      (getNotifType() == rhs.getNotifType()) &&

      ((!contVerIsSet() && !rhs.contVerIsSet()) ||
       (contVerIsSet() && rhs.contVerIsSet() &&
        getContVer() == rhs.getContVer())) &&

      ((!altQosParamIdIsSet() && !rhs.altQosParamIdIsSet()) ||
       (altQosParamIdIsSet() && rhs.altQosParamIdIsSet() &&
        getAltQosParamId() == rhs.getAltQosParamId()))

          ;
}

bool QosNotificationControlInfo::operator!=(
    const QosNotificationControlInfo& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const QosNotificationControlInfo& o) {
  j                  = nlohmann::json();
  j["refPccRuleIds"] = o.m_RefPccRuleIds;
  j["notifType"]     = o.m_NotifType;
  if (o.contVerIsSet()) j["contVer"] = o.m_ContVer;
  if (o.altQosParamIdIsSet()) j["altQosParamId"] = o.m_AltQosParamId;
}

void from_json(const nlohmann::json& j, QosNotificationControlInfo& o) {
  j.at("refPccRuleIds").get_to(o.m_RefPccRuleIds);
  j.at("notifType").get_to(o.m_NotifType);
  if (j.find("contVer") != j.end()) {
    j.at("contVer").get_to(o.m_ContVer);
    o.m_ContVerIsSet = true;
  }
  if (j.find("altQosParamId") != j.end()) {
    j.at("altQosParamId").get_to(o.m_AltQosParamId);
    o.m_AltQosParamIdIsSet = true;
  }
}

std::vector<std::string> QosNotificationControlInfo::getRefPccRuleIds() const {
  return m_RefPccRuleIds;
}
void QosNotificationControlInfo::setRefPccRuleIds(
    std::vector<std::string> const& value) {
  m_RefPccRuleIds = value;
}
oai::model::pcf::QosNotifType QosNotificationControlInfo::getNotifType() const {
  return m_NotifType;
}
void QosNotificationControlInfo::setNotifType(
    oai::model::pcf::QosNotifType const& value) {
  m_NotifType = value;
}
int32_t QosNotificationControlInfo::getContVer() const {
  return m_ContVer;
}
void QosNotificationControlInfo::setContVer(int32_t const value) {
  m_ContVer      = value;
  m_ContVerIsSet = true;
}
bool QosNotificationControlInfo::contVerIsSet() const {
  return m_ContVerIsSet;
}
void QosNotificationControlInfo::unsetContVer() {
  m_ContVerIsSet = false;
}
std::string QosNotificationControlInfo::getAltQosParamId() const {
  return m_AltQosParamId;
}
void QosNotificationControlInfo::setAltQosParamId(std::string const& value) {
  m_AltQosParamId      = value;
  m_AltQosParamIdIsSet = true;
}
bool QosNotificationControlInfo::altQosParamIdIsSet() const {
  return m_AltQosParamIdIsSet;
}
void QosNotificationControlInfo::unsetAltQosParamId() {
  m_AltQosParamIdIsSet = false;
}

}  // namespace oai::model::pcf
