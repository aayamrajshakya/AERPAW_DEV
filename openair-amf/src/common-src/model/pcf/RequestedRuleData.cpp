/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "RequestedRuleData.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::pcf {

RequestedRuleData::RequestedRuleData() {}

void RequestedRuleData::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool RequestedRuleData::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool RequestedRuleData::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "RequestedRuleData" : pathPrefix;

  /* RefPccRuleIds */ {
    const std::vector<std::string>& value = m_RefPccRuleIds;
    const std::string currentValuePath    = _pathPrefix + ".refPccRuleIds";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    /*
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const std::string& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        i++;
      }
    }
    */
  }

  /* ReqData */ {
    const std::vector<oai::model::pcf::RequestedRuleDataType>& value =
        m_ReqData;
    const std::string currentValuePath = _pathPrefix + ".reqData";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const oai::model::pcf::RequestedRuleDataType& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".reqData") && success;

        i++;
      }
    }
  }

  return success;
}

bool RequestedRuleData::operator==(const RequestedRuleData& rhs) const {
  return

      (getRefPccRuleIds() == rhs.getRefPccRuleIds()) &&

      (getReqData() == rhs.getReqData())

          ;
}

bool RequestedRuleData::operator!=(const RequestedRuleData& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RequestedRuleData& o) {
  j                  = nlohmann::json();
  j["refPccRuleIds"] = o.m_RefPccRuleIds;
  j["reqData"]       = o.m_ReqData;
}

void from_json(const nlohmann::json& j, RequestedRuleData& o) {
  j.at("refPccRuleIds").get_to(o.m_RefPccRuleIds);
  j.at("reqData").get_to(o.m_ReqData);
}

std::vector<std::string> RequestedRuleData::getRefPccRuleIds() const {
  return m_RefPccRuleIds;
}
void RequestedRuleData::setRefPccRuleIds(
    std::vector<std::string> const& value) {
  m_RefPccRuleIds = value;
}
std::vector<oai::model::pcf::RequestedRuleDataType>
RequestedRuleData::getReqData() const {
  return m_ReqData;
}
void RequestedRuleData::setReqData(
    std::vector<oai::model::pcf::RequestedRuleDataType> const& value) {
  m_ReqData = value;
}

}  // namespace oai::model::pcf
