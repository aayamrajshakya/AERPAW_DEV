/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UeInitiatedResourceRequest.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::pcf {

UeInitiatedResourceRequest::UeInitiatedResourceRequest() {
  m_PccRuleId       = "";
  m_PccRuleIdIsSet  = false;
  m_Precedence      = 0;
  m_PrecedenceIsSet = false;
  m_ReqQosIsSet     = false;
}

void UeInitiatedResourceRequest::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool UeInitiatedResourceRequest::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool UeInitiatedResourceRequest::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "UeInitiatedResourceRequest" : pathPrefix;

  /* PackFiltInfo */ {
    const std::vector<oai::model::pcf::PacketFilterInfo>& value =
        m_PackFiltInfo;
    const std::string currentValuePath = _pathPrefix + ".packFiltInfo";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const oai::model::pcf::PacketFilterInfo& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".packFiltInfo") && success;

        i++;
      }
    }
  }

  return success;
}

bool UeInitiatedResourceRequest::operator==(
    const UeInitiatedResourceRequest& rhs) const {
  return

      ((!pccRuleIdIsSet() && !rhs.pccRuleIdIsSet()) ||
       (pccRuleIdIsSet() && rhs.pccRuleIdIsSet() &&
        getPccRuleId() == rhs.getPccRuleId())) &&

      (getRuleOp() == rhs.getRuleOp()) &&

      ((!precedenceIsSet() && !rhs.precedenceIsSet()) ||
       (precedenceIsSet() && rhs.precedenceIsSet() &&
        getPrecedence() == rhs.getPrecedence())) &&

      (getPackFiltInfo() == rhs.getPackFiltInfo()) &&

      ((!reqQosIsSet() && !rhs.reqQosIsSet()) ||
       (reqQosIsSet() && rhs.reqQosIsSet() && getReqQos() == rhs.getReqQos()))

          ;
}

bool UeInitiatedResourceRequest::operator!=(
    const UeInitiatedResourceRequest& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UeInitiatedResourceRequest& o) {
  j = nlohmann::json();
  if (o.pccRuleIdIsSet()) j["pccRuleId"] = o.m_PccRuleId;
  j["ruleOp"] = o.m_RuleOp;
  if (o.precedenceIsSet()) j["precedence"] = o.m_Precedence;
  j["packFiltInfo"] = o.m_PackFiltInfo;
  if (o.reqQosIsSet()) j["reqQos"] = o.m_ReqQos;
}

void from_json(const nlohmann::json& j, UeInitiatedResourceRequest& o) {
  if (j.find("pccRuleId") != j.end()) {
    j.at("pccRuleId").get_to(o.m_PccRuleId);
    o.m_PccRuleIdIsSet = true;
  }
  j.at("ruleOp").get_to(o.m_RuleOp);
  if (j.find("precedence") != j.end()) {
    j.at("precedence").get_to(o.m_Precedence);
    o.m_PrecedenceIsSet = true;
  }
  j.at("packFiltInfo").get_to(o.m_PackFiltInfo);
  if (j.find("reqQos") != j.end()) {
    j.at("reqQos").get_to(o.m_ReqQos);
    o.m_ReqQosIsSet = true;
  }
}

std::string UeInitiatedResourceRequest::getPccRuleId() const {
  return m_PccRuleId;
}
void UeInitiatedResourceRequest::setPccRuleId(std::string const& value) {
  m_PccRuleId      = value;
  m_PccRuleIdIsSet = true;
}
bool UeInitiatedResourceRequest::pccRuleIdIsSet() const {
  return m_PccRuleIdIsSet;
}
void UeInitiatedResourceRequest::unsetPccRuleId() {
  m_PccRuleIdIsSet = false;
}
oai::model::pcf::RuleOperation UeInitiatedResourceRequest::getRuleOp() const {
  return m_RuleOp;
}
void UeInitiatedResourceRequest::setRuleOp(
    oai::model::pcf::RuleOperation const& value) {
  m_RuleOp = value;
}
int32_t UeInitiatedResourceRequest::getPrecedence() const {
  return m_Precedence;
}
void UeInitiatedResourceRequest::setPrecedence(int32_t const value) {
  m_Precedence      = value;
  m_PrecedenceIsSet = true;
}
bool UeInitiatedResourceRequest::precedenceIsSet() const {
  return m_PrecedenceIsSet;
}
void UeInitiatedResourceRequest::unsetPrecedence() {
  m_PrecedenceIsSet = false;
}
std::vector<oai::model::pcf::PacketFilterInfo>
UeInitiatedResourceRequest::getPackFiltInfo() const {
  return m_PackFiltInfo;
}
void UeInitiatedResourceRequest::setPackFiltInfo(
    std::vector<oai::model::pcf::PacketFilterInfo> const& value) {
  m_PackFiltInfo = value;
}
oai::model::pcf::RequestedQos UeInitiatedResourceRequest::getReqQos() const {
  return m_ReqQos;
}
void UeInitiatedResourceRequest::setReqQos(
    oai::model::pcf::RequestedQos const& value) {
  m_ReqQos      = value;
  m_ReqQosIsSet = true;
}
bool UeInitiatedResourceRequest::reqQosIsSet() const {
  return m_ReqQosIsSet;
}
void UeInitiatedResourceRequest::unsetReqQos() {
  m_ReqQosIsSet = false;
}

}  // namespace oai::model::pcf
