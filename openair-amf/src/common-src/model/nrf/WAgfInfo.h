/**
 * NRF NFManagement Service
 * NRF NFManagement Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.8
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * WAgfInfo.h
 *
 * Information of the W-AGF end-points
 */

#ifndef WAgfInfo_H_
#define WAgfInfo_H_

#include <string>
#include "Ipv6Addr.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace oai::model::nrf {

/// <summary>
/// Information of the W-AGF end-points
/// </summary>
class WAgfInfo {
 public:
  WAgfInfo();
  virtual ~WAgfInfo() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const WAgfInfo& rhs) const;
  bool operator!=(const WAgfInfo& rhs) const;

  /////////////////////////////////////////////
  /// WAgfInfo members

  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> getIpv4EndpointAddresses() const;
  void setIpv4EndpointAddresses(std::vector<std::string> const& value);
  bool ipv4EndpointAddressesIsSet() const;
  void unsetIpv4EndpointAddresses();
  /// <summary>
  ///
  /// </summary>
  std::vector<oai::model::common::Ipv6Addr> getIpv6EndpointAddresses() const;
  void setIpv6EndpointAddresses(
      std::vector<oai::model::common::Ipv6Addr> const& value);
  bool ipv6EndpointAddressesIsSet() const;
  void unsetIpv6EndpointAddresses();
  /// <summary>
  /// Fully Qualified Domain Name
  /// </summary>
  std::string getEndpointFqdn() const;
  void setEndpointFqdn(std::string const& value);
  bool endpointFqdnIsSet() const;
  void unsetEndpointFqdn();

  friend void to_json(nlohmann::json& j, const WAgfInfo& o);
  friend void from_json(const nlohmann::json& j, WAgfInfo& o);

 protected:
  std::vector<std::string> m_Ipv4EndpointAddresses;
  bool m_Ipv4EndpointAddressesIsSet;
  std::vector<oai::model::common::Ipv6Addr> m_Ipv6EndpointAddresses;
  bool m_Ipv6EndpointAddressesIsSet;
  std::string m_EndpointFqdn;
  bool m_EndpointFqdnIsSet;
};

}  // namespace oai::model::nrf

#endif /* WAgfInfo_H_ */
