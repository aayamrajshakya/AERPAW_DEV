/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AnGwAddress.h
 *
 * describes the address of the access network gateway control node
 */

#ifndef AnGwAddress_H_
#define AnGwAddress_H_

#include <string>
#include "Ipv6Addr.h"
#include <nlohmann/json.hpp>

namespace oai::model::pcf {

/// <summary>
/// describes the address of the access network gateway control node
/// </summary>
class AnGwAddress {
 public:
  AnGwAddress();
  virtual ~AnGwAddress() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const AnGwAddress& rhs) const;
  bool operator!=(const AnGwAddress& rhs) const;

  /////////////////////////////////////////////
  /// AnGwAddress members

  /// <summary>
  ///
  /// </summary>
  std::string getAnGwIpv4Addr() const;
  void setAnGwIpv4Addr(std::string const& value);
  bool anGwIpv4AddrIsSet() const;
  void unsetAnGwIpv4Addr();
  /// <summary>
  ///
  /// </summary>
  oai::model::common::Ipv6Addr getAnGwIpv6Addr() const;
  void setAnGwIpv6Addr(oai::model::common::Ipv6Addr const& value);
  bool anGwIpv6AddrIsSet() const;
  void unsetAnGwIpv6Addr();

  friend void to_json(nlohmann::json& j, const AnGwAddress& o);
  friend void from_json(const nlohmann::json& j, AnGwAddress& o);

 protected:
  std::string m_AnGwIpv4Addr;
  bool m_AnGwIpv4AddrIsSet;
  oai::model::common::Ipv6Addr m_AnGwIpv6Addr;
  bool m_AnGwIpv6AddrIsSet;
};

}  // namespace oai::model::pcf

#endif /* AnGwAddress_H_ */
