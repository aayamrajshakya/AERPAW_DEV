/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UsageMonitoringData.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::pcf {

UsageMonitoringData::UsageMonitoringData() {
  m_UmId                          = "";
  m_VolumeThreshold               = 0L;
  m_VolumeThresholdIsSet          = false;
  m_VolumeThresholdUplink         = 0L;
  m_VolumeThresholdUplinkIsSet    = false;
  m_VolumeThresholdDownlink       = 0L;
  m_VolumeThresholdDownlinkIsSet  = false;
  m_TimeThreshold                 = 0;
  m_TimeThresholdIsSet            = false;
  m_MonitoringTime                = "";
  m_MonitoringTimeIsSet           = false;
  m_NextVolThreshold              = 0L;
  m_NextVolThresholdIsSet         = false;
  m_NextVolThresholdUplink        = 0L;
  m_NextVolThresholdUplinkIsSet   = false;
  m_NextVolThresholdDownlink      = 0L;
  m_NextVolThresholdDownlinkIsSet = false;
  m_NextTimeThreshold             = 0;
  m_NextTimeThresholdIsSet        = false;
  m_InactivityTime                = 0;
  m_InactivityTimeIsSet           = false;
  m_ExUsagePccRuleIdsIsSet        = false;
}

void UsageMonitoringData::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool UsageMonitoringData::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool UsageMonitoringData::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "UsageMonitoringData" : pathPrefix;

  if (volumeThresholdIsSet()) {
    const int64_t& value               = m_VolumeThreshold;
    const std::string currentValuePath = _pathPrefix + ".volumeThreshold";

    if (value < 0ll) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  if (volumeThresholdUplinkIsSet()) {
    const int64_t& value               = m_VolumeThresholdUplink;
    const std::string currentValuePath = _pathPrefix + ".volumeThresholdUplink";

    if (value < 0ll) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  if (volumeThresholdDownlinkIsSet()) {
    const int64_t& value = m_VolumeThresholdDownlink;
    const std::string currentValuePath =
        _pathPrefix + ".volumeThresholdDownlink";

    if (value < 0ll) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  if (nextVolThresholdIsSet()) {
    const int64_t& value               = m_NextVolThreshold;
    const std::string currentValuePath = _pathPrefix + ".nextVolThreshold";

    if (value < 0ll) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  if (nextVolThresholdUplinkIsSet()) {
    const int64_t& value = m_NextVolThresholdUplink;
    const std::string currentValuePath =
        _pathPrefix + ".nextVolThresholdUplink";

    if (value < 0ll) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  if (nextVolThresholdDownlinkIsSet()) {
    const int64_t& value = m_NextVolThresholdDownlink;
    const std::string currentValuePath =
        _pathPrefix + ".nextVolThresholdDownlink";

    if (value < 0ll) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  if (exUsagePccRuleIdsIsSet()) {
    const std::vector<std::string>& value = m_ExUsagePccRuleIds;
    const std::string currentValuePath    = _pathPrefix + ".exUsagePccRuleIds";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    /*
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const std::string& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        i++;
      }
    }
    */
  }

  return success;
}

bool UsageMonitoringData::operator==(const UsageMonitoringData& rhs) const {
  return

      (getUmId() == rhs.getUmId()) &&

      ((!volumeThresholdIsSet() && !rhs.volumeThresholdIsSet()) ||
       (volumeThresholdIsSet() && rhs.volumeThresholdIsSet() &&
        getVolumeThreshold() == rhs.getVolumeThreshold())) &&

      ((!volumeThresholdUplinkIsSet() && !rhs.volumeThresholdUplinkIsSet()) ||
       (volumeThresholdUplinkIsSet() && rhs.volumeThresholdUplinkIsSet() &&
        getVolumeThresholdUplink() == rhs.getVolumeThresholdUplink())) &&

      ((!volumeThresholdDownlinkIsSet() &&
        !rhs.volumeThresholdDownlinkIsSet()) ||
       (volumeThresholdDownlinkIsSet() && rhs.volumeThresholdDownlinkIsSet() &&
        getVolumeThresholdDownlink() == rhs.getVolumeThresholdDownlink())) &&

      ((!timeThresholdIsSet() && !rhs.timeThresholdIsSet()) ||
       (timeThresholdIsSet() && rhs.timeThresholdIsSet() &&
        getTimeThreshold() == rhs.getTimeThreshold())) &&

      ((!monitoringTimeIsSet() && !rhs.monitoringTimeIsSet()) ||
       (monitoringTimeIsSet() && rhs.monitoringTimeIsSet() &&
        getMonitoringTime() == rhs.getMonitoringTime())) &&

      ((!nextVolThresholdIsSet() && !rhs.nextVolThresholdIsSet()) ||
       (nextVolThresholdIsSet() && rhs.nextVolThresholdIsSet() &&
        getNextVolThreshold() == rhs.getNextVolThreshold())) &&

      ((!nextVolThresholdUplinkIsSet() && !rhs.nextVolThresholdUplinkIsSet()) ||
       (nextVolThresholdUplinkIsSet() && rhs.nextVolThresholdUplinkIsSet() &&
        getNextVolThresholdUplink() == rhs.getNextVolThresholdUplink())) &&

      ((!nextVolThresholdDownlinkIsSet() &&
        !rhs.nextVolThresholdDownlinkIsSet()) ||
       (nextVolThresholdDownlinkIsSet() &&
        rhs.nextVolThresholdDownlinkIsSet() &&
        getNextVolThresholdDownlink() == rhs.getNextVolThresholdDownlink())) &&

      ((!nextTimeThresholdIsSet() && !rhs.nextTimeThresholdIsSet()) ||
       (nextTimeThresholdIsSet() && rhs.nextTimeThresholdIsSet() &&
        getNextTimeThreshold() == rhs.getNextTimeThreshold())) &&

      ((!inactivityTimeIsSet() && !rhs.inactivityTimeIsSet()) ||
       (inactivityTimeIsSet() && rhs.inactivityTimeIsSet() &&
        getInactivityTime() == rhs.getInactivityTime())) &&

      ((!exUsagePccRuleIdsIsSet() && !rhs.exUsagePccRuleIdsIsSet()) ||
       (exUsagePccRuleIdsIsSet() && rhs.exUsagePccRuleIdsIsSet() &&
        getExUsagePccRuleIds() == rhs.getExUsagePccRuleIds()))

          ;
}

bool UsageMonitoringData::operator!=(const UsageMonitoringData& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UsageMonitoringData& o) {
  j         = nlohmann::json();
  j["umId"] = o.m_UmId;
  if (o.volumeThresholdIsSet()) j["volumeThreshold"] = o.m_VolumeThreshold;
  if (o.volumeThresholdUplinkIsSet())
    j["volumeThresholdUplink"] = o.m_VolumeThresholdUplink;
  if (o.volumeThresholdDownlinkIsSet())
    j["volumeThresholdDownlink"] = o.m_VolumeThresholdDownlink;
  if (o.timeThresholdIsSet()) j["timeThreshold"] = o.m_TimeThreshold;
  if (o.monitoringTimeIsSet()) j["monitoringTime"] = o.m_MonitoringTime;
  if (o.nextVolThresholdIsSet()) j["nextVolThreshold"] = o.m_NextVolThreshold;
  if (o.nextVolThresholdUplinkIsSet())
    j["nextVolThresholdUplink"] = o.m_NextVolThresholdUplink;
  if (o.nextVolThresholdDownlinkIsSet())
    j["nextVolThresholdDownlink"] = o.m_NextVolThresholdDownlink;
  if (o.nextTimeThresholdIsSet())
    j["nextTimeThreshold"] = o.m_NextTimeThreshold;
  if (o.inactivityTimeIsSet()) j["inactivityTime"] = o.m_InactivityTime;
  if (o.exUsagePccRuleIdsIsSet() || !o.m_ExUsagePccRuleIds.empty())
    j["exUsagePccRuleIds"] = o.m_ExUsagePccRuleIds;
}

void from_json(const nlohmann::json& j, UsageMonitoringData& o) {
  j.at("umId").get_to(o.m_UmId);
  if (j.find("volumeThreshold") != j.end()) {
    j.at("volumeThreshold").get_to(o.m_VolumeThreshold);
    o.m_VolumeThresholdIsSet = true;
  }
  if (j.find("volumeThresholdUplink") != j.end()) {
    j.at("volumeThresholdUplink").get_to(o.m_VolumeThresholdUplink);
    o.m_VolumeThresholdUplinkIsSet = true;
  }
  if (j.find("volumeThresholdDownlink") != j.end()) {
    j.at("volumeThresholdDownlink").get_to(o.m_VolumeThresholdDownlink);
    o.m_VolumeThresholdDownlinkIsSet = true;
  }
  if (j.find("timeThreshold") != j.end()) {
    j.at("timeThreshold").get_to(o.m_TimeThreshold);
    o.m_TimeThresholdIsSet = true;
  }
  if (j.find("monitoringTime") != j.end()) {
    j.at("monitoringTime").get_to(o.m_MonitoringTime);
    o.m_MonitoringTimeIsSet = true;
  }
  if (j.find("nextVolThreshold") != j.end()) {
    j.at("nextVolThreshold").get_to(o.m_NextVolThreshold);
    o.m_NextVolThresholdIsSet = true;
  }
  if (j.find("nextVolThresholdUplink") != j.end()) {
    j.at("nextVolThresholdUplink").get_to(o.m_NextVolThresholdUplink);
    o.m_NextVolThresholdUplinkIsSet = true;
  }
  if (j.find("nextVolThresholdDownlink") != j.end()) {
    j.at("nextVolThresholdDownlink").get_to(o.m_NextVolThresholdDownlink);
    o.m_NextVolThresholdDownlinkIsSet = true;
  }
  if (j.find("nextTimeThreshold") != j.end()) {
    j.at("nextTimeThreshold").get_to(o.m_NextTimeThreshold);
    o.m_NextTimeThresholdIsSet = true;
  }
  if (j.find("inactivityTime") != j.end()) {
    j.at("inactivityTime").get_to(o.m_InactivityTime);
    o.m_InactivityTimeIsSet = true;
  }
  if (j.find("exUsagePccRuleIds") != j.end()) {
    j.at("exUsagePccRuleIds").get_to(o.m_ExUsagePccRuleIds);
    o.m_ExUsagePccRuleIdsIsSet = true;
  }
}

std::string UsageMonitoringData::getUmId() const {
  return m_UmId;
}
void UsageMonitoringData::setUmId(std::string const& value) {
  m_UmId = value;
}
int64_t UsageMonitoringData::getVolumeThreshold() const {
  return m_VolumeThreshold;
}
void UsageMonitoringData::setVolumeThreshold(int64_t const value) {
  m_VolumeThreshold      = value;
  m_VolumeThresholdIsSet = true;
}
bool UsageMonitoringData::volumeThresholdIsSet() const {
  return m_VolumeThresholdIsSet;
}
void UsageMonitoringData::unsetVolumeThreshold() {
  m_VolumeThresholdIsSet = false;
}
int64_t UsageMonitoringData::getVolumeThresholdUplink() const {
  return m_VolumeThresholdUplink;
}
void UsageMonitoringData::setVolumeThresholdUplink(int64_t const value) {
  m_VolumeThresholdUplink      = value;
  m_VolumeThresholdUplinkIsSet = true;
}
bool UsageMonitoringData::volumeThresholdUplinkIsSet() const {
  return m_VolumeThresholdUplinkIsSet;
}
void UsageMonitoringData::unsetVolumeThresholdUplink() {
  m_VolumeThresholdUplinkIsSet = false;
}
int64_t UsageMonitoringData::getVolumeThresholdDownlink() const {
  return m_VolumeThresholdDownlink;
}
void UsageMonitoringData::setVolumeThresholdDownlink(int64_t const value) {
  m_VolumeThresholdDownlink      = value;
  m_VolumeThresholdDownlinkIsSet = true;
}
bool UsageMonitoringData::volumeThresholdDownlinkIsSet() const {
  return m_VolumeThresholdDownlinkIsSet;
}
void UsageMonitoringData::unsetVolumeThresholdDownlink() {
  m_VolumeThresholdDownlinkIsSet = false;
}
int32_t UsageMonitoringData::getTimeThreshold() const {
  return m_TimeThreshold;
}
void UsageMonitoringData::setTimeThreshold(int32_t const value) {
  m_TimeThreshold      = value;
  m_TimeThresholdIsSet = true;
}
bool UsageMonitoringData::timeThresholdIsSet() const {
  return m_TimeThresholdIsSet;
}
void UsageMonitoringData::unsetTimeThreshold() {
  m_TimeThresholdIsSet = false;
}
std::string UsageMonitoringData::getMonitoringTime() const {
  return m_MonitoringTime;
}
void UsageMonitoringData::setMonitoringTime(std::string const& value) {
  m_MonitoringTime      = value;
  m_MonitoringTimeIsSet = true;
}
bool UsageMonitoringData::monitoringTimeIsSet() const {
  return m_MonitoringTimeIsSet;
}
void UsageMonitoringData::unsetMonitoringTime() {
  m_MonitoringTimeIsSet = false;
}
int64_t UsageMonitoringData::getNextVolThreshold() const {
  return m_NextVolThreshold;
}
void UsageMonitoringData::setNextVolThreshold(int64_t const value) {
  m_NextVolThreshold      = value;
  m_NextVolThresholdIsSet = true;
}
bool UsageMonitoringData::nextVolThresholdIsSet() const {
  return m_NextVolThresholdIsSet;
}
void UsageMonitoringData::unsetNextVolThreshold() {
  m_NextVolThresholdIsSet = false;
}
int64_t UsageMonitoringData::getNextVolThresholdUplink() const {
  return m_NextVolThresholdUplink;
}
void UsageMonitoringData::setNextVolThresholdUplink(int64_t const value) {
  m_NextVolThresholdUplink      = value;
  m_NextVolThresholdUplinkIsSet = true;
}
bool UsageMonitoringData::nextVolThresholdUplinkIsSet() const {
  return m_NextVolThresholdUplinkIsSet;
}
void UsageMonitoringData::unsetNextVolThresholdUplink() {
  m_NextVolThresholdUplinkIsSet = false;
}
int64_t UsageMonitoringData::getNextVolThresholdDownlink() const {
  return m_NextVolThresholdDownlink;
}
void UsageMonitoringData::setNextVolThresholdDownlink(int64_t const value) {
  m_NextVolThresholdDownlink      = value;
  m_NextVolThresholdDownlinkIsSet = true;
}
bool UsageMonitoringData::nextVolThresholdDownlinkIsSet() const {
  return m_NextVolThresholdDownlinkIsSet;
}
void UsageMonitoringData::unsetNextVolThresholdDownlink() {
  m_NextVolThresholdDownlinkIsSet = false;
}
int32_t UsageMonitoringData::getNextTimeThreshold() const {
  return m_NextTimeThreshold;
}
void UsageMonitoringData::setNextTimeThreshold(int32_t const value) {
  m_NextTimeThreshold      = value;
  m_NextTimeThresholdIsSet = true;
}
bool UsageMonitoringData::nextTimeThresholdIsSet() const {
  return m_NextTimeThresholdIsSet;
}
void UsageMonitoringData::unsetNextTimeThreshold() {
  m_NextTimeThresholdIsSet = false;
}
int32_t UsageMonitoringData::getInactivityTime() const {
  return m_InactivityTime;
}
void UsageMonitoringData::setInactivityTime(int32_t const value) {
  m_InactivityTime      = value;
  m_InactivityTimeIsSet = true;
}
bool UsageMonitoringData::inactivityTimeIsSet() const {
  return m_InactivityTimeIsSet;
}
void UsageMonitoringData::unsetInactivityTime() {
  m_InactivityTimeIsSet = false;
}
std::vector<std::string> UsageMonitoringData::getExUsagePccRuleIds() const {
  return m_ExUsagePccRuleIds;
}
void UsageMonitoringData::setExUsagePccRuleIds(
    std::vector<std::string> const& value) {
  m_ExUsagePccRuleIds      = value;
  m_ExUsagePccRuleIdsIsSet = true;
}
bool UsageMonitoringData::exUsagePccRuleIdsIsSet() const {
  return m_ExUsagePccRuleIdsIsSet;
}
void UsageMonitoringData::unsetExUsagePccRuleIds() {
  m_ExUsagePccRuleIdsIsSet = false;
}

}  // namespace oai::model::pcf
