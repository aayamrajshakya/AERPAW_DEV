/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ConditionData.h
 *
 *
 */

#ifndef ConditionData_H_
#define ConditionData_H_

#include "RatType.h"
#include <string>
#include "AccessType.h"
#include <nlohmann/json.hpp>

namespace oai::model::pcf {

/// <summary>
///
/// </summary>
class ConditionData {
 public:
  ConditionData();
  virtual ~ConditionData() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const ConditionData& rhs) const;
  bool operator!=(const ConditionData& rhs) const;

  /////////////////////////////////////////////
  /// ConditionData members

  /// <summary>
  /// Uniquely identifies the condition data within a PDU session.
  /// </summary>
  std::string getCondId() const;
  void setCondId(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  std::string getActivationTime() const;
  void setActivationTime(std::string const& value);
  bool activationTimeIsSet() const;
  void unsetActivationTime();
  /// <summary>
  ///
  /// </summary>
  std::string getDeactivationTime() const;
  void setDeactivationTime(std::string const& value);
  bool deactivationTimeIsSet() const;
  void unsetDeactivationTime();
  /// <summary>
  ///
  /// </summary>
  oai::model::common::AccessType getAccessType() const;
  void setAccessType(oai::model::common::AccessType const& value);
  bool accessTypeIsSet() const;
  void unsetAccessType();
  /// <summary>
  ///
  /// </summary>
  oai::model::common::RatType getRatType() const;
  void setRatType(oai::model::common::RatType const& value);
  bool ratTypeIsSet() const;
  void unsetRatType();

  friend void to_json(nlohmann::json& j, const ConditionData& o);
  friend void from_json(const nlohmann::json& j, ConditionData& o);

 protected:
  std::string m_CondId;

  std::string m_ActivationTime;
  bool m_ActivationTimeIsSet;
  std::string m_DeactivationTime;
  bool m_DeactivationTimeIsSet;
  oai::model::common::AccessType m_AccessType;
  bool m_AccessTypeIsSet;
  oai::model::common::RatType m_RatType;
  bool m_RatTypeIsSet;
};

}  // namespace oai::model::pcf

#endif /* ConditionData_H_ */
