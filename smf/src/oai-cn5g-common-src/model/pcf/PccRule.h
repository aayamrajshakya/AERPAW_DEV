/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PccRule.h
 *
 *
 */

#ifndef PccRule_H_
#define PccRule_H_

#include "DownlinkDataNotificationControl.h"
#include "TscaiInputContainer.h"
#include <string>
#include "FlowInformation.h"
#include "AfSigProtocol.h"
#include <vector>
#include "DownlinkDataNotificationControlRm.h"
#include <nlohmann/json.hpp>

namespace oai::model::pcf {

/// <summary>
///
/// </summary>
class PccRule {
 public:
  PccRule();
  virtual ~PccRule() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const PccRule& rhs) const;
  bool operator!=(const PccRule& rhs) const;

  /////////////////////////////////////////////
  /// PccRule members

  /// <summary>
  /// An array of IP flow packet filter information.
  /// </summary>
  std::vector<oai::model::pcf::FlowInformation> getFlowInfos() const;
  void setFlowInfos(std::vector<oai::model::pcf::FlowInformation> const& value);
  bool flowInfosIsSet() const;
  void unsetFlowInfos();
  /// <summary>
  /// A reference to the application detection filter configured at the UPF.
  /// </summary>
  std::string getAppId() const;
  void setAppId(std::string const& value);
  bool appIdIsSet() const;
  void unsetAppId();
  /// <summary>
  ///
  /// </summary>
  std::string getAppDescriptor() const;
  void setAppDescriptor(std::string const& value);
  bool appDescriptorIsSet() const;
  void unsetAppDescriptor();
  /// <summary>
  /// Represents the content version of some content.
  /// </summary>
  int32_t getContVer() const;
  void setContVer(int32_t const value);
  bool contVerIsSet() const;
  void unsetContVer();
  /// <summary>
  /// Univocally identifies the PCC rule within a PDU session.
  /// </summary>
  std::string getPccRuleId() const;
  void setPccRuleId(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  int32_t getPrecedence() const;
  void setPrecedence(int32_t const value);
  bool precedenceIsSet() const;
  void unsetPrecedence();
  /// <summary>
  ///
  /// </summary>
  oai::model::pcf::AfSigProtocol getAfSigProtocol() const;
  void setAfSigProtocol(oai::model::pcf::AfSigProtocol const& value);
  bool afSigProtocolIsSet() const;
  void unsetAfSigProtocol();
  /// <summary>
  /// Indication of application relocation possibility.
  /// </summary>
  bool isAppReloc() const;
  void setAppReloc(bool const value);
  bool appRelocIsSet() const;
  void unsetAppReloc();
  /// <summary>
  /// A reference to the QosData policy decision type. It is the qosId described
  /// in subclause 5.6.2.8.
  /// </summary>
  std::vector<std::string> getRefQosData() const;
  void setRefQosData(std::vector<std::string> const& value);
  bool refQosDataIsSet() const;
  void unsetRefQosData();
  /// <summary>
  /// A Reference to the QosData policy decision type for the Alternative QoS
  /// parameter sets of the service data flow.
  /// </summary>
  std::vector<std::string> getRefAltQosParams() const;
  void setRefAltQosParams(std::vector<std::string> const& value);
  bool refAltQosParamsIsSet() const;
  void unsetRefAltQosParams();
  /// <summary>
  /// A reference to the TrafficControlData policy decision type. It is the tcId
  /// described in subclause 5.6.2.10.
  /// </summary>
  std::vector<std::string> getRefTcData() const;
  void setRefTcData(std::vector<std::string> const& value);
  bool refTcDataIsSet() const;
  void unsetRefTcData();
  /// <summary>
  /// A reference to the ChargingData policy decision type. It is the chgId
  /// described in subclause 5.6.2.11.
  /// </summary>
  std::vector<std::string> getRefChgData() const;
  void setRefChgData(std::vector<std::string> const& value);
  bool refChgDataIsSet() const;
  void unsetRefChgData();
  /// <summary>
  /// A reference to the ChargingData policy decision type only applicable to
  /// Non-3GPP access if \&quot;ATSSS\&quot; feature is supported. It is the
  /// chgId described in subclause 5.6.2.11.
  /// </summary>
  std::vector<std::string> getRefChgN3gData() const;
  void setRefChgN3gData(std::vector<std::string> const& value);
  bool refChgN3gDataIsSet() const;
  void unsetRefChgN3gData();
  /// <summary>
  /// A reference to UsageMonitoringData policy decision type. It is the umId
  /// described in subclause 5.6.2.12.
  /// </summary>
  std::vector<std::string> getRefUmData() const;
  void setRefUmData(std::vector<std::string> const& value);
  bool refUmDataIsSet() const;
  void unsetRefUmData();
  /// <summary>
  /// A reference to UsageMonitoringData policy decision type only applicable to
  /// Non-3GPP access if \&quot;ATSSS\&quot; feature is supported. It is the
  /// umId described in subclause 5.6.2.12.
  /// </summary>
  std::vector<std::string> getRefUmN3gData() const;
  void setRefUmN3gData(std::vector<std::string> const& value);
  bool refUmN3gDataIsSet() const;
  void unsetRefUmN3gData();
  /// <summary>
  /// A reference to the condition data. It is the condId described in
  /// subclause 5.6.2.9.
  /// </summary>
  std::string getRefCondData() const;
  void setRefCondData(std::string const& value);
  bool refCondDataIsSet() const;
  void unsetRefCondData();
  /// <summary>
  /// A reference to the QosMonitoringData policy decision type. It is the qmId
  /// described in subclause 5.6.2.40.
  /// </summary>
  std::vector<std::string> getRefQosMon() const;
  void setRefQosMon(std::vector<std::string> const& value);
  bool refQosMonIsSet() const;
  void unsetRefQosMon();
  /// <summary>
  ///
  /// </summary>
  bool isAddrPreserInd() const;
  void setAddrPreserInd(bool const value);
  bool addrPreserIndIsSet() const;
  void unsetAddrPreserInd();
  /// <summary>
  ///
  /// </summary>
  oai::model::pcf::TscaiInputContainer getTscaiInputDl() const;
  void setTscaiInputDl(oai::model::pcf::TscaiInputContainer const& value);
  bool tscaiInputDlIsSet() const;
  void unsetTscaiInputDl();
  /// <summary>
  ///
  /// </summary>
  oai::model::pcf::TscaiInputContainer getTscaiInputUl() const;
  void setTscaiInputUl(oai::model::pcf::TscaiInputContainer const& value);
  bool tscaiInputUlIsSet() const;
  void unsetTscaiInputUl();
  /// <summary>
  ///
  /// </summary>
  oai::model::pcf::DownlinkDataNotificationControl getDdNotifCtrl() const;
  void setDdNotifCtrl(
      oai::model::pcf::DownlinkDataNotificationControl const& value);
  bool ddNotifCtrlIsSet() const;
  void unsetDdNotifCtrl();
  /// <summary>
  ///
  /// </summary>
  oai::model::pcf::DownlinkDataNotificationControlRm getDdNotifCtrl2() const;
  void setDdNotifCtrl2(
      oai::model::pcf::DownlinkDataNotificationControlRm const& value);
  bool ddNotifCtrl2IsSet() const;
  void unsetDdNotifCtrl2();
  /// <summary>
  ///
  /// </summary>
  bool isDisUeNotif() const;
  void setDisUeNotif(bool const value);
  bool disUeNotifIsSet() const;
  void unsetDisUeNotif();

  [[nodiscard]] std::string getFirstFlowDescription() const;

  friend void to_json(nlohmann::json& j, const PccRule& o);
  friend void from_json(const nlohmann::json& j, PccRule& o);

 protected:
  std::vector<oai::model::pcf::FlowInformation> m_FlowInfos;
  bool m_FlowInfosIsSet;
  std::string m_AppId;
  bool m_AppIdIsSet;
  std::string m_AppDescriptor;
  bool m_AppDescriptorIsSet;
  int32_t m_ContVer;
  bool m_ContVerIsSet;
  std::string m_PccRuleId;

  int32_t m_Precedence;
  bool m_PrecedenceIsSet;
  oai::model::pcf::AfSigProtocol m_AfSigProtocol;
  bool m_AfSigProtocolIsSet;
  bool m_AppReloc;
  bool m_AppRelocIsSet;
  std::vector<std::string> m_RefQosData;
  bool m_RefQosDataIsSet;
  std::vector<std::string> m_RefAltQosParams;
  bool m_RefAltQosParamsIsSet;
  std::vector<std::string> m_RefTcData;
  bool m_RefTcDataIsSet;
  std::vector<std::string> m_RefChgData;
  bool m_RefChgDataIsSet;
  std::vector<std::string> m_RefChgN3gData;
  bool m_RefChgN3gDataIsSet;
  std::vector<std::string> m_RefUmData;
  bool m_RefUmDataIsSet;
  std::vector<std::string> m_RefUmN3gData;
  bool m_RefUmN3gDataIsSet;
  std::string m_RefCondData;
  bool m_RefCondDataIsSet;
  std::vector<std::string> m_RefQosMon;
  bool m_RefQosMonIsSet;
  bool m_AddrPreserInd;
  bool m_AddrPreserIndIsSet;
  oai::model::pcf::TscaiInputContainer m_TscaiInputDl;
  bool m_TscaiInputDlIsSet;
  oai::model::pcf::TscaiInputContainer m_TscaiInputUl;
  bool m_TscaiInputUlIsSet;
  oai::model::pcf::DownlinkDataNotificationControl m_DdNotifCtrl;
  bool m_DdNotifCtrlIsSet;
  oai::model::pcf::DownlinkDataNotificationControlRm m_DdNotifCtrl2;
  bool m_DdNotifCtrl2IsSet;
  bool m_DisUeNotif;
  bool m_DisUeNotifIsSet;
};

}  // namespace oai::model::pcf

#endif /* PccRule_H_ */
