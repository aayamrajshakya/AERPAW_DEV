/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SessionRuleFailureCode.h
 *
 * Possible values are   - NF_MAL: Indicate that the PCC rule could not be
 * successfully installed (for those provisioned from the PCF) or activated (for
 * those pre-defined in SMF) or enforced (for those already successfully
 * installed) due to SMF/UPF malfunction.   - RES_LIM: Indicate that the PCC
 * rule could not be successfully installed (for those provisioned from PCF) or
 * activated (for those pre-defined in SMF) or enforced (for those already
 * successfully installed) due to a limitation of resources at the SMF/UPF.   -
 * UNSUCC_QOS_VAL: indicate that the QoS validation has failed.   - UE_STA_SUSP:
 * Indicates that the UE is in suspend state.
 */

#ifndef SessionRuleFailureCode_H_
#define SessionRuleFailureCode_H_

#include "SessionRuleFailureCode_anyOf.h"
#include <nlohmann/json.hpp>

namespace oai::model::pcf {

/// <summary>
/// Possible values are   - NF_MAL: Indicate that the PCC rule could not be
/// successfully installed (for those provisioned from the PCF) or activated
/// (for those pre-defined in SMF) or enforced (for those already successfully
/// installed) due to SMF/UPF malfunction.   - RES_LIM: Indicate that the PCC
/// rule could not be successfully installed (for those provisioned from PCF) or
/// activated (for those pre-defined in SMF) or enforced (for those already
/// successfully installed) due to a limitation of resources at the SMF/UPF.   -
/// UNSUCC_QOS_VAL: indicate that the QoS validation has failed.   -
/// UE_STA_SUSP: Indicates that the UE is in suspend state.
/// </summary>
class SessionRuleFailureCode {
 public:
  SessionRuleFailureCode();
  virtual ~SessionRuleFailureCode() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const SessionRuleFailureCode& rhs) const;
  bool operator!=(const SessionRuleFailureCode& rhs) const;

  /////////////////////////////////////////////
  /// SessionRuleFailureCode members

  SessionRuleFailureCode_anyOf getValue() const;
  void setValue(SessionRuleFailureCode_anyOf value);
  SessionRuleFailureCode_anyOf::eSessionRuleFailureCode_anyOf getEnumValue()
      const;
  void setEnumValue(
      SessionRuleFailureCode_anyOf::eSessionRuleFailureCode_anyOf value);
  friend void to_json(nlohmann::json& j, const SessionRuleFailureCode& o);
  friend void from_json(const nlohmann::json& j, SessionRuleFailureCode& o);
  friend void to_json(nlohmann::json& j, const SessionRuleFailureCode_anyOf& o);
  friend void from_json(
      const nlohmann::json& j, SessionRuleFailureCode_anyOf& o);

 protected:
  SessionRuleFailureCode_anyOf m_value;
};

}  // namespace oai::model::pcf

#endif /* SessionRuleFailureCode_H_ */
