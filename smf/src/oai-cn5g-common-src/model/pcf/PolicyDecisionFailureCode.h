/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PolicyDecisionFailureCode.h
 *
 *
 */

#ifndef PolicyDecisionFailureCode_H_
#define PolicyDecisionFailureCode_H_

#include "PolicyDecisionFailureCode_anyOf.h"
#include <nlohmann/json.hpp>

namespace oai::model::pcf {

/// <summary>
///
/// </summary>
class PolicyDecisionFailureCode {
 public:
  PolicyDecisionFailureCode();
  virtual ~PolicyDecisionFailureCode() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const PolicyDecisionFailureCode& rhs) const;
  bool operator!=(const PolicyDecisionFailureCode& rhs) const;

  /////////////////////////////////////////////
  /// PolicyDecisionFailureCode members

  PolicyDecisionFailureCode_anyOf getValue() const;
  void setValue(PolicyDecisionFailureCode_anyOf value);
  PolicyDecisionFailureCode_anyOf::ePolicyDecisionFailureCode_anyOf
  getEnumValue() const;
  void setEnumValue(
      PolicyDecisionFailureCode_anyOf::ePolicyDecisionFailureCode_anyOf value);
  friend void to_json(nlohmann::json& j, const PolicyDecisionFailureCode& o);
  friend void from_json(const nlohmann::json& j, PolicyDecisionFailureCode& o);
  friend void to_json(
      nlohmann::json& j, const PolicyDecisionFailureCode_anyOf& o);
  friend void from_json(
      const nlohmann::json& j, PolicyDecisionFailureCode_anyOf& o);

 protected:
  PolicyDecisionFailureCode_anyOf m_value;
};

}  // namespace oai::model::pcf

#endif /* PolicyDecisionFailureCode_H_ */
