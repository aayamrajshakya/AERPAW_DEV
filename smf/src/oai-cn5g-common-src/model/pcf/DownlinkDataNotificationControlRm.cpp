/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2023, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.9
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "DownlinkDataNotificationControlRm.h"
#include "Helpers.h"

#include <sstream>

namespace oai::model::pcf {

DownlinkDataNotificationControlRm::DownlinkDataNotificationControlRm() {
  m_NotifCtrlIndsIsSet = false;
  m_TypesOfNotifIsSet  = false;
}

void DownlinkDataNotificationControlRm::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool DownlinkDataNotificationControlRm::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool DownlinkDataNotificationControlRm::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "DownlinkDataNotificationControlRm" : pathPrefix;

  if (notifCtrlIndsIsSet()) {
    const std::vector<oai::model::pcf::NotificationControlIndication>& value =
        m_NotifCtrlInds;
    const std::string currentValuePath = _pathPrefix + ".notifCtrlInds";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const oai::model::pcf::NotificationControlIndication& value :
           value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".notifCtrlInds") && success;

        i++;
      }
    }
  }

  if (typesOfNotifIsSet()) {
    const std::vector<oai::model::common::DlDataDeliveryStatus>& value =
        m_TypesOfNotif;
    const std::string currentValuePath = _pathPrefix + ".typesOfNotif";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const oai::model::common::DlDataDeliveryStatus& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".typesOfNotif") && success;

        i++;
      }
    }
  }

  return success;
}

bool DownlinkDataNotificationControlRm::operator==(
    const DownlinkDataNotificationControlRm& rhs) const {
  return

      ((!notifCtrlIndsIsSet() && !rhs.notifCtrlIndsIsSet()) ||
       (notifCtrlIndsIsSet() && rhs.notifCtrlIndsIsSet() &&
        getNotifCtrlInds() == rhs.getNotifCtrlInds())) &&

      ((!typesOfNotifIsSet() && !rhs.typesOfNotifIsSet()) ||
       (typesOfNotifIsSet() && rhs.typesOfNotifIsSet() &&
        getTypesOfNotif() == rhs.getTypesOfNotif()))

          ;
}

bool DownlinkDataNotificationControlRm::operator!=(
    const DownlinkDataNotificationControlRm& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const DownlinkDataNotificationControlRm& o) {
  j = nlohmann::json();
  if (o.notifCtrlIndsIsSet() || !o.m_NotifCtrlInds.empty())
    j["notifCtrlInds"] = o.m_NotifCtrlInds;
  if (o.typesOfNotifIsSet() || !o.m_TypesOfNotif.empty())
    j["typesOfNotif"] = o.m_TypesOfNotif;
}

void from_json(const nlohmann::json& j, DownlinkDataNotificationControlRm& o) {
  if (j.find("notifCtrlInds") != j.end()) {
    j.at("notifCtrlInds").get_to(o.m_NotifCtrlInds);
    o.m_NotifCtrlIndsIsSet = true;
  }
  if (j.find("typesOfNotif") != j.end()) {
    j.at("typesOfNotif").get_to(o.m_TypesOfNotif);
    o.m_TypesOfNotifIsSet = true;
  }
}

std::vector<oai::model::pcf::NotificationControlIndication>
DownlinkDataNotificationControlRm::getNotifCtrlInds() const {
  return m_NotifCtrlInds;
}
void DownlinkDataNotificationControlRm::setNotifCtrlInds(
    std::vector<oai::model::pcf::NotificationControlIndication> const& value) {
  m_NotifCtrlInds      = value;
  m_NotifCtrlIndsIsSet = true;
}
bool DownlinkDataNotificationControlRm::notifCtrlIndsIsSet() const {
  return m_NotifCtrlIndsIsSet;
}
void DownlinkDataNotificationControlRm::unsetNotifCtrlInds() {
  m_NotifCtrlIndsIsSet = false;
}
std::vector<oai::model::common::DlDataDeliveryStatus>
DownlinkDataNotificationControlRm::getTypesOfNotif() const {
  return m_TypesOfNotif;
}
void DownlinkDataNotificationControlRm::setTypesOfNotif(
    std::vector<oai::model::common::DlDataDeliveryStatus> const& value) {
  m_TypesOfNotif      = value;
  m_TypesOfNotifIsSet = true;
}
bool DownlinkDataNotificationControlRm::typesOfNotifIsSet() const {
  return m_TypesOfNotifIsSet;
}
void DownlinkDataNotificationControlRm::unsetTypesOfNotif() {
  m_TypesOfNotifIsSet = false;
}

}  // namespace oai::model::pcf
