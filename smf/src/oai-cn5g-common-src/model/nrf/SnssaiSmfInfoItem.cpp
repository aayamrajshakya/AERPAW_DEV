/**
 * NRF NFDiscovery Service
 * NRF NFDiscovery Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.8
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SnssaiSmfInfoItem.h"
#include "Helpers.h"
#include "config.hpp"

#include <sstream>

namespace oai::model::nrf {

SnssaiSmfInfoItem::SnssaiSmfInfoItem() {}

void SnssaiSmfInfoItem::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::model::common::helpers::ValidationException(msg.str());
  }
}

bool SnssaiSmfInfoItem::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool SnssaiSmfInfoItem::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "SnssaiSmfInfoItem" : pathPrefix;

  if (!m_SNssai.validate(msg)) {
    msg << _pathPrefix << ": SNssai is invalid;";
    success = false;
  }

  /* DnnSmfInfoList */ {
    const std::vector<oai::model::nrf::DnnSmfInfoItem>& value =
        m_DnnSmfInfoList;
    const std::string currentValuePath = _pathPrefix + ".dnnSmfInfoList";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const oai::model::nrf::DnnSmfInfoItem& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".dnnSmfInfoList") &&
                  success;

        i++;
      }
    }
  }

  return success;
}

bool SnssaiSmfInfoItem::operator==(const SnssaiSmfInfoItem& rhs) const {
  return

      (getSNssai() == rhs.getSNssai()) &&

      (getDnnSmfInfoList() == rhs.getDnnSmfInfoList())

          ;
}

bool SnssaiSmfInfoItem::operator!=(const SnssaiSmfInfoItem& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SnssaiSmfInfoItem& o) {
  j                   = nlohmann::json::object();
  j["sNssai"]         = o.m_SNssai;
  j["dnnSmfInfoList"] = o.m_DnnSmfInfoList;
}

void from_json(const nlohmann::json& j, SnssaiSmfInfoItem& o) {
  j.at("sNssai").get_to(o.m_SNssai);
  j.at("dnnSmfInfoList").get_to(o.m_DnnSmfInfoList);
}

oai::model::common::Snssai SnssaiSmfInfoItem::getSNssai() const {
  return m_SNssai;
}
void SnssaiSmfInfoItem::setSNssai(oai::model::common::Snssai const& value) {
  m_SNssai = value;
}
std::vector<oai::model::nrf::DnnSmfInfoItem>
SnssaiSmfInfoItem::getDnnSmfInfoList() const {
  return m_DnnSmfInfoList;
}
void SnssaiSmfInfoItem::setDnnSmfInfoList(
    std::vector<oai::model::nrf::DnnSmfInfoItem> const& value) {
  m_DnnSmfInfoList = value;
}

std::string SnssaiSmfInfoItem::to_string(int indent_level) const {
  std::string out;
  std::string fmt_title = oai::config::get_title_formatter(indent_level);

  out.append(fmt::format(fmt_title, "snssai_smf_info_item:"));
  out.append(m_SNssai.to_string(indent_level + 1));
  if (!m_DnnSmfInfoList.empty()) {
    fmt_title = oai::config::get_title_formatter(indent_level + 1);
    out.append(fmt::format(fmt_title, "dnns:"));
    for (const auto& dnn : m_DnnSmfInfoList) {
      out.append(dnn.to_string(indent_level + 2));
    }
  }
  return out;
}

}  // namespace oai::model::nrf
